# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: interconnection/handshake/algos/psi.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n)interconnection/handshake/algos/psi.proto\x12\x1corg.interconnection.v2.algos\"Y\n\x11PsiDataIoProposal\x12\x1a\n\x12supported_versions\x18\x01 \x03(\x05\x12\x10\n\x08item_num\x18\x02 \x01(\x03\x12\x16\n\x0eresult_to_rank\x18\x03 \x01(\x05\":\n\x0fPsiDataIoResult\x12\x0f\n\x07version\x18\x01 \x01(\x05\x12\x16\n\x0eresult_to_rank\x18\x02 \x01(\x05\x62\x06proto3')



_PSIDATAIOPROPOSAL = DESCRIPTOR.message_types_by_name['PsiDataIoProposal']
_PSIDATAIORESULT = DESCRIPTOR.message_types_by_name['PsiDataIoResult']
PsiDataIoProposal = _reflection.GeneratedProtocolMessageType('PsiDataIoProposal', (_message.Message,), {
  'DESCRIPTOR' : _PSIDATAIOPROPOSAL,
  '__module__' : 'interconnection.handshake.algos.psi_pb2'
  # @@protoc_insertion_point(class_scope:org.interconnection.v2.algos.PsiDataIoProposal)
  })
_sym_db.RegisterMessage(PsiDataIoProposal)

PsiDataIoResult = _reflection.GeneratedProtocolMessageType('PsiDataIoResult', (_message.Message,), {
  'DESCRIPTOR' : _PSIDATAIORESULT,
  '__module__' : 'interconnection.handshake.algos.psi_pb2'
  # @@protoc_insertion_point(class_scope:org.interconnection.v2.algos.PsiDataIoResult)
  })
_sym_db.RegisterMessage(PsiDataIoResult)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _PSIDATAIOPROPOSAL._serialized_start=75
  _PSIDATAIOPROPOSAL._serialized_end=164
  _PSIDATAIORESULT._serialized_start=166
  _PSIDATAIORESULT._serialized_end=224
# @@protoc_insertion_point(module_scope)
