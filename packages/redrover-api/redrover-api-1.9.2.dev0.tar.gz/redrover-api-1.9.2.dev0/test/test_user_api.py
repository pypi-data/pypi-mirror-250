# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`).  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import redrover_api
from redrover_api.api.user_api import UserApi  # noqa: E501
from redrover_api.rest import ApiException


class TestUserApi(unittest.TestCase):
    """UserApi unit test stubs"""

    def setUp(self):
        self.api = redrover_api.api.user_api.UserApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_create_substitute(self):
        """Test case for create_substitute

        Creates / Updates Substitute  # noqa: E501
        """
        pass

    def test_create_substitute_0(self):
        """Test case for create_substitute_0

        Creates / Updates Substitute  # noqa: E501
        """
        pass

    def test_creates_admin(self):
        """Test case for creates_admin

        Creates / Updates Administrator  # noqa: E501
        """
        pass

    def test_creates_admin_0(self):
        """Test case for creates_admin_0

        Creates / Updates Administrator  # noqa: E501
        """
        pass

    def test_creates_employee(self):
        """Test case for creates_employee

        Creates / Updates Employee  # noqa: E501
        """
        pass

    def test_creates_employee_0(self):
        """Test case for creates_employee_0

        Creates / Updates Employee  # noqa: E501
        """
        pass

    def test_deletes_user(self):
        """Test case for deletes_user

        Deletes User  # noqa: E501
        """
        pass

    def test_get_substitute(self):
        """Test case for get_substitute

        Get Substitute by Id  # noqa: E501
        """
        pass

    def test_get_substitutes(self):
        """Test case for get_substitutes

        Query for Substitutes  # noqa: E501
        """
        pass

    def test_gets_admin(self):
        """Test case for gets_admin

        Gets Administrator  # noqa: E501
        """
        pass

    def test_gets_employee(self):
        """Test case for gets_employee

        Gets Employee  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
