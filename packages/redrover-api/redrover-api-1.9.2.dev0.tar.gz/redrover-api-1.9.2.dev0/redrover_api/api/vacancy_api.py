# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`).  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from redrover_api.api_client import ApiClient
from redrover_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VacancyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_vacancy_details(self, org_id, from_date, to_date, **kwargs):  # noqa: E501
        """ Query Vacancy Details  # noqa: E501

        Query for Vacancy Details based on specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vacancy_details(org_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param datetime from_date: From date to filter Vacancies (required)
        :param datetime to_date: From date to filter Vacancies (required)
        :param str api_key:
        :param bool verified: If a Vacancy has been verified
        :param bool filled: If a Vacancy has been filled
        :param int substitute_source_org_id:
        :param int limit: Numerical limit of results returned
        :param int offset: Offset of results returned
        :param bool include_deleted:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VacancyDetailResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_vacancy_details_with_http_info(org_id, from_date, to_date, **kwargs)  # noqa: E501

    def get_vacancy_details_with_http_info(self, org_id, from_date, to_date, **kwargs):  # noqa: E501
        """ Query Vacancy Details  # noqa: E501

        Query for Vacancy Details based on specified search criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vacancy_details_with_http_info(org_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param datetime from_date: From date to filter Vacancies (required)
        :param datetime to_date: From date to filter Vacancies (required)
        :param str api_key:
        :param bool verified: If a Vacancy has been verified
        :param bool filled: If a Vacancy has been filled
        :param int substitute_source_org_id:
        :param int limit: Numerical limit of results returned
        :param int offset: Offset of results returned
        :param bool include_deleted:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VacancyDetailResponse], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'from_date',
            'to_date',
            'api_key',
            'verified',
            'filled',
            'substitute_source_org_id',
            'limit',
            'offset',
            'include_deleted'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vacancy_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `get_vacancy_details`")  # noqa: E501
        # verify the required parameter 'from_date' is set
        if self.api_client.client_side_validation and ('from_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['from_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `from_date` when calling `get_vacancy_details`")  # noqa: E501
        # verify the required parameter 'to_date' is set
        if self.api_client.client_side_validation and ('to_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['to_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `to_date` when calling `get_vacancy_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501

        query_params = []
        if 'from_date' in local_var_params and local_var_params['from_date'] is not None:  # noqa: E501
            query_params.append(('fromDate', local_var_params['from_date']))  # noqa: E501
        if 'to_date' in local_var_params and local_var_params['to_date'] is not None:  # noqa: E501
            query_params.append(('toDate', local_var_params['to_date']))  # noqa: E501
        if 'verified' in local_var_params and local_var_params['verified'] is not None:  # noqa: E501
            query_params.append(('verified', local_var_params['verified']))  # noqa: E501
        if 'filled' in local_var_params and local_var_params['filled'] is not None:  # noqa: E501
            query_params.append(('filled', local_var_params['filled']))  # noqa: E501
        if 'substitute_source_org_id' in local_var_params and local_var_params['substitute_source_org_id'] is not None:  # noqa: E501
            query_params.append(('substituteSourceOrgId', local_var_params['substitute_source_org_id']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'include_deleted' in local_var_params and local_var_params['include_deleted'] is not None:  # noqa: E501
            query_params.append(('includeDeleted', local_var_params['include_deleted']))  # noqa: E501

        header_params = {}
        if 'api_key' in local_var_params:
            header_params['apiKey'] = local_var_params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Vacancy/vacancyDetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VacancyDetailResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
