From ce814571292243382b99b7e47bf4e04532857d55 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Felipe=20Corr=C3=AAa=20da=20Silva=20Sanches?=
 <juca@members.fsf.org>
Date: Fri, 7 Jul 2023 01:40:46 +0100
Subject: [PATCH 1/1] Removal of check- prefix on subcommands.

FontBakery won't do this, as discussed at https://github.com/miguelsousa/openbakery/commit/489a2cc76e009a7c7a6d4bd3d4f3be1a9db641bd#commitcomment-119393361
---
 .github/workflows/install_run.yml        | 24 ++++++-------
 Lib/fontbakery/cli.py                    | 38 +++++++-------------
 Lib/fontbakery/commands/check_profile.py |  2 +-
 Lib/fontbakery/profiles/adobefonts.py    |  2 +-
 Lib/fontbakery/profiles/notofonts.py     |  2 +-
 Lib/fontbakery/profiles/universal.py     |  4 +--
 tests/commands/test_usage.py             | 46 ++++++++++--------------
 7 files changed, 48 insertions(+), 70 deletions(-)

diff --git a/.github/workflows/install_run.yml b/.github/workflows/install_run.yml
index e689e491..9cb15c36 100644
--- a/.github/workflows/install_run.yml
+++ b/.github/workflows/install_run.yml
@@ -48,13 +48,13 @@ jobs:
 
     - name: Run Universal checks
       run: >-
-        fontbakery check-universal
+        fontbakery universal
         -x win_ascent_and_descent
         -x os2_metrics_match_hhea
         -x soft_dotted
         data/test/source-sans-pro/OTF/SourceSansPro-Regular.otf
         data/test/source-sans-pro/OTF/SourceSansPro-Italic.otf;
-        fontbakery check-universal
+        fontbakery universal
         -x win_ascent_and_descent
         -x os2_metrics_match_hhea
         -x fsselection
@@ -71,22 +71,22 @@ jobs:
 
     - name: Run Font Bureau checks
       run: >-
-        fontbakery check-fontbureau
+        fontbakery fontbureau
         -c ots
         -c ytlc_sanity
         data/test/fontbureau/ytlcSample.ttf
 
     - name: Run Adobe Fonts checks
       run: >-
-        fontbakery check-adobefonts
+        fontbakery adobefonts
         data/test/source-sans-pro/OTF/SourceSansPro-Regular.otf
         data/test/source-sans-pro/OTF/SourceSansPro-Italic.otf;
-        fontbakery check-adobefonts
+        fontbakery adobefonts
         data/test/source-sans-pro/VAR/SourceSansVariable-Roman.ttf
 
     - name: Try running UFO Sources checks
       run: >-
-        fontbakery check-ufo-sources --verbose data/test/test.ufo
+        fontbakery ufo-sources --verbose data/test/test.ufo
         || exit 0
       shell: bash
 
@@ -96,8 +96,8 @@ jobs:
 
     - name: Run UFO Sources checks
       run: >-
-        fontbakery check-ufo-sources --verbose data/test/test.ufo;
-        fontbakery check-ufo-sources -x designspace_has_consistent
+        fontbakery ufo-sources --verbose data/test/test.ufo;
+        fontbakery ufo-sources -x designspace_has_consistent
         "data/test/stupidfont/Stupid Font.designspace"
 
     - name: Install `shaping` extra
@@ -106,7 +106,7 @@ jobs:
 
     - name: Run Shaping checks
       run: >-
-        fontbakery check-shaping data/test/mada/Mada-Regular.ttf
+        fontbakery shaping data/test/mada/Mada-Regular.ttf
 
     - name: Install `googlefonts` extra
       run: |
@@ -114,7 +114,7 @@ jobs:
 
     - name: Run Google Fonts checks
       run: >-
-        fontbakery check-googlefonts
+        fontbakery googlefonts
         -c canonical_filename
         -c vendor_id
         -c glyph_coverage
@@ -131,7 +131,7 @@ jobs:
 
     - name: Run Fontwerk checks
       run: >-
-        fontbakery check-fontwerk
+        fontbakery fontwerk
         -c weight_class_fvar
         -c inconsistencies_between_fvar_stat
         -c style_linking
@@ -146,7 +146,7 @@ jobs:
 
     - name: Run Noto Fonts checks
       run: >-
-        fontbakery check-notofonts
+        fontbakery notofonts
         -c unicode_range_bits
         -c noto_trademark
         -c noto_vendor
diff --git a/Lib/fontbakery/cli.py b/Lib/fontbakery/cli.py
index 92645233..31cc4483 100644
--- a/Lib/fontbakery/cli.py
+++ b/Lib/fontbakery/cli.py
@@ -1,15 +1,12 @@
 import argparse
-import pkgutil
-import runpy
 import signal
 import sys
 from importlib import import_module
 
 from fontbakery import __version__
-import fontbakery.commands
 from fontbakery.commands.check_profile import main as check_profile_main
 
-CLI_PROFILES = [
+SUBCOMMANDS = [
     "adobefonts",
     "fontbureau",
     "fontval",
@@ -19,14 +16,15 @@ CLI_PROFILES = [
     "notofonts",
     "opentype",
     "shaping",
-    "ufo_sources",
+    "ufo-sources",
     "universal",
     "proposals",
+    "check-profile",
 ]
 
 
 def run_profile_check(profilename):
-    module = import_module(f"fontbakery.profiles.{profilename}")
+    module = import_module(f"fontbakery.profiles.{profilename.replace('-', '_')}")
     sys.exit(check_profile_main(module.profile))
 
 
@@ -38,27 +36,17 @@ def signal_handler(sig, frame):
 def main():
     signal.signal(signal.SIGINT, signal_handler)
 
-    subcommands = [
-        pkg[1] for pkg in pkgutil.walk_packages(fontbakery.commands.__path__)
-    ] + ["check_" + prof for prof in CLI_PROFILES]
-
-    subcommands = [command.replace("_", "-") for command in sorted(subcommands)]
-
-    if len(sys.argv) >= 2 and sys.argv[1] in subcommands:
-        # Relay to subcommand.
+    if len(sys.argv) >= 2 and sys.argv[1] in SUBCOMMANDS:
         subcommand = sys.argv[1]
-        subcommand_module = subcommand.replace("-", "_")
+
         sys.argv[0] += " " + subcommand
         del sys.argv[1]  # Make this indirection less visible for subcommands.
-        if (
-            subcommand_module.startswith("check_")
-            and subcommand_module[6:] in CLI_PROFILES
-        ):
-            run_profile_check(subcommand_module[6:])
+
+        if subcommand == "check-profile":
+            check_profile_main()
         else:
-            runpy.run_module(
-                "fontbakery.commands." + subcommand_module, run_name="__main__"
-            )
+            run_profile_check(subcommand)
+
     else:
         description = (
             "Run fontbakery subcommands. Subcommands have their own help messages;\n"
@@ -73,7 +61,7 @@ def main():
             "subcommand",
             help="The subcommand to execute",
             nargs="?",
-            choices=subcommands,
+            choices=SUBCOMMANDS,
         )
         parser.add_argument(
             "--list-subcommands",
@@ -84,6 +72,6 @@ def main():
         args = parser.parse_args()
 
         if args.list_subcommands:
-            print(" ".join(subcommands))
+            print("\n".join(SUBCOMMANDS))
         else:
             parser.print_help()
diff --git a/Lib/fontbakery/commands/check_profile.py b/Lib/fontbakery/commands/check_profile.py
index e24e0e03..b5dc4f41 100644
--- a/Lib/fontbakery/commands/check_profile.py
+++ b/Lib/fontbakery/commands/check_profile.py
@@ -350,7 +350,7 @@ def get_profile():
 
 
 def main(profile=None, values=None):
-    # profile can be injected by e.g. check-googlefonts injects it's own profile
+    # profile can be injected by e.g. 'googlefonts' subcommand
     add_profile_arg = False
     if profile is None:
         profile = get_profile()
diff --git a/Lib/fontbakery/profiles/adobefonts.py b/Lib/fontbakery/profiles/adobefonts.py
index 098cd171..c4bb4e28 100644
--- a/Lib/fontbakery/profiles/adobefonts.py
+++ b/Lib/fontbakery/profiles/adobefonts.py
@@ -25,7 +25,7 @@ profile = profile_factory(default_section=Section("Adobe Fonts"))
 
 SET_EXPLICIT_CHECKS = {
     # This is the set of explict checks that will be invoked
-    # when fontbakery is run with the 'check-adobefonts' subcommand.
+    # when fontbakery is run with the 'adobefonts' subcommand.
     # The contents of this set were last updated on April 19, 2023.
     #
     # =======================================
diff --git a/Lib/fontbakery/profiles/notofonts.py b/Lib/fontbakery/profiles/notofonts.py
index 9e14a39d..36c75585 100644
--- a/Lib/fontbakery/profiles/notofonts.py
+++ b/Lib/fontbakery/profiles/notofonts.py
@@ -42,7 +42,7 @@ NOTOFONTS_PROFILE_CHECKS = GOOGLEFONTS_PROFILE_CHECKS + [
 
 
 # For builds which target Google Fonts, we do want these checks, but as part of
-# onboarding we will be running check-googlefonts on such builds.
+# onboarding we will be running 'googlefonts' profile on such builds.
 # On other builds (e.g. targetting Android), we still want most of the Google
 # strictures but size is a premium and we will be expecting to deliver a
 # "minimal" font, so we accept the fact that there will be no Latin set and no
diff --git a/Lib/fontbakery/profiles/universal.py b/Lib/fontbakery/profiles/universal.py
index f9ce4653..bd06d2bc 100644
--- a/Lib/fontbakery/profiles/universal.py
+++ b/Lib/fontbakery/profiles/universal.py
@@ -135,8 +135,8 @@ def com_google_fonts_check_family_win_ascent_and_descent(ttFont, vmetrics):
     # that running the check may yield more or less results depending on the set of font
     # files that is provided in the command line. This behaviour is NOT a bug.
     # For example, compare the results of these two commands:
-    #   fontbakery check-universal -c ascent_and_descent data/test/mada/Mada-Regular.ttf
-    #   fontbakery check-universal -c ascent_and_descent data/test/mada/*.ttf
+    #   fontbakery universal -c win_ascent_and_descent data/test/mada/Mada-Regular.ttf
+    #   fontbakery universal -c win_ascent_and_descent data/test/mada/*.ttf
     #
     # The second command will yield more FAIL results for each font. This happens
     # because the check does a family-wide validation of the vertical metrics, instead
diff --git a/tests/commands/test_usage.py b/tests/commands/test_usage.py
index fb73dcc3..66c5fc72 100644
--- a/tests/commands/test_usage.py
+++ b/tests/commands/test_usage.py
@@ -8,24 +8,14 @@ import pytest
 TOOL_NAME = "fontbakery"
 
 
-def test_list_subcommands_has_all_scripts():
-    """Tests if the output from running `fontbakery --list-subcommands` matches
-    the fontbakery scripts within the bin folder and the promoted profiles."""
-    import fontbakery.commands
-    from fontbakery.cli import CLI_PROFILES
-
-    commands_dir = os.path.dirname(fontbakery.commands.__file__)
-
-    scripts = [
-        f.rstrip(".py").replace("_", "-")
-        for f in os.listdir(commands_dir)
-        if (f.endswith(".py") and not f.startswith("_"))
-    ]
-    scripts = scripts + [("check-" + i).replace("_", "-") for i in CLI_PROFILES]
-    subcommands = (
-        subprocess.check_output([TOOL_NAME, "--list-subcommands"]).decode().split()
-    )
-    assert sorted(scripts) == sorted(subcommands)
+def test_list_subcommands_option(capfd):
+    """Test if 'fontbakery --list-subcommands' can run successfully and output
+    the expected content."""
+    from fontbakery.cli import SUBCOMMANDS
+
+    subprocess.run([TOOL_NAME, "--list-subcommands"], check=True)
+    captured = capfd.readouterr()
+    assert captured.out == f"{os.linesep.join(SUBCOMMANDS)}{os.linesep}"
 
 
 def test_list_checks_option(capfd):
@@ -33,18 +23,18 @@ def test_list_checks_option(capfd):
     the expected content."""
     from fontbakery.profiles.universal import UNIVERSAL_PROFILE_CHECKS
 
-    subprocess.run([TOOL_NAME, "check-universal", "--list-checks"], check=True)
+    subprocess.run([TOOL_NAME, "universal", "--list-checks"], check=True)
     output = capfd.readouterr().out
     assert set(output.split()) == set(UNIVERSAL_PROFILE_CHECKS)
 
 
 def test_command_check_googlefonts():
-    """Test if 'fontbakery check-googlefonts' can run successfully."""
-    subprocess.run([TOOL_NAME, "check-googlefonts", "-h"], check=True)
+    """Test if 'fontbakery googlefonts' can run successfully."""
+    subprocess.run([TOOL_NAME, "googlefonts", "-h"], check=True)
     subprocess.run(
         [
             TOOL_NAME,
-            "check-googlefonts",
+            "googlefonts",
             "-c",
             "com.google.fonts/check/canonical_filename",
             os.path.join("data", "test", "nunito", "Nunito-Regular.ttf"),
@@ -52,15 +42,15 @@ def test_command_check_googlefonts():
         check=True,
     )
     with pytest.raises(subprocess.CalledProcessError):
-        subprocess.run([TOOL_NAME, "check-googlefonts"], check=True)
+        subprocess.run([TOOL_NAME, "googlefonts"], check=True)
 
 
 @pytest.mark.parametrize(
     "subcommand",
     [
         "check-profile",
-        "check-opentype",
-        "check-ufo-sources",
+        "opentype",
+        "ufo-sources",
     ],
 )
 def test_command_check_profile(subcommand):
@@ -88,7 +78,7 @@ def test_status_log_is_indented():
     result = subprocess.run(
         [
             TOOL_NAME,
-            "check-googlefonts",
+            "googlefonts",
             "-c",
             "old_ttfautohint",
             "-c",
@@ -128,7 +118,7 @@ def test_command_config_file():
     config.close()
     test_font = os.path.join("data", "test", "nunito", "Nunito-Regular.ttf")
     result = subprocess.run(
-        [TOOL_NAME, "check-googlefonts", "--config", config.name, test_font],
+        [TOOL_NAME, "googlefonts", "--config", config.name, test_font],
         stdout=subprocess.PIPE,
     )
     stdout = result.stdout.decode()
@@ -180,7 +170,7 @@ explicit_checks:
     config.close()
     test_font = os.path.join("data", "test", "varfont", "inter", "Inter[slnt,wght].ttf")
     result = subprocess.run(
-        [TOOL_NAME, "check-googlefonts", "-C", "--config", config.name, test_font],
+        [TOOL_NAME, "googlefonts", "-C", "--config", config.name, test_font],
         stdout=subprocess.PIPE,
     )
     stdout = result.stdout.decode()
-- 
2.30.2

