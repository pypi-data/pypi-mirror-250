From 6b7bd6fb364d5da064892e3e72865638ff27e090 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Felipe=20Corr=C3=AAa=20da=20Silva=20Sanches?=
 <juca@members.fsf.org>
Date: Fri, 7 Jul 2023 14:34:13 +0100
Subject: [PATCH 1/1] FontBakery won't change FontValidator ERROR into a FAIL.

- A FAIL is a problem in a font.
- An ERROR is a bug in the program or a bad setup, such as a missing third-party tool in the system.

When FontValidator is not installed, it is treated as a bad system setup, thus, it is classified as an ERROR. It is not a FAIL because it is not a font problem.

This was discussed at https://github.com/miguelsousa/openbakery/issues/30#issuecomment-1600765260
---
 Lib/fontbakery/profiles/fontval.py | 16 ++++++++-------
 tests/profiles/fontval_test.py     | 31 +++++++++---------------------
 2 files changed, 18 insertions(+), 29 deletions(-)

diff --git a/Lib/fontbakery/profiles/fontval.py b/Lib/fontbakery/profiles/fontval.py
index fdd2872d..bcc954eb 100644
--- a/Lib/fontbakery/profiles/fontval.py
+++ b/Lib/fontbakery/profiles/fontval.py
@@ -1,9 +1,10 @@
 from pathlib import Path
+import shutil
 import tempfile
 
 from fontbakery.callable import check
 from fontbakery.fonts_profile import profile_factory
-from fontbakery.status import ERROR, FAIL, INFO, PASS, WARN
+from fontbakery.status import FAIL, INFO, PASS, WARN
 from fontbakery.section import Section
 from fontbakery.message import Message
 from fontbakery.utils import exit_with_install_instructions
@@ -34,6 +35,13 @@ def com_google_fonts_check_fontvalidator(font, config):
             "disabled_checks, but not both."
         )
 
+    if not shutil.which("FontValidator"):
+        yield FAIL, Message(
+            "fontval-not-available",
+            "Mono runtime and/or Microsoft Font Validator are not available!",
+        )
+        return
+
     # In some cases we want to override the severity level of
     # certain checks in FontValidator:
     downgrade_to_warn = [
@@ -177,12 +185,6 @@ def com_google_fonts_check_fontvalidator(font, config):
                 " Output follows :\n\n{}\n"
             ).format("\n".join(filtered_output)),
         )
-    except (OSError, IOError) as error:
-        yield ERROR, Message(
-            "fontval-not-available",
-            "Mono runtime and/or Microsoft Font Validator are not available!",
-        )
-        raise error
 
     def report_message(msg, details):
         if details:
diff --git a/tests/profiles/fontval_test.py b/tests/profiles/fontval_test.py
index ec25b458..48c0f3f2 100644
--- a/tests/profiles/fontval_test.py
+++ b/tests/profiles/fontval_test.py
@@ -5,8 +5,8 @@ import pytest
 
 from conftest import ImportRaiser, remove_import_raiser, reload_module
 
-from fontbakery.codetesting import TEST_FILE, assert_results_contain
-from fontbakery.status import ERROR
+from fontbakery.codetesting import TEST_FILE, assert_results_contain, CheckTester
+from fontbakery.status import FAIL
 from fontbakery.profiles import fontval as fontval_profile
 
 
@@ -21,29 +21,16 @@ def test_extra_needed_exit(monkeypatch):
     remove_import_raiser(module_name)
 
 
+def test_check_fontvalidator_not_installed():
+    check = CheckTester(fontval_profile, "com.google.fonts/check/fontvalidator")
+    font = TEST_FILE("mada/Mada-Regular.ttf")
+    assert_results_contain(check(font), FAIL, "fontval-not-available")
+
+
 @pytest.mark.skipif(
     not shutil.which("FontValidator"),
     reason="FontValidator is not installed on your system",
 )
 def test_check_fontvalidator():
     """MS Font Validator checks"""
-    # check = CheckTester(fontval_profile,
-    #                     "com.google.fonts/check/fontvalidator")
-    check = fontval_profile.com_google_fonts_check_fontvalidator
-
-    font = TEST_FILE("mada/Mada-Regular.ttf")
-    config = {}
-
-    # Then we make sure that there wasn't an ERROR
-    # which would mean FontValidator is not properly installed:
-    for status, message in check(font, config):
-        assert status != ERROR
-
-    # Simulate FontVal missing.
-    import os
-
-    old_path = os.environ["PATH"]
-    os.environ["PATH"] = ""
-    with pytest.raises(OSError) as _:
-        assert_results_contain(check(font, config), ERROR, "fontval-not-available")
-    os.environ["PATH"] = old_path
+    raise NotImplementedError
-- 
2.30.2

