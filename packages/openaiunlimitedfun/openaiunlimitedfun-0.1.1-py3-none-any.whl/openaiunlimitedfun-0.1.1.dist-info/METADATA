Metadata-Version: 2.1
Name: openaiunlimitedfun
Version: 0.1.1
Summary: A comprehensive wrapper for the OpenAI API, facilitating seamless interaction with GPT models. Features include conversation management, dynamic function execution, and tools for creating JSON schemas for function descriptions. Simplifies setting API keys and managing chat contexts for enhanced GPT-based applications.
Home-page: https://github.com/maestromaximo/OpenAiUnlimitedFuncWrapper
Author: Alejandro Garcia Polo
Author-email: alejandrogarcia2423@hotmail.com
Keywords: openai,api,wrapper,function_calling,vectors,pseudo_func
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: annotated-types (==0.6.0)
Requires-Dist: anyio (==4.2.0)
Requires-Dist: certifi (==2023.11.17)
Requires-Dist: charset-normalizer (==3.3.2)
Requires-Dist: colorama (==0.4.6)
Requires-Dist: distro (==1.9.0)
Requires-Dist: h11 (==0.14.0)
Requires-Dist: httpcore (==1.0.2)
Requires-Dist: httpx (==0.26.0)
Requires-Dist: idna (==3.6)
Requires-Dist: numpy (==1.26.3)
Requires-Dist: openai (==1.6.1)
Requires-Dist: pandas (==2.1.4)
Requires-Dist: pydantic (==2.5.3)
Requires-Dist: pydantic-core (==2.14.6)
Requires-Dist: python-dateutil (==2.8.2)
Requires-Dist: python-dotenv (==1.0.0)
Requires-Dist: pytz (==2023.3.post1)
Requires-Dist: regex (==2023.12.25)
Requires-Dist: requests (==2.31.0)
Requires-Dist: six (==1.16.0)
Requires-Dist: sniffio (==1.3.0)
Requires-Dist: tenacity (==8.2.3)
Requires-Dist: tiktoken (==0.5.2)
Requires-Dist: tqdm (==4.66.1)
Requires-Dist: typing-extensions (==4.9.0)
Requires-Dist: tzdata (==2023.4)
Requires-Dist: urllib3 (==2.1.0)

# OpenAI Unlimited Function Wrapper

The `openaiunlimitedfuncwrapper` is a Python package that simplifies interaction with the OpenAI API, providing easy access to various models of GPT, including conversational capabilities, dynamic function calling, and pseudo-function execution to elicit specific responses based on parameter modification.

## Features

- Single-question querying to any GPT model and receiving a response.
- Engaging in a conversation with context management.
- Dynamically adding callable functions within the code.
- Forcing execution of real or pseudo-functions to steer responses.
- Automatic and manual creation of JSON schemas for function descriptions.
- Setting the OpenAI API key via code for environment preparation.

## Installation

To install `openaiunlimitedfuncwrapper`, simply run:

```
pip install openaiunlimitedfun
```

## Setting Up Your OpenAI API Key

Before you start using the package, you need to set your OpenAI API key. You can do this by running:

```
from openaiunlimitedfun import set_openai_api_key

set_openai_api_key('your-api-key-here')
```

This will create or append to a `.env` file in your current directory, storing your API key.

## Managing Available Functions

To make custom functions available for the OpenAI API to call during a conversation, use the `manage_available_functions` function:

```
from openaiunlimitedfun import manage_available_functions

# To save current module's functions
manage_available_functions(retrieve=False)

# To retrieve available functions
functions = manage_available_functions()
```

## Adding Functions to the Function List

If you want to add specific functions to be accessible during the conversation, use `manage_function_list`:

```
from openaiunlimitedfun import manage_function_list

# To add a function to the list
manage_function_list(function_to_add='your_function_name')

# To retrieve the list of functions
function_list = manage_function_list(retrieve=True)
```

## Generating JSON Schemas for Functions

You can create JSON schemas for your functions automatically or manually. This can be used to generate function descriptions for use within the wrapper.

### Automatic JSON Schema Generation

Automatically generate a JSON schema based on user input:

```
from openaiunlimitedfun import create_json_autoagent

schema = create_json_autoagent('Describe a function that calculates the sum of two numbers.')
print(schema)
```

### Manual JSON Schema Creation

Manually create a JSON schema through an interactive prompt:

```
from openaiunlimitedfun import create_function_json_manual

create_function_json_manual()
# Follow the interactive prompts to create your function JSON schema.
```

## Usage Examples

### Single Question

Query a single question and get a response:

```
from openaiunlimitedfun import single_question

response = single_question("What is the capital of France?")
print(response)
```

### Conversational Context

Engage in a conversation with the ability to maintain context:

```
from openaiunlimitedfun import chat_context_function_bank

question = "Who wrote the play Hamlet?"
context = []  # This should be a list of previous messages if you have them

response, updated_context = chat_context_function_bank(question, context)
print(response)
```

### Pseudo-Function Execution

Force the execution of a pseudo-function to get a desired response:

```
from openaiunlimitedfun import single_turn_pseudofunction

# Define a pseudo-function
pseudo_function = {
    "name": "calculate_sum",
    "parameters": {
        "number1": 5,
        "number2": 3
    }
}

# Use the pseudo-function in a prompt
response = single_turn_pseudofunction("What is the sum of the numbers?", pseudo_function)
print(response)
```

## Contributing

Contributions are welcome! Please feel free to submit pull requests, report bugs, and suggest features.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

#### Build

- If you want to run a new pip build make sure to actiavte an enviroment, run pip install -r requirement.txt
- Then be sure to run ```Remove-Item -Recurse -Force build, dist, *.egg-info``` if you had run a build before, else it would return an error
- Then run python ```setup.py sdist bdist_wheel```

