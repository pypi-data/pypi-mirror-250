# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/CLI/utils/chunk_size.ipynb.

# %% auto 0
__all__ = ['logger', 'get_pc_chunk_size_from_n_pc_chunk', 'get_pc_chunk_size_from_pc_chunk_size',
           'get_pc_chunk_size_from_n_ras_chunk', 'get_ras_chunk_size_from_n_pc_chunk',
           'get_ras_chunk_size_from_ras_chunk_size']

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 3
import math
import logging

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 4
logger = logging.getLogger(__name__)

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 5
def get_pc_chunk_size_from_n_pc_chunk(in_pc_name, out_pc_name,
                                      n_pc_in, pc_chunk_size_in,
                                      n_pc,
                                      pc_chunk_size=None,n_pc_chunk=None):
    '''If no specified chunk information, the n_pc_chunk of output is same as the input. '''
    if pc_chunk_size is not None:
        logger.info(f'got pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
        return pc_chunk_size
    else:
        if n_pc_chunk is not None:
            logger.info(f'got n_pc_chunk for {out_pc_name}: {n_pc_chunk}')
            logger.info(f'''automatically determine pc_chunk_size from
            n_pc of {out_pc_name} and n_pc_chunk of {out_pc_name}''')
            pc_chunk_size = math.ceil(n_pc/n_pc_chunk)
            logger.info(f'pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
            return pc_chunk_size
        else:
            logger.info(f'''automatically determine pc_chunk_size from
            n_pc of {out_pc_name} and n_pc_chunk of {in_pc_name}''')
            n_pc_chunk = math.ceil(n_pc_in/pc_chunk_size_in)
            pc_chunk_size = math.ceil(n_pc/n_pc_chunk)
            logger.info(f'pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
            return pc_chunk_size

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 6
def get_pc_chunk_size_from_pc_chunk_size(in_pc_name, out_pc_name,
                                         pc_chunk_size_in,
                                         n_pc,
                                         pc_chunk_size=None,n_pc_chunk=None):
    '''if no specified chunk information, the pc_chunk_size of output is same as the input.'''
    if pc_chunk_size is not None:
        logger.info(f'got pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
        return pc_chunk_size
    else:
        if n_pc_chunk is not None:
            logger.info(f'got n_pc_chunk for {out_pc_name}: {n_pc_chunk}')
            logger.info(f'''automatically determine pc_chunk_size from
            n_pc of {out_pc_name} and n_pc_chunk of {out_pc_name}''')
            pc_chunk_size = math.ceil(n_pc/n_pc_chunk)
            logger.info(f'pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
            return pc_chunk_size
        else:
            logger.info(f'''automatically determine pc_chunk_size from
            pc_chunk_size of {in_pc_name}.''')
            pc_chunk_size = pc_chunk_size_in
            logger.info(f'pc_chunk_size for {out_pc_name}: {pc_chunk_size}')
            return pc_chunk_size

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 7
def get_pc_chunk_size_from_n_ras_chunk(ras_name, pc_name,
                                       nlines, width,
                                       az_chunk_size_in, r_chunk_size_in,
                                       n_pc,
                                      pc_chunk_size=None,n_pc_chunk=None):
    if pc_chunk_size is not None:
        logger.info(f'got pc_chunk_size for {pc_name}: {pc_chunk_size}')
        return pc_chunk_size
    else:
        if n_pc_chunk is not None:
            logger.info(f'got n_pc_chunk for {pc_name}: {n_pc_chunk}')
            logger.info(f'''automatically determine pc_chunk_size from
            n_pc of {pc_name} and n_pc_chunk of {pc_name}''')
            pc_chunk_size = math.ceil(n_pc/n_pc_chunk)
            logger.info(f'pc_chunk_size for {pc_name}: {pc_chunk_size}')
            return pc_chunk_size
        else:
            logger.info(f'''automatically determine pc_chunk_size from
            n_pc of {pc_name} and n_ras_chunk of {ras_name}''')
            n_az_chunk = math.ceil(nlines/az_chunk_size_in)
            n_r_chunk = math.ceil(width/r_chunk_size_in)
            n_ras_chunk = n_az_chunk*n_r_chunk
            logger.info(f'n_ras_chunk of {ras_name}: {n_ras_chunk}')
            n_pc_chunk = n_ras_chunk
            pc_chunk_size = math.ceil(n_pc/n_pc_chunk)
            logger.info(f'pc_chunk_size for {pc_name}: {pc_chunk_size}')
            return pc_chunk_size

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 8
def get_ras_chunk_size_from_n_pc_chunk(pc_name, ras_name,
                                      n_pc, pc_chunk_size,
                                      nlines,width,
                                      az_chunk_size=None,
                                      n_az_chunk=None,
                                      r_chunk_size=None,
                                      n_r_chunk=None,
                                     ):
    if r_chunk_size is not None:
        logger.info(f'got r_chunk_size for {ras_name}: {r_chunk_size}')
        n_r_chunk = math.ceil(width/r_chunk_size)
    elif n_r_chunk is not None:
        logger.info(f'got n_r_chunk for {ras_name}: {n_r_chunk}')
        logger.info(f'''automatically determine r_chunk_size from 
        nlines of {ras_name} and n_r_chunk of {ras_name}''')
        r_chunk_size = math.ceil(width/n_r_chunk)
        logger.info(f'r_chunk_size for {ras_name}: {r_chunk_size}')
    else:
        logger.info(f'automatically set r_chunk_size to nlines of {ras_name}')
        r_chunk_size = width
        n_r_chunk = 1

    if az_chunk_size is not None:
        logger.info(f'got az_chunk_size for {ras_name}: {az_chunk_size}')
    else:
        if n_az_chunk is not None:
            logger.info(f'got n_az_chunk for {ras_name}: {n_az_chunk}')
            logger.info(f'''automatically determine az_chunk_size from 
            nlines of {ras_name} and n_az_chunk of {ras_name}''')
            az_chunk_size = math.ceil(nlines/n_az_chunk)
            logger.info(f'az_chunk_size for {ras_name}: {az_chunk_size}')
        else:
            logger.info(f'''automatically determine az_chunk_size from 
            nlines and n_r_chunk of {ras_name}  and n_pc_chunk of {pc_name}''')
            n_az_chunk = math.ceil(math.ceil(n_pc/pc_chunk_size)/n_r_chunk)
            az_chunk_size = math.ceil(nlines/n_az_chunk)
            logger.info(f'az_chunk_size for {ras_name}: {az_chunk_size}')
    return az_chunk_size, r_chunk_size

# %% ../../../nbs/CLI/utils/chunk_size.ipynb 9
def get_ras_chunk_size_from_ras_chunk_size(in_ras_name, out_ras_name,
                                         nlines, width,
                                         az_chunk_size_in, r_chunk_size_in,
                                         az_chunk_size=None,
                                         n_az_chunk=None,
                                         r_chunk_size=None,
                                         n_r_chunk=None,
                                        ):
    if az_chunk_size is not None:
        logger.info(f'got az_chunk_size for {out_ras_name}: {az_chunk_size}')
    else:
        if n_az_chunk is not None:
            logger.info(f'got n_az_chunk for {out_ras_name}: {n_az_chunk}')
            logger.info(f'''automatically determine az_chunk_size from
            nlines of {out_ras_name} and n_az_chunk of {out_ras_name}''')
            az_chunk_size = math.ceil(nlines/n_az_chunk)
            logger.info(f'az_chunk_size for {out_ras_name}: {az_chunk_size}')
        else:
            logger.info(f'''automatically determine az_chunk_size from 
            az_chunk_size of {in_ras_name}''')
            az_chunk_size = az_chunk_size_in
            logger.info(f'az_chunk_size for {out_ras_name}: {az_chunk_size}')
    if r_chunk_size is not None:
        logger.info(f'got r_chunk_size for {out_ras_name}: {r_chunk_size}')
    else:
        if n_r_chunk is not None:
            logger.info(f'got n_r_chunk for {out_ras_name}: {n_r_chunk}')
            logger.info(f'''automatically determine r_chunk_size from
            nlines of {out_ras_name} and n_r_chunk of {out_ras_name}''')
            r_chunk_size = math.ceil(width/n_r_chunk)
            logger.info(f'r_chunk_size for {out_ras_name}: {r_chunk_size}')
        else:
            logger.info(f'''automatically determine r_chunk_size from
            r_chunk_size of {in_ras_name}''')
            r_chunk_size = r_chunk_size_in
            logger.info(f'r_chunk_size for {out_ras_name}: {r_chunk_size}')
    return az_chunk_size, r_chunk_size
