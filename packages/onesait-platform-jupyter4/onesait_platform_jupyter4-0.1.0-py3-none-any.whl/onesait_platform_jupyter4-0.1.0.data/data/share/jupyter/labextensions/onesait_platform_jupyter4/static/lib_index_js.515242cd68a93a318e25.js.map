{"version":3,"file":"lib_index_js.515242cd68a93a318e25.js","mappings":"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","sources":["webpack://onesait_platform_jupyter4/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\n/** Import to use the Onesait Platform settings */\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\n/** Import to add commands to the Command Palette */\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\n/** Import to open the file management */\nimport { FileDialog, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\n/** Import to add notification popups */\nimport { Notification } from '@jupyterlab/apputils';\n\n/** Import the icon for the command palette. If changed, remember\n * to update the plugin.json jupyter.lab.setting-icon */\nimport { extensionIcon } from '@jupyterlab/ui-components';\n\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\n\n/**\n * Initialization data for the onesait_platform_jupyter4 extension.\n */\n\nconst PLUGIN_ID = 'onesait_platform_jupyter4:plugin';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  /** Set the ID of the schema/ config JSON --> extension:name */\n  id: PLUGIN_ID,\n  description: 'A JupyterLab 4 extension to use with Onesait Platform',\n  autoStart: true,\n  optional: [\n    ISettingRegistry,\n    IDocumentManager,\n    ICommandPalette,\n    IFileBrowserFactory\n  ],\n  activate: (\n    app: JupyterFrontEnd,\n    settings: ISettingRegistry,\n    manager: IDocumentManager,\n    palette: ICommandPalette,\n    factory: IFileBrowserFactory\n  ) => {\n    console.log(\n      'Onesait Platform JupyterLab 4 extension is activated.\\nv1.0.0'\n    );\n\n    const { commands } = app;\n    const command = 'onesait-platform-command-export-notebooks';\n\n    /** Set the Onesait Platform settings values */\n    let url = '';\n    let token = '';\n    let overwrite = false;\n    let importAuthorizations = false;\n\n    /** This function will update the setting values when updated */\n    function updateSetting(setting: ISettingRegistry.ISettings): void {\n      // Read the settings and convert to the correct type\n      url = setting.get('op_url').composite as string;\n      token = setting.get('op_token').composite as string;\n      overwrite = setting.get('op_overwrite').composite as boolean;\n      importAuthorizations = setting.get('op_importAuthorizations')\n        .composite as boolean;\n    }\n\n    const getNotebook = async (file: any) => {\n      const protocol = window.location.protocol + '//';\n      const host = window.location.host;\n      const pathname = '/api/contents/';\n      const filename = file.name;\n\n      const notebookUrl = protocol + host + pathname + filename;\n\n      /** GET the Notebook from the Jupyter Lab*/\n      const notebook = await fetch(notebookUrl);\n      const parsed = await notebook.json();\n      const json = parsed.content;\n\n      return json;\n    };\n\n    const exportNotebook = async (url: string, json: object, token: string) => {\n      return await fetch(url, {\n        method: 'POST',\n        headers: {\n          'X-OP-APIKey': token,\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(json)\n      });\n    };\n\n    Promise.all([app.restored, settings.load(PLUGIN_ID)])\n      .then(([, setting]) => {\n        /** Get the settings */\n        updateSetting(setting);\n\n        /** Listen for the plugin setting changes */\n        setting.changed.connect(updateSetting);\n\n        // Add the command to the palette\n        commands.addCommand(command, {\n          label: 'Onesait Platform: Export Notebooks...',\n          icon: extensionIcon,\n          caption:\n            'Export the selected Notebooks to Onesait Platform Zeppelin Notebooks',\n          execute: async (args: any) => {\n            /** Check if the user has entered the Platform URL and token */\n            if (url === '' || token === '') {\n              const warn =\n                'Please configure Onesait Platform URL and token data before begin to work.';\n              console.warn(warn);\n              Notification.warning(warn);\n            } else {\n              /** Open the file manager to let the user to select the notebooks */\n              // TODO: filter just Notebooks\n              const dialog = FileDialog.getOpenFiles({\n                manager // IDocumentManager\n                //filter: model => model.type === 'notebook' // optional (model: Contents.IModel) => boolean\n                //filter: (model: Contents.IModel) => model.type === 'notebook'\n                //filter: value => filteredItems.indexOf(value.name !== -1)\n              });\n\n              const result = await dialog;\n\n              if (result.button.accept) {\n                const files = result.value;\n                const platformApiRest =\n                  '/controlpanel/api/notebooks/import/jupyter';\n\n                files?.forEach(async (file: any) => {\n                  /** Check if the file is a Notebook. This is checked\n                   * here'cause the getOpenFiles filters I'm not able\n                   * to construct the filter. */\n                  // TODO: make the filter allows only Notebooks\n                  if (file.type === 'notebook') {\n                    /** Get the Notebook as a JSON */\n                    const json = await getNotebook(file);\n\n                    /** Set the URL to fetch the Notebook */\n                    const fetchUrl =\n                      'https://' +\n                      url +\n                      platformApiRest +\n                      '/' +\n                      file.name.replace('.ipynb', '') +\n                      '?overwrite=' +\n                      overwrite +\n                      '&importAuthorizations' +\n                      importAuthorizations;\n\n                    // WORKING ON IT\n                    const postNotebook = await exportNotebook(\n                      fetchUrl,\n                      json,\n                      token\n                    );\n\n                    if (!postNotebook.ok) {\n                      Notification.error(\n                        'Something went wrong while exporting the Notebook.'\n                      );\n                      console.error(\n                        'Something went wrong sending the Notebook to Onesait Platform.\\nVerify that the URL and token are valid, or the Notebook name does not previously exist and the overwrite option is disabled.'\n                      );\n                    } else {\n                      const postResponse = await postNotebook.json();\n                      const msg =\n                        'The Notebook has been exported successfully. ID: ' +\n                        postResponse.id;\n\n                      //console.log('REPORT:', postResponse);\n\n                      Notification.success(msg);\n                    }\n                  } else {\n                    const error =\n                      'The file \"' + file.name + '\" is not a Notebook.';\n                    Notification.error(error);\n                  }\n                });\n              }\n            }\n          }\n        });\n\n        const category = 'Onesait Platform Extension';\n        palette.addItem({\n          command,\n          category,\n          args: { origin: 'from palette' }\n        });\n\n        app.commands.addCommand('onesait-platform:export-single-notebook', {\n          label: 'Export to Onesait Platform',\n          caption:\n            'Export this Jupyter Notebook to Onesait Platform Notebooks.',\n          icon: extensionIcon,\n          execute: () => {\n            /** Check if the user has entered the Platform URL and token */\n            if (url === '' || token === '') {\n              const warn =\n                'Please configure Onesait Platform URL and token data before begin to work.';\n              console.warn(warn);\n              Notification.warning(warn);\n            } else {\n              const file = factory.tracker.currentWidget?.selectedItems().next()\n                .value;\n\n              if (file) {\n                showDialog({\n                  title: 'Export Notebook to Onesait Platform',\n                  body: 'The following Notebook will be exported: ' + file.path,\n                  buttons: [Dialog.okButton(), Dialog.cancelButton()]\n                })\n                  .then(async res => {\n                    if (res.button.label !== 'Ok') {\n                      return;\n                    }\n                    if (file.type === 'notebook') {\n                      const platformApiRest =\n                        '/controlpanel/api/notebooks/import/jupyter';\n\n                      /** Get the Notebook as a JSON */\n                      const json = await getNotebook(file);\n\n                      /** Set the URL to fetch the Notebook */\n                      const postUrl =\n                        'https://' +\n                        url +\n                        platformApiRest +\n                        '/' +\n                        file.name.replace('.ipynb', '') +\n                        '?overwrite=' +\n                        overwrite +\n                        '&importAuthorizations=' +\n                        importAuthorizations;\n\n                      // WORKING ON IT\n                      const postNotebook = await exportNotebook(\n                        postUrl,\n                        json,\n                        token\n                      );\n\n                      if (!postNotebook.ok) {\n                        Notification.error(\n                          'Something went wrong while exporting the Notebook.'\n                        );\n                        console.error(\n                          'Something went wrong sending the Notebook to Onesait Platform.\\nVerify that the URL and token are valid, or the Notebook name does not previously exist and the overwrite option is disabled.'\n                        );\n                      } else {\n                        const postResponse = await postNotebook.json();\n                        const msg =\n                          'The Notebook has been exported successfully. ID: ' +\n                          postResponse.id;\n\n                        //console.log('REPORT:', postResponse);\n\n                        Notification.success(msg);\n                      }\n                    } else {\n                      const error =\n                        'The file \"' + file.name + '\" is not a Notebook.';\n                      Notification.error(error);\n                    }\n                  })\n                  .catch(e => {\n                    console.error(e);\n                    const error =\n                      'Something went wrong while exporting the Notebook.';\n                    Notification.error(error);\n                  });\n              }\n            }\n          }\n        });\n      })\n      .catch(reason => {\n        const error = 'Something went wrong when reading the settings.';\n        console.error(error + `\\n${reason}`);\n        Notification.error(error);\n      });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}