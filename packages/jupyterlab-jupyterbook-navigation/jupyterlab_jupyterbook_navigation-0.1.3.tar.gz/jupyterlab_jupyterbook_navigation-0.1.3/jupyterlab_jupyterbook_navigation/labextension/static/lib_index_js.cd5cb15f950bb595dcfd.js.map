{"version":3,"file":"lib_index_js.cd5cb15f950bb595dcfd.js","mappings":"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","sources":["webpack://jupyterlab-jupyterbook-navigation/./src/handler.ts","webpack://jupyterlab-jupyterbook-navigation/./src/index.ts"],"sourcesContent":["import { URLExt } from \"@jupyterlab/coreutils\";\nimport { ServerConnection } from \"@jupyterlab/services\";\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param browser_dir Current broswer directory as a string\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = \"\",\n  browser_dir = \"\",\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  let requestUrl = URLExt.join(\n    settings.baseUrl,\n    \"jupyterlab-jupyterbook-navigation\", // API Namespace\n    endPoint\n  );\n\n  // Include browser_dir in the request\n  if (browser_dir) {\n    requestUrl += `?browser_dir=${encodeURIComponent(browser_dir)}`;\n  }\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log(\"Not a JSON response body.\", response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILabShell\n} from \"@jupyterlab/application\";\nimport { requestAPI } from \"./handler\";\nimport { Widget } from \"@lumino/widgets\";\n\nimport { FileBrowser } from \"@jupyterlab/filebrowser\";\n\nimport { IDocumentManager } from \"@jupyterlab/docmanager\";\nimport { IFileBrowserFactory } from \"@jupyterlab/filebrowser\";\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: \"jupyterlab-jupyterbook-navigation:plugin\",\n  description:\n    \"A JupyterLab extension that mimics jupyter-book chapter navigation on an un-built, cloned jupyter book in JupyterLab.\",\n  autoStart: true,\n  requires: [ILabShell, IFileBrowserFactory, IDocumentManager],\n  activate: async (\n    app: JupyterFrontEnd,\n    shell: ILabShell,\n    fileBrowserFactory: IFileBrowserFactory,\n    docManager: IDocumentManager\n  ) => {\n    console.log(\n      \"JupyterLab extension jupyterlab-jupyterbook-navigation is activated!\"\n    );\n\n    // Create the widget only once\n    const widget = new Widget();\n    widget.id = \"@jupyterlab-sidepanel/jupyterbook-toc\";\n    // widget.title.iconClass = 'jp-NotebookIcon jp-SideBar-tabIcon';\n    widget.title.iconClass = \"jbook-icon jp-SideBar-tabIcon\";\n    widget.title.className = \"jbook-tab\";\n    widget.title.caption = \"Jupyter-Book Table of Contents\";\n\n    const summary = document.createElement(\"p\");\n    widget.node.appendChild(summary);\n\n    // Attach the `activate` event handler to the widget\n    widget.activate = async () => {\n      console.debug(\"Widget shown\");\n\n      // Get the primary file browser used in JupyterLab\n      const fileBrowser = fileBrowserFactory.tracker.currentWidget;\n\n      // Check if the file browser is available and log if it's not\n      if (!fileBrowser) {\n        console.debug(\"File browser widget is null.\");\n      } else {\n        console.debug(\"Active file browser widget found.\");\n      }\n\n      // Make the API request and update the widget's content\n      try {\n        const data = await requestAPI<any>(\"get-toc\", fileBrowser?.model.path);\n        console.log(data);\n        summary.innerHTML = data[\"data\"];\n        // Add the button event listener after the widget's content is updated\n        addClickListenerToButtons(fileBrowser, docManager);\n        addClickListenerToChevron();\n      } catch (reason) {\n        console.error(\n          `The jupyterlab_jupyterbook_navigation server extension appears to be missing.\\n${reason}`\n        );\n      }\n    };\n\n    // Add the widget to the sidebar\n    shell.add(widget, \"left\", { rank: 400 });\n\n    widget.activate();\n  }\n};\n\nexport default plugin;\n\nfunction addClickListenerToChevron() {\n  const buttons = document.querySelectorAll(\".toc-chevron\");\n  buttons.forEach(buttonElement => {\n    // Perform a type assertion here\n    const button = buttonElement as HTMLButtonElement;\n    button.addEventListener(\"click\", (event: Event) => {\n      console.log(`Button clicked`);\n      toggleList(button);\n    });\n  });\n}\n\nfunction toggleList(button: HTMLButtonElement): void {\n  const list = button.parentElement?.nextElementSibling as HTMLElement; // Type assertion for HTMLElement\n\n  if (list.style.display === \"none\") {\n    list.style.display = \"block\";\n    button.innerHTML = '<i class=\"fa fa-chevron-up toc-chevron\"></i>';\n  } else {\n    list.style.display = \"none\";\n    button.innerHTML = '<i class=\"fa fa-chevron-down toc-chevron\"></i>';\n  }\n}\n\nfunction addClickListenerToButtons(\n  fileBrowser: FileBrowser | null,\n  docManager: IDocumentManager\n) {\n  const buttons = document.querySelectorAll(\".toc-button\");\n  buttons.forEach(button => {\n    button.addEventListener(\"click\", (event: Event) => {\n      console.log(`Button clicked`);\n\n      // Check if the file browser is available\n      if (!fileBrowser) {\n        console.error(\"File browser is not available.\");\n        return;\n      }\n\n      // Check if the file browser's path is a valid string\n      if (typeof fileBrowser.model.path !== \"string\") {\n        console.error(\n          `Invalid path: The current path is either not set or not a string. Path: ${fileBrowser.model.path}`\n        );\n        return;\n      }\n      // If all checks pass, log the current directory\n      console.log(`Current directory: ${fileBrowser.model.path}`);\n      const browser_path = fileBrowser.model.path;\n\n      const filePath = button.getAttribute(\"data-file-path\");\n      if (typeof filePath === \"string\") {\n        if (filePath.includes(\".md\")) {\n          docManager.openOrReveal(\n            browser_path + \"/\" + filePath,\n            \"Markdown Preview\"\n          );\n        } else {\n          docManager.openOrReveal(browser_path + \"/\" + filePath);\n        }\n      }\n    });\n  });\n}\n"],"names":[],"sourceRoot":""}