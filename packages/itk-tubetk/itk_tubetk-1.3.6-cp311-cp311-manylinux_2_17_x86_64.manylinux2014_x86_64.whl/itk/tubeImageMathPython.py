# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeImageMathPython
else:
    import _tubeImageMathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tubeImageMathPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tubeImageMathPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVariableSizeMatrixPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkContinuousIndexPython

def tubeImageMathD2_New():
    return tubeImageMathD2.New()

class tubeImageMathD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathD2___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD2_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathD2
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathD2_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathD2

        Create a new object of the class tubeImageMathD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathD2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathD2_swigregister(tubeImageMathD2)
tubeImageMathD2___New_orig__ = _tubeImageMathPython.tubeImageMathD2___New_orig__
tubeImageMathD2_cast = _tubeImageMathPython.tubeImageMathD2_cast


def tubeImageMathD3_New():
    return tubeImageMathD3.New()

class tubeImageMathD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathD3___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathD3_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathD3
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathD3_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathD3

        Create a new object of the class tubeImageMathD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathD3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathD3_swigregister(tubeImageMathD3)
tubeImageMathD3___New_orig__ = _tubeImageMathPython.tubeImageMathD3___New_orig__
tubeImageMathD3_cast = _tubeImageMathPython.tubeImageMathD3_cast


def tubeImageMathF2_New():
    return tubeImageMathF2.New()

class tubeImageMathF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathF2___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF2_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathF2
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathF2_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathF2

        Create a new object of the class tubeImageMathF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathF2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathF2_swigregister(tubeImageMathF2)
tubeImageMathF2___New_orig__ = _tubeImageMathPython.tubeImageMathF2___New_orig__
tubeImageMathF2_cast = _tubeImageMathPython.tubeImageMathF2_cast


def tubeImageMathF3_New():
    return tubeImageMathF3.New()

class tubeImageMathF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathF3___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathF3_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathF3
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathF3_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathF3

        Create a new object of the class tubeImageMathF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathF3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathF3_swigregister(tubeImageMathF3)
tubeImageMathF3___New_orig__ = _tubeImageMathPython.tubeImageMathF3___New_orig__
tubeImageMathF3_cast = _tubeImageMathPython.tubeImageMathF3_cast


def tubeImageMathSS2_New():
    return tubeImageMathSS2.New()

class tubeImageMathSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathSS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS2_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSS2
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathSS2_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSS2

        Create a new object of the class tubeImageMathSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathSS2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathSS2_swigregister(tubeImageMathSS2)
tubeImageMathSS2___New_orig__ = _tubeImageMathPython.tubeImageMathSS2___New_orig__
tubeImageMathSS2_cast = _tubeImageMathPython.tubeImageMathSS2_cast


def tubeImageMathSS3_New():
    return tubeImageMathSS3.New()

class tubeImageMathSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathSS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathSS3_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSS3
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathSS3_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSS3

        Create a new object of the class tubeImageMathSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathSS3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathSS3_swigregister(tubeImageMathSS3)
tubeImageMathSS3___New_orig__ = _tubeImageMathPython.tubeImageMathSS3___New_orig__
tubeImageMathSS3_cast = _tubeImageMathPython.tubeImageMathSS3_cast


def tubeImageMathUC2_New():
    return tubeImageMathUC2.New()

class tubeImageMathUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUC2___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC2_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUC2
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUC2_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUC2

        Create a new object of the class tubeImageMathUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUC2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUC2_swigregister(tubeImageMathUC2)
tubeImageMathUC2___New_orig__ = _tubeImageMathPython.tubeImageMathUC2___New_orig__
tubeImageMathUC2_cast = _tubeImageMathPython.tubeImageMathUC2_cast


def tubeImageMathUC3_New():
    return tubeImageMathUC3.New()

class tubeImageMathUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUC3___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUC3_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUC3
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUC3_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUC3

        Create a new object of the class tubeImageMathUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUC3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUC3_swigregister(tubeImageMathUC3)
tubeImageMathUC3___New_orig__ = _tubeImageMathPython.tubeImageMathUC3___New_orig__
tubeImageMathUC3_cast = _tubeImageMathPython.tubeImageMathUC3_cast


def tubeImageMathUS2_New():
    return tubeImageMathUS2.New()

class tubeImageMathUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUS2___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS2_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUS2
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUS2_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUS2

        Create a new object of the class tubeImageMathUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUS2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUS2_swigregister(tubeImageMathUS2)
tubeImageMathUS2___New_orig__ = _tubeImageMathPython.tubeImageMathUS2___New_orig__
tubeImageMathUS2_cast = _tubeImageMathPython.tubeImageMathUS2_cast


def tubeImageMathUS3_New():
    return tubeImageMathUS3.New()

class tubeImageMathUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUS3___New_orig__)
    Clone = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Clone)
    SetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_SetInput)
    GetInput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetInput)
    GetOutput = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetOutput)
    GetOutputFloat = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetOutputFloat)
    GetOutputUChar = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetOutputUChar)
    GetOutputShort = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetOutputShort)
    IntensityWindow = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_IntensityWindow)
    IntensityMultiplicativeBiasCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_IntensityMultiplicativeBiasCorrection)
    Resample = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Resample)
    AddUniformNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_AddUniformNoise)
    AddGaussianNoise = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_AddGaussianNoise)
    AddImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_AddImages)
    MultiplyImages = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_MultiplyImages)
    PadUsingMirroring = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_PadUsingMirroring)
    NormalizeMeanStdDev = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_NormalizeMeanStdDev)
    NormalizeFWHM = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_NormalizeFWHM)
    NormalizeMeanShift = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_NormalizeMeanShift)
    FuseUsingMax = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_FuseUsingMax)
    MedianFilter = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_MedianFilter)
    Threshold = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Threshold)
    MeanWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_MeanWithinMaskRange)
    StdDevWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_StdDevWithinMaskRange)
    AbsoluteValue = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_AbsoluteValue)
    ReplaceValuesOutsideMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_ReplaceValuesOutsideMaskRange)
    Erode = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Erode)
    Dilate = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Dilate)
    ReplaceValueWithinMaskRange = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_ReplaceValueWithinMaskRange)
    Blur = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Blur)
    BlurOrder = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_BlurOrder)
    HistogramBinMin = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_HistogramBinMin)
    HistogramBinSize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_HistogramBinSize)
    Histogram = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Histogram)
    IntensityCorrectionBySlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_IntensityCorrectionBySlice)
    IntensityCorrection = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_IntensityCorrection)
    Resize = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_Resize)
    ExtractSlice = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_ExtractSlice)
    EnhanceVessels = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_EnhanceVessels)
    ConnectedComponents = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_ConnectedComponents)
    VoronoiTessellation = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_VoronoiTessellation)
    GetVoronoiTessellationAdjacencyMatrix = _swig_new_instance_method(_tubeImageMathPython.tubeImageMathUS3_GetVoronoiTessellationAdjacencyMatrix)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUS3
    cast = _swig_new_static_method(_tubeImageMathPython.tubeImageMathUS3_cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUS3

        Create a new object of the class tubeImageMathUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUS3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUS3_swigregister(tubeImageMathUS3)
tubeImageMathUS3___New_orig__ = _tubeImageMathPython.tubeImageMathUS3___New_orig__
tubeImageMathUS3_cast = _tubeImageMathPython.tubeImageMathUS3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_math(*args, **kwargs):
    """Functional interface for ImageMath"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageMath.New(*args, **kwargs)

    return instance.__internal_call__()

def image_math_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ImageMath
    image_math.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_math.__doc__ = filter_object.__doc__




