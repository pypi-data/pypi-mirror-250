import os

import upstride_argparse as argparse
import yaml

import ogre_cli


#========================================================================================
# The following functions are copied from upstride_betterargparse. They are used here
# to force ogre to use ogre.yml even if it is not passed as an argument. In the future,
# we want to modify upstride_betterargparse (maybe create a package ogre_betterargparse)
# to be able to do it automatically.
def merge_dict(parameters, arguments):
  for key in arguments:
      parameters[key] = arguments[key]
      if type(parameters[key]) == dict:
          merge_dict(parameters[key], arguments[key])
    #else:
    #  raise Exception("this line shouldn't be excecuted, please check the code")

def read_yaml_config(yaml_file, parameters):
  with open(yaml_file, 'r') as file:
    content = yaml.safe_load(file)
    merge_dict(parameters, content)
  return parameters
#========================================================================================

arguments = [
    [bool, "version", False, "Show Ogre version."],
    [str, "path", os.getcwd(), "Path to local git repository."],
    [
        bool,
        "web",
        False,
        "If web=True, redirects docker prompt to web browser using ttyd.",
    ],
    [bool, "jupyter", True, "If jupyter=True, runs jupyterlab"],
    [str, "jupyter_password", "", "Password to protect access to Jupyter Lab"],
    [str, "jupyter_port", "8888", "Port where Jupyter Lab is run"],
    [str, "platform", None, "Platform (architecture) for which to build docker image. Options are 'linux/arm64' and 'linux/amd64'. If None, it uses the host-system architecture."],
    [bool, "mount", True, "If mount=True, project folder is mounted inside container, overwriting the one that was copied during image build"],
    [bool, "ping", False, "Test connection to ogre service API"],
    [str, "api_url", "https://dev-cloud.ogre.run", "URL for Ogre Cloud API in the format http://IP:PORT or https://IP:PORT"],
    [str, "api_token", "$OGRE_API_TOKEN", "User token for ogre service API"],
    [str, "openai_token", "", "OpenAI token to autogenerate project dependencies (required for requirements_format=auto)"],
    [bool, "package", False, "If package=True, creates a tarball of the project folder to be uploaded to Ogre cloud."],
    [bool, "publish", False, "If publish=True, publishes project to Ogre cloud (a token is required.)"],
    [bool, "service_up", False, "Starts service for previously-published project to Ogre cloud (a token is required.)"],
    [bool, "service_down", False, "Stops service for previously-published project to Ogre cloud (a token is required.)"],
    [bool, "service_delete", False, "Deletes Ogre assets (docker images, containers, and files) present in the Ogre cloud (a token is required.)"],
    [bool, "service_ls", False, "List services (containers) running in the Ogre cloud (a token is required.)"],
    [
        bool,
        "attach",
        False,
        "If attach=True, attaches to container.",
    ],
    [
        bool,
        "stop",
        False,
        "Stop Ogre for current project. It stops the ttyd process as well as all containers.",
    ],
    [
        bool,
        "delete",
        False,
        "Delete Ogre assets for current project. It stops the ttyd process as well as all containers, and deletes the docker image.",
    ],
    [
        bool,
        "config",
        False,
        "Generate ogre.yml config file from template. If one already exists, nothing is done.",
    ],
    [
        bool,
        "dry",
        False,
        "Dry build. No requirements are installed.",
    ],
    [
        bool,
        "info",
        False,
        "Display information about ogre containers running in the local system.",
    ],
    [
        bool,
        "gui",
        False,
        "Display Ogre GUI.",
    ],
    [
        bool,
        "save",
        False,
        "Save Ogre environment as a Docker image.",
    ],
    ["list[str]", "yaml_config", [], "Path to Ogre config file 'ogre.yml'."],
    [
        "namespace",
        "docker",
        [
            [str, "company", "ogre-run", ""],
            [str, "version", "0.1.0", ""],
            [str, "baseimage", "ogrerun/base:ubuntu22.04-arm64", ""],
            [str, "device", "cpu", "Computational device (gpu or cpu)"],
            [
                str,
                "container_repo",
                "ogre",
                "URL root for the container repository. This is used to name the Ogre-built image.",
            ],
            [str, "project_volume_path", "/opt", ""],
            [
                str,
                "cmd",
                "bash",
                "Command to be executed when running container built from Dockerfile generated by Ogre. This is overriden if repository already has a custom Dockerfile.",
            ],
            [str, "ttyd", "ttyd", "The command to call 'ttyd' (do not change it!)."],
            [str, "ttyd_version", "1.6.3", ""],
            [str, "ttyd_url", "https://github.com/tsl0922/ttyd/releases/download/", ""],
            [
                str,
                "ttyd_port",
                "6007",
                "Port used by ttyd to share terminal on local network.",
            ],
            [str, "ogre_dir", "ogre_dir", ""],
            [
                str,
                "requirements_format",
                "auto",
                "The source from which Ogre should generate the requirements.txt file. Options are ['auto', 'freeze', 'none']",
            ],
            [
                str,
                "expose_ports",
                "8888",
                "List of Docker ports to be exposed to the host.",
            ],
            [
                bool,
                "no_cache",
                True,
                "If no_cache=True, runs initialization routine, \
                generating all files (requirements.txt, Dockerfile, bash) from scratch.",
            ],
        ],
    ],
]
