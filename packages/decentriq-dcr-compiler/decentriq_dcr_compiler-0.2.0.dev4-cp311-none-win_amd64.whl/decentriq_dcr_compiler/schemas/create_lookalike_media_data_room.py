# generated by datamodel-codegen:
#   filename:  create_lookalike_media_data_room.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class EnclaveSpecificationV0(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class LookalikeMediaDataRoomV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableDownloadByAdvertiser: bool
    enableDownloadByAgency: bool
    enableDownloadByPublisher: bool
    enableOverlapInsights: bool
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0


class LookalikeMediaDataRoomV1(LookalikeMediaDataRoomV0):
    pass


class LookalikeMediaDataRoomV2(LookalikeMediaDataRoomV0):
    pass


class CreateLookalikeMediaDataRoomItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: LookalikeMediaDataRoomV0


class CreateLookalikeMediaDataRoomItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: LookalikeMediaDataRoomV1


class CreateLookalikeMediaDataRoomItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    v2: LookalikeMediaDataRoomV2


class CreateLookalikeMediaDcrComputeV0(BaseModel):
    advertiserEmails: Sequence[str]
    agencyEmails: Sequence[str]
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecificationV0
    enableAuditLogRetrieval: bool
    enableDevComputations: bool
    enableRateLimitingOnPublishDataset: Optional[Optional[bool]] = None
    hashMatchingIdWith: Optional[Optional[HashingAlgorithm]] = None
    id: str
    mainAdvertiserEmail: str
    mainPublisherEmail: str
    matchingIdFormat: FormatType
    name: str
    observerEmails: Sequence[str]
    publisherEmails: Sequence[str]
    pythonEnclaveSpecification: EnclaveSpecificationV0
    rateLimitPublishDataNumPerWindow: Optional[Optional[conint(ge=0)]] = None
    rateLimitPublishDataWindowSeconds: Optional[Optional[conint(ge=0)]] = None


class CreateLookalikeMediaDcrComputeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: CreateLookalikeMediaDcrComputeV0


class CreateLookalikeMediaDcrCompute(BaseModel):
    __root__: CreateLookalikeMediaDcrComputeItem


class CreateLookalikeMediaDataRoomItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    v3: CreateLookalikeMediaDcrCompute


class CreateLookalikeMediaDataRoom(BaseModel):
    __root__: Union[
        CreateLookalikeMediaDataRoomItem,
        CreateLookalikeMediaDataRoomItem1,
        CreateLookalikeMediaDataRoomItem2,
        CreateLookalikeMediaDataRoomItem3,
    ] = Field(
        ...,
        description='Arguments for creating a specific version of an LMDCR.',
        title='CreateLookalikeMediaDataRoom',
    )
