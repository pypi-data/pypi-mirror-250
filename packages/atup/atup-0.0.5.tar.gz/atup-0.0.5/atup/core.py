# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['P', 'VArgs', 'tup2args', 'dct2args', 'rng2args', 'val2tup', 'jointups', 'argtup', 'nones', 'fill', 'fillnone',
           'dropnone', 'pack']

# %% ../nbs/00_core.ipynb 6
from itertools import zip_longest

# %% ../nbs/00_core.ipynb 8
from typing import Any, Union, TypeAlias, ParamSpec

# %% ../nbs/00_core.ipynb 10
#| export


# %% ../nbs/00_core.ipynb 12
from chck import notnone, istuple, isrange, isdictiter

# %% ../nbs/00_core.ipynb 14
#| export


# %% ../nbs/00_core.ipynb 16
P = ParamSpec('P')
VArgs: TypeAlias = Union[Any, tuple]

# %% ../nbs/00_core.ipynb 17
def tup2args(*args: VArgs) -> tuple:
    '''Deconstruct `*args` until the first argument is not a one-element tuple
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> tup2args(1), tup2args((1, )), tup2args(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> tup2args(1, 2), tup2args('a', (1, )), tup2args('a', 1, ), tup2args(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> tup2args([]), tup2args(*[])
    (([],), ())
    '''
    return tup2args(*args[0]) if len(args) == 1 and istuple(args[0]) else args

def dct2args(*args: VArgs) -> tuple:
    args = tup2args(*args)
    return dct2args(*args[0]) if len(args) == 1 and isdictiter(args[0]) else args

def rng2args(*args: VArgs) -> tuple:
    args = tup2args(*args)
    return rng2args(*args[0]) if len(args) == 1 and isrange(args[0]) else args

def val2tup(val) -> tuple:
    '''Wrap `val` in a tuple if it is not already a tuple'''
    return val if istuple(val := dct2args(val)) else (val, )

def jointups(*tups: tuple) -> tuple:
    return tuple(next((x for x in item if notnone(x)), None) for item in zip_longest(*tups))

# %% ../nbs/00_core.ipynb 19
def argtup(*args: VArgs) -> tuple:
    '''Wrangle `*args` into a tuple of arguments
    
    Examples
    --------
    >>> Recursive deconstruction
    >>> argtup(1), argtup((1, )), argtup(((1, ), ))
    ((1,), (1,), (1,))

    >>> # Deconstruct only the first argument, tuples ok at other positions
    >>> argtup(1, 2), argtup('a', (1, )), argtup('a', 1, ), argtup(*['a'])
    ((1, 2), ('a', (1,)), ('a', 1), ('a',))

    >>> # handle unpacking
    >>> argtup([]), argtup(*[])
    (([],), ())

    See Also
    --------
    `xargs` : Alias for `argtup`    
    '''
    return val2tup(tup2args(dct2args(rng2args(args))))

# %% ../nbs/00_core.ipynb 21
def nones(n: int) -> tuple: 
    '''Return a tuple of `n` `None` values'''
    return tuple((None, ) * n)

def fill(tup: tuple, n: int, pad = None) -> tuple:
    '''Return `tup` with `pad` values appended until length is `n`'''
    return tup + ((pad, ) * (n - len(tup)))

def fillnone(tup: tuple, n: int) -> tuple:
    '''Return `tup` with `None` values appended until length is `n`'''
    tup = tup if istuple(tup) else tuple(tup)
    return tup + nones(n - len(tup))

def dropnone(*args: VArgs) -> tuple: 
    '''Return `args` with `None` values removed'''
    return tuple(filter(notnone, argtup(args)))

# %% ../nbs/00_core.ipynb 23
def pack(*args: tuple, n: int = 1) -> tuple:
    '''Pack `args` into a tuple of length `n`'''
    return fillnone(argtup(args), n) 
