# Generated file. To retain edits, remove this comment.

from itkwasm.pyodide import JsPackageConfig, JsPackage

from ._version import __version__
default_js_module = """data:text/javascript;base64,var Gt=Object.defineProperty;var Lt=(A,e)=>{for(var t in e)Gt(A,t,{get:e[t],enumerable:!0})};var xt={Int8:"int8",UInt8:"uint8",Int16:"int16",UInt16:"uint16",Int32:"int32",UInt32:"uint32",Int64:"int64",UInt64:"uint64",SizeValueType:"uint64",IdentifierType:"uint64",IndexValueType:"int64",OffsetValueType:"int64"},S=xt;var Tt={Float32:"float32",Float64:"float64",SpacePrecisionType:"float64"},J=Tt;function Jt(A,e){let t=null;switch(A){case S.UInt8:{t=new Uint8Array(e);break}case S.Int8:{t=new Int8Array(e);break}case S.UInt16:{t=new Uint16Array(e);break}case S.Int16:{t=new Int16Array(e);break}case S.UInt32:{t=new Uint32Array(e);break}case S.Int32:{t=new Int32Array(e);break}case S.UInt64:{typeof globalThis.BigUint64Array=="function"?t=new BigUint64Array(e):t=new Uint8Array(e);break}case S.Int64:{typeof globalThis.BigInt64Array=="function"?t=new BigInt64Array(e):t=new Uint8Array(e);break}case J.Float32:{t=new Float32Array(e);break}case J.Float64:{t=new Float64Array(e);break}case"null":{t=null;break}case null:{t=null;break}default:throw new Error("Type is not supported as a TypedArray")}return t}var P=Jt;function Ht(A){let e=A.slice((A.lastIndexOf(".")-1>>>0)+2);if(e.toLowerCase()==="gz"){let t=A.slice(0,-3).lastIndexOf(".");e=A.slice((t-1>>>0)+2)}else if(e.toLowerCase()==="cbor"){let t=A.slice(0,-5).lastIndexOf(".");e=A.slice((t-1>>>0)+2)}else if(e.toLowerCase()==="zst"){let t=A.slice(0,-10).lastIndexOf(".");e=A.slice((t-1>>>0)+2)}else if(e.toLowerCase()==="zip"){let t=A.slice(0,-4).lastIndexOf(".");e=A.slice((t-1>>>0)+2)}return e}var AA=Ht;var Yt={TextFile:"TextFile",BinaryFile:"BinaryFile",TextStream:"TextStream",BinaryStream:"BinaryStream",Image:"Image",Mesh:"Mesh",PolyData:"PolyData",JsonCompatible:"JsonCompatible"},C=Yt;var Re=Symbol("Comlink.proxy"),qt=Symbol("Comlink.endpoint"),MA=Symbol("Comlink.releaseProxy"),UA=Symbol("Comlink.finalizer"),uA=Symbol("Comlink.thrown"),Se=A=>typeof A=="object"&&A!==null||typeof A=="function",Kt={canHandle:A=>Se(A)&&A[Re],serialize(A){let{port1:e,port2:t}=new MessageChannel;return Ue(A,e),[t,[t]]},deserialize(A){return A.start(),OA(A)}},jt={canHandle:A=>Se(A)&&uA in A,serialize({value:A}){let e;return A instanceof Error?e={isError:!0,value:{message:A.message,name:A.name,stack:A.stack}}:e={isError:!1,value:A},[e,[]]},deserialize(A){throw A.isError?Object.assign(new Error(A.value.message),A.value):A.value}},Fe=new Map([["proxy",Kt],["throw",jt]]);function vt(A,e){for(let t of A)if(e===t||t==="*"||t instanceof RegExp&&t.test(e))return!0;return!1}function Ue(A,e=globalThis,t=["*"]){e.addEventListener("message",function r(o){if(!o||!o.data)return;if(!vt(t,o.origin)){console.warn(`Invalid origin '${o.origin}' for comlink proxy`);return}let{id:i,type:n,path:g}=Object.assign({path:[]},o.data),f=(o.data.argumentList||[]).map(T),u;try{let s=g.slice(0,-1).reduce((c,I)=>c[I],A),a=g.reduce((c,I)=>c[I],A);switch(n){case"GET":u=a;break;case"SET":s[g.slice(-1)[0]]=T(o.data.value),u=!0;break;case"APPLY":u=a.apply(s,f);break;case"CONSTRUCT":{let c=new a(...f);u=Xt(c)}break;case"ENDPOINT":{let{port1:c,port2:I}=new MessageChannel;Ue(A,I),u=WA(c,[c])}break;case"RELEASE":u=void 0;break;default:return}}catch(s){u={value:s,[uA]:0}}Promise.resolve(u).catch(s=>({value:s,[uA]:0})).then(s=>{let[a,c]=fA(s);e.postMessage(Object.assign(Object.assign({},a),{id:i}),c),n==="RELEASE"&&(e.removeEventListener("message",r),Ne(e),UA in A&&typeof A[UA]=="function"&&A[UA]())}).catch(s=>{let[a,c]=fA({value:new TypeError("Unserializable return value"),[uA]:0});e.postMessage(Object.assign(Object.assign({},a),{id:i}),c)})}),e.start&&e.start()}function _t(A){return A.constructor.name==="MessagePort"}function Ne(A){_t(A)&&A.close()}function OA(A,e){return NA(A,[],e)}function lA(A){if(A)throw new Error("Proxy has been released and is not useable")}function Me(A){return H(A,{type:"RELEASE"}).then(()=>{Ne(A)})}var BA=new WeakMap,CA="FinalizationRegistry"in globalThis&&new FinalizationRegistry(A=>{let e=(BA.get(A)||0)-1;BA.set(A,e),e===0&&Me(A)});function zt(A,e){let t=(BA.get(e)||0)+1;BA.set(e,t),CA&&CA.register(A,e,A)}function Vt(A){CA&&CA.unregister(A)}function NA(A,e=[],t=function(){}){let r=!1,o=new Proxy(t,{get(i,n){if(lA(r),n===MA)return()=>{Vt(o),Me(A),r=!0};if(n==="then"){if(e.length===0)return{then:()=>o};let g=H(A,{type:"GET",path:e.map(f=>f.toString())}).then(T);return g.then.bind(g)}return NA(A,[...e,n])},set(i,n,g){lA(r);let[f,u]=fA(g);return H(A,{type:"SET",path:[...e,n].map(s=>s.toString()),value:f},u).then(T)},apply(i,n,g){lA(r);let f=e[e.length-1];if(f===qt)return H(A,{type:"ENDPOINT"}).then(T);if(f==="bind")return NA(A,e.slice(0,-1));let[u,s]=ke(g);return H(A,{type:"APPLY",path:e.map(a=>a.toString()),argumentList:u},s).then(T)},construct(i,n){lA(r);let[g,f]=ke(n);return H(A,{type:"CONSTRUCT",path:e.map(u=>u.toString()),argumentList:g},f).then(T)}});return zt(o,A),o}function Zt(A){return Array.prototype.concat.apply([],A)}function ke(A){let e=A.map(fA);return[e.map(t=>t[0]),Zt(e.map(t=>t[1]))]}var Oe=new WeakMap;function WA(A,e){return Oe.set(A,e),A}function Xt(A){return Object.assign(A,{[Re]:!0})}function fA(A){for(let[e,t]of Fe)if(t.canHandle(A)){let[r,o]=t.serialize(A);return[{type:"HANDLER",name:e,value:r},o]}return[{type:"RAW",value:A},Oe.get(A)||[]]}function T(A){switch(A.type){case"HANDLER":return Fe.get(A.name).deserialize(A.value);case"RAW":return A.value}}function H(A,e,t){return new Promise(r=>{let o=$t();A.addEventListener("message",function i(n){!n.data||!n.data.id||n.data.id!==o||(A.removeEventListener("message",i),r(n.data))}),A.start&&A.start(),A.postMessage(Object.assign({id:o},e),t)})}function $t(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}function eA(A,e){return function(){return A.apply(e,arguments)}}var{toString:Ar}=Object.prototype,{getPrototypeOf:LA}=Object,pA=(A=>e=>{let t=Ar.call(e);return A[t]||(A[t]=t.slice(8,-1).toLowerCase())})(Object.create(null)),O=A=>(A=A.toLowerCase(),e=>pA(e)===A),EA=A=>e=>typeof e===A,{isArray:Y}=Array,tA=EA("undefined");function er(A){return A!==null&&!tA(A)&&A.constructor!==null&&!tA(A.constructor)&&U(A.constructor.isBuffer)&&A.constructor.isBuffer(A)}var Le=O("ArrayBuffer");function tr(A){let e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(A):e=A&&A.buffer&&Le(A.buffer),e}var rr=EA("string"),U=EA("function"),xe=EA("number"),QA=A=>A!==null&&typeof A=="object",ir=A=>A===!0||A===!1,cA=A=>{if(pA(A)!=="object")return!1;let e=LA(A);return(e===null||e===Object.prototype||Object.getPrototypeOf(e)===null)&&!(Symbol.toStringTag in A)&&!(Symbol.iterator in A)},or=O("Date"),nr=O("File"),sr=O("Blob"),ar=O("FileList"),Ir=A=>QA(A)&&U(A.pipe),gr=A=>{let e;return A&&(typeof FormData=="function"&&A instanceof FormData||U(A.append)&&((e=pA(A))==="formdata"||e==="object"&&U(A.toString)&&A.toString()==="[object FormData]"))},lr=O("URLSearchParams"),ur=A=>A.trim?A.trim():A.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function rA(A,e,{allOwnKeys:t=!1}={}){if(A===null||typeof A>"u")return;let r,o;if(typeof A!="object"&&(A=[A]),Y(A))for(r=0,o=A.length;r<o;r++)e.call(null,A[r],r,A);else{let i=t?Object.getOwnPropertyNames(A):Object.keys(A),n=i.length,g;for(r=0;r<n;r++)g=i[r],e.call(null,A[g],g,A)}}function Te(A,e){e=e.toLowerCase();let t=Object.keys(A),r=t.length,o;for(;r-- >0;)if(o=t[r],e===o.toLowerCase())return o;return null}var Je=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,He=A=>!tA(A)&&A!==Je;function GA(){let{caseless:A}=He(this)&&this||{},e={},t=(r,o)=>{let i=A&&Te(e,o)||o;cA(e[i])&&cA(r)?e[i]=GA(e[i],r):cA(r)?e[i]=GA({},r):Y(r)?e[i]=r.slice():e[i]=r};for(let r=0,o=arguments.length;r<o;r++)arguments[r]&&rA(arguments[r],t);return e}var Br=(A,e,t,{allOwnKeys:r}={})=>(rA(e,(o,i)=>{t&&U(o)?A[i]=eA(o,t):A[i]=o},{allOwnKeys:r}),A),Cr=A=>(A.charCodeAt(0)===65279&&(A=A.slice(1)),A),fr=(A,e,t,r)=>{A.prototype=Object.create(e.prototype,r),A.prototype.constructor=A,Object.defineProperty(A,"super",{value:e.prototype}),t&&Object.assign(A.prototype,t)},cr=(A,e,t,r)=>{let o,i,n,g={};if(e=e||{},A==null)return e;do{for(o=Object.getOwnPropertyNames(A),i=o.length;i-- >0;)n=o[i],(!r||r(n,A,e))&&!g[n]&&(e[n]=A[n],g[n]=!0);A=t!==!1&&LA(A)}while(A&&(!t||t(A,e))&&A!==Object.prototype);return e},pr=(A,e,t)=>{A=String(A),(t===void 0||t>A.length)&&(t=A.length),t-=e.length;let r=A.indexOf(e,t);return r!==-1&&r===t},Er=A=>{if(!A)return null;if(Y(A))return A;let e=A.length;if(!xe(e))return null;let t=new Array(e);for(;e-- >0;)t[e]=A[e];return t},Qr=(A=>e=>A&&e instanceof A)(typeof Uint8Array<"u"&&LA(Uint8Array)),dr=(A,e)=>{let r=(A&&A[Symbol.iterator]).call(A),o;for(;(o=r.next())&&!o.done;){let i=o.value;e.call(A,i[0],i[1])}},mr=(A,e)=>{let t,r=[];for(;(t=A.exec(e))!==null;)r.push(t);return r},hr=O("HTMLFormElement"),yr=A=>A.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(t,r,o){return r.toUpperCase()+o}),Pe=(({hasOwnProperty:A})=>(e,t)=>A.call(e,t))(Object.prototype),wr=O("RegExp"),Ye=(A,e)=>{let t=Object.getOwnPropertyDescriptors(A),r={};rA(t,(o,i)=>{let n;(n=e(o,i,A))!==!1&&(r[i]=n||o)}),Object.defineProperties(A,r)},Dr=A=>{Ye(A,(e,t)=>{if(U(A)&&["arguments","caller","callee"].indexOf(t)!==-1)return!1;let r=A[t];if(U(r)){if(e.enumerable=!1,"writable"in e){e.writable=!1;return}e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+t+"'")})}})},br=(A,e)=>{let t={},r=o=>{o.forEach(i=>{t[i]=!0})};return Y(A)?r(A):r(String(A).split(e)),t},kr=()=>{},Rr=(A,e)=>(A=+A,Number.isFinite(A)?A:e),PA="abcdefghijklmnopqrstuvwxyz",Ge="0123456789",qe={DIGIT:Ge,ALPHA:PA,ALPHA_DIGIT:PA+PA.toUpperCase()+Ge},Sr=(A=16,e=qe.ALPHA_DIGIT)=>{let t="",{length:r}=e;for(;A--;)t+=e[Math.random()*r|0];return t};function Fr(A){return!!(A&&U(A.append)&&A[Symbol.toStringTag]==="FormData"&&A[Symbol.iterator])}var Ur=A=>{let e=new Array(10),t=(r,o)=>{if(QA(r)){if(e.indexOf(r)>=0)return;if(!("toJSON"in r)){e[o]=r;let i=Y(r)?[]:{};return rA(r,(n,g)=>{let f=t(n,o+1);!tA(f)&&(i[g]=f)}),e[o]=void 0,i}}return r};return t(A,0)},Nr=O("AsyncFunction"),Mr=A=>A&&(QA(A)||U(A))&&U(A.then)&&U(A.catch),l={isArray:Y,isArrayBuffer:Le,isBuffer:er,isFormData:gr,isArrayBufferView:tr,isString:rr,isNumber:xe,isBoolean:ir,isObject:QA,isPlainObject:cA,isUndefined:tA,isDate:or,isFile:nr,isBlob:sr,isRegExp:wr,isFunction:U,isStream:Ir,isURLSearchParams:lr,isTypedArray:Qr,isFileList:ar,forEach:rA,merge:GA,extend:Br,trim:ur,stripBOM:Cr,inherits:fr,toFlatObject:cr,kindOf:pA,kindOfTest:O,endsWith:pr,toArray:Er,forEachEntry:dr,matchAll:mr,isHTMLForm:hr,hasOwnProperty:Pe,hasOwnProp:Pe,reduceDescriptors:Ye,freezeMethods:Dr,toObjectSet:br,toCamelCase:yr,noop:kr,toFiniteNumber:Rr,findKey:Te,global:Je,isContextDefined:He,ALPHABET:qe,generateString:Sr,isSpecCompliantForm:Fr,toJSONObject:Ur,isAsyncFn:Nr,isThenable:Mr};function q(A,e,t,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=A,this.name="AxiosError",e&&(this.code=e),t&&(this.config=t),r&&(this.request=r),o&&(this.response=o)}l.inherits(q,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:l.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var Ke=q.prototype,je={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(A=>{je[A]={value:A}});Object.defineProperties(q,je);Object.defineProperty(Ke,"isAxiosError",{value:!0});q.from=(A,e,t,r,o,i)=>{let n=Object.create(Ke);return l.toFlatObject(A,n,function(f){return f!==Error.prototype},g=>g!=="isAxiosError"),q.call(n,A.message,e,t,r,o),n.cause=A,n.name=A.name,i&&Object.assign(n,i),n};var y=q;var dA=null;function xA(A){return l.isPlainObject(A)||l.isArray(A)}function _e(A){return l.endsWith(A,"[]")?A.slice(0,-2):A}function ve(A,e,t){return A?A.concat(e).map(function(o,i){return o=_e(o),!t&&i?"["+o+"]":o}).join(t?".":""):e}function Or(A){return l.isArray(A)&&!A.some(xA)}var Wr=l.toFlatObject(l,{},null,function(e){return/^is[A-Z]/.test(e)});function Pr(A,e,t){if(!l.isObject(A))throw new TypeError("target must be an object");e=e||new(dA||FormData),t=l.toFlatObject(t,{metaTokens:!0,dots:!1,indexes:!1},!1,function(p,E){return!l.isUndefined(E[p])});let r=t.metaTokens,o=t.visitor||s,i=t.dots,n=t.indexes,f=(t.Blob||typeof Blob<"u"&&Blob)&&l.isSpecCompliantForm(e);if(!l.isFunction(o))throw new TypeError("visitor must be a function");function u(B){if(B===null)return"";if(l.isDate(B))return B.toISOString();if(!f&&l.isBlob(B))throw new y("Blob is not supported. Use a Buffer instead.");return l.isArrayBuffer(B)||l.isTypedArray(B)?f&&typeof Blob=="function"?new Blob([B]):Buffer.from(B):B}function s(B,p,E){let w=B;if(B&&!E&&typeof B=="object"){if(l.endsWith(p,"{}"))p=r?p:p.slice(0,-2),B=JSON.stringify(B);else if(l.isArray(B)&&Or(B)||(l.isFileList(B)||l.endsWith(p,"[]"))&&(w=l.toArray(B)))return p=_e(p),w.forEach(function(M,Pt){!(l.isUndefined(M)||M===null)&&e.append(n===!0?ve([p],Pt,i):n===null?p:p+"[]",u(M))}),!1}return xA(B)?!0:(e.append(ve(E,p,i),u(B)),!1)}let a=[],c=Object.assign(Wr,{defaultVisitor:s,convertValue:u,isVisitable:xA});function I(B,p){if(!l.isUndefined(B)){if(a.indexOf(B)!==-1)throw Error("Circular reference detected in "+p.join("."));a.push(B),l.forEach(B,function(w,N){(!(l.isUndefined(w)||w===null)&&o.call(e,w,l.isString(N)?N.trim():N,p,c))===!0&&I(w,p?p.concat(N):[N])}),a.pop()}}if(!l.isObject(A))throw new TypeError("data must be an object");return I(A),e}var G=Pr;function ze(A){let e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(A).replace(/[!'()~]|%20|%00/g,function(r){return e[r]})}function Ve(A,e){this._pairs=[],A&&G(A,this,e)}var Ze=Ve.prototype;Ze.append=function(e,t){this._pairs.push([e,t])};Ze.toString=function(e){let t=e?function(r){return e.call(this,r,ze)}:ze;return this._pairs.map(function(o){return t(o[0])+"="+t(o[1])},"").join("&")};var mA=Ve;function Gr(A){return encodeURIComponent(A).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function iA(A,e,t){if(!e)return A;let r=t&&t.encode||Gr,o=t&&t.serialize,i;if(o?i=o(e,t):i=l.isURLSearchParams(e)?e.toString():new mA(e,t).toString(r),i){let n=A.indexOf("#");n!==-1&&(A=A.slice(0,n)),A+=(A.indexOf("?")===-1?"?":"&")+i}return A}var TA=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){l.forEach(this.handlers,function(r){r!==null&&e(r)})}},JA=TA;var hA={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var Xe=typeof URLSearchParams<"u"?URLSearchParams:mA;var $e=typeof FormData<"u"?FormData:null;var At=typeof Blob<"u"?Blob:null;var et={isBrowser:!0,classes:{URLSearchParams:Xe,FormData:$e,Blob:At},protocols:["http","https","file","blob","url","data"]};var HA={};Lt(HA,{hasBrowserEnv:()=>tt,hasStandardBrowserEnv:()=>Lr,hasStandardBrowserWebWorkerEnv:()=>xr});var tt=typeof window<"u"&&typeof document<"u",Lr=(A=>tt&&["ReactNative","NativeScript","NS"].indexOf(A)<0)(typeof navigator<"u"&&navigator.product),xr=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function";var k={...HA,...et};function YA(A,e){return G(A,new k.classes.URLSearchParams,Object.assign({visitor:function(t,r,o,i){return k.isNode&&l.isBuffer(t)?(this.append(r,t.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},e))}function Tr(A){return l.matchAll(/\w+|\[(\w*)]/g,A).map(e=>e[0]==="[]"?"":e[1]||e[0])}function Jr(A){let e={},t=Object.keys(A),r,o=t.length,i;for(r=0;r<o;r++)i=t[r],e[i]=A[i];return e}function Hr(A){function e(t,r,o,i){let n=t[i++],g=Number.isFinite(+n),f=i>=t.length;return n=!n&&l.isArray(o)?o.length:n,f?(l.hasOwnProp(o,n)?o[n]=[o[n],r]:o[n]=r,!g):((!o[n]||!l.isObject(o[n]))&&(o[n]=[]),e(t,r,o[n],i)&&l.isArray(o[n])&&(o[n]=Jr(o[n])),!g)}if(l.isFormData(A)&&l.isFunction(A.entries)){let t={};return l.forEachEntry(A,(r,o)=>{e(Tr(r),o,t,0)}),t}return null}var yA=Hr;function Yr(A,e,t){if(l.isString(A))try{return(e||JSON.parse)(A),l.trim(A)}catch(r){if(r.name!=="SyntaxError")throw r}return(t||JSON.stringify)(A)}var qA={transitional:hA,adapter:["xhr","http"],transformRequest:[function(e,t){let r=t.getContentType()||"",o=r.indexOf("application/json")>-1,i=l.isObject(e);if(i&&l.isHTMLForm(e)&&(e=new FormData(e)),l.isFormData(e))return o&&o?JSON.stringify(yA(e)):e;if(l.isArrayBuffer(e)||l.isBuffer(e)||l.isStream(e)||l.isFile(e)||l.isBlob(e))return e;if(l.isArrayBufferView(e))return e.buffer;if(l.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let g;if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return YA(e,this.formSerializer).toString();if((g=l.isFileList(e))||r.indexOf("multipart/form-data")>-1){let f=this.env&&this.env.FormData;return G(g?{"files[]":e}:e,f&&new f,this.formSerializer)}}return i||o?(t.setContentType("application/json",!1),Yr(e)):e}],transformResponse:[function(e){let t=this.transitional||qA.transitional,r=t&&t.forcedJSONParsing,o=this.responseType==="json";if(e&&l.isString(e)&&(r&&!this.responseType||o)){let n=!(t&&t.silentJSONParsing)&&o;try{return JSON.parse(e)}catch(g){if(n)throw g.name==="SyntaxError"?y.from(g,y.ERR_BAD_RESPONSE,this,null,this.response):g}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:k.classes.FormData,Blob:k.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};l.forEach(["delete","get","head","post","put","patch"],A=>{qA.headers[A]={}});var K=qA;var qr=l.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),rt=A=>{let e={},t,r,o;return A&&A.split(`
`).forEach(function(n){o=n.indexOf(":"),t=n.substring(0,o).trim().toLowerCase(),r=n.substring(o+1).trim(),!(!t||e[t]&&qr[t])&&(t==="set-cookie"?e[t]?e[t].push(r):e[t]=[r]:e[t]=e[t]?e[t]+", "+r:r)}),e};var it=Symbol("internals");function oA(A){return A&&String(A).trim().toLowerCase()}function wA(A){return A===!1||A==null?A:l.isArray(A)?A.map(wA):String(A)}function Kr(A){let e=Object.create(null),t=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g,r;for(;r=t.exec(A);)e[r[1]]=r[2];return e}var jr=A=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(A.trim());function KA(A,e,t,r,o){if(l.isFunction(r))return r.call(this,e,t);if(o&&(e=t),!!l.isString(e)){if(l.isString(r))return e.indexOf(r)!==-1;if(l.isRegExp(r))return r.test(e)}}function vr(A){return A.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,t,r)=>t.toUpperCase()+r)}function _r(A,e){let t=l.toCamelCase(" "+e);["get","set","has"].forEach(r=>{Object.defineProperty(A,r+t,{value:function(o,i,n){return this[r].call(this,e,o,i,n)},configurable:!0})})}var j=class{constructor(e){e&&this.set(e)}set(e,t,r){let o=this;function i(g,f,u){let s=oA(f);if(!s)throw new Error("header name must be a non-empty string");let a=l.findKey(o,s);(!a||o[a]===void 0||u===!0||u===void 0&&o[a]!==!1)&&(o[a||f]=wA(g))}let n=(g,f)=>l.forEach(g,(u,s)=>i(u,s,f));return l.isPlainObject(e)||e instanceof this.constructor?n(e,t):l.isString(e)&&(e=e.trim())&&!jr(e)?n(rt(e),t):e!=null&&i(t,e,r),this}get(e,t){if(e=oA(e),e){let r=l.findKey(this,e);if(r){let o=this[r];if(!t)return o;if(t===!0)return Kr(o);if(l.isFunction(t))return t.call(this,o,r);if(l.isRegExp(t))return t.exec(o);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=oA(e),e){let r=l.findKey(this,e);return!!(r&&this[r]!==void 0&&(!t||KA(this,this[r],r,t)))}return!1}delete(e,t){let r=this,o=!1;function i(n){if(n=oA(n),n){let g=l.findKey(r,n);g&&(!t||KA(r,r[g],g,t))&&(delete r[g],o=!0)}}return l.isArray(e)?e.forEach(i):i(e),o}clear(e){let t=Object.keys(this),r=t.length,o=!1;for(;r--;){let i=t[r];(!e||KA(this,this[i],i,e,!0))&&(delete this[i],o=!0)}return o}normalize(e){let t=this,r={};return l.forEach(this,(o,i)=>{let n=l.findKey(r,i);if(n){t[n]=wA(o),delete t[i];return}let g=e?vr(i):String(i).trim();g!==i&&delete t[i],t[g]=wA(o),r[g]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){let t=Object.create(null);return l.forEach(this,(r,o)=>{r!=null&&r!==!1&&(t[o]=e&&l.isArray(r)?r.join(", "):r)}),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,t])=>e+": "+t).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){let r=new this(e);return t.forEach(o=>r.set(o)),r}static accessor(e){let r=(this[it]=this[it]={accessors:{}}).accessors,o=this.prototype;function i(n){let g=oA(n);r[g]||(_r(o,n),r[g]=!0)}return l.isArray(e)?e.forEach(i):i(e),this}};j.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);l.reduceDescriptors(j.prototype,({value:A},e)=>{let t=e[0].toUpperCase()+e.slice(1);return{get:()=>A,set(r){this[t]=r}}});l.freezeMethods(j);var R=j;function nA(A,e){let t=this||K,r=e||t,o=R.from(r.headers),i=r.data;return l.forEach(A,function(g){i=g.call(t,i,o.normalize(),e?e.status:void 0)}),o.normalize(),i}function sA(A){return!!(A&&A.__CANCEL__)}function ot(A,e,t){y.call(this,A??"canceled",y.ERR_CANCELED,e,t),this.name="CanceledError"}l.inherits(ot,y,{__CANCEL__:!0});var L=ot;function jA(A,e,t){let r=t.config.validateStatus;!t.status||!r||r(t.status)?A(t):e(new y("Request failed with status code "+t.status,[y.ERR_BAD_REQUEST,y.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t))}var nt=k.hasStandardBrowserEnv?{write(A,e,t,r,o,i){let n=[A+"="+encodeURIComponent(e)];l.isNumber(t)&&n.push("expires="+new Date(t).toGMTString()),l.isString(r)&&n.push("path="+r),l.isString(o)&&n.push("domain="+o),i===!0&&n.push("secure"),document.cookie=n.join("; ")},read(A){let e=document.cookie.match(new RegExp("(^|;\\s*)("+A+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(A){this.write(A,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function vA(A){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(A)}function _A(A,e){return e?A.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):A}function aA(A,e){return A&&!vA(e)?_A(A,e):e}var st=k.hasStandardBrowserEnv?function(){let e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a"),r;function o(i){let n=i;return e&&(t.setAttribute("href",n),n=t.href),t.setAttribute("href",n),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:t.pathname.charAt(0)==="/"?t.pathname:"/"+t.pathname}}return r=o(window.location.href),function(n){let g=l.isString(n)?o(n):n;return g.protocol===r.protocol&&g.host===r.host}}():function(){return function(){return!0}}();function zA(A){let e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(A);return e&&e[1]||""}function zr(A,e){A=A||10;let t=new Array(A),r=new Array(A),o=0,i=0,n;return e=e!==void 0?e:1e3,function(f){let u=Date.now(),s=r[i];n||(n=u),t[o]=f,r[o]=u;let a=i,c=0;for(;a!==o;)c+=t[a++],a=a%A;if(o=(o+1)%A,o===i&&(i=(i+1)%A),u-n<e)return;let I=s&&u-s;return I?Math.round(c*1e3/I):void 0}}var at=zr;function It(A,e){let t=0,r=at(50,250);return o=>{let i=o.loaded,n=o.lengthComputable?o.total:void 0,g=i-t,f=r(g),u=i<=n;t=i;let s={loaded:i,total:n,progress:n?i/n:void 0,bytes:g,rate:f||void 0,estimated:f&&n&&u?(n-i)/f:void 0,event:o};s[e?"download":"upload"]=!0,A(s)}}var Vr=typeof XMLHttpRequest<"u",gt=Vr&&function(A){return new Promise(function(t,r){let o=A.data,i=R.from(A.headers).normalize(),{responseType:n,withXSRFToken:g}=A,f;function u(){A.cancelToken&&A.cancelToken.unsubscribe(f),A.signal&&A.signal.removeEventListener("abort",f)}let s;if(l.isFormData(o)){if(k.hasStandardBrowserEnv||k.hasStandardBrowserWebWorkerEnv)i.setContentType(!1);else if((s=i.getContentType())!==!1){let[p,...E]=s?s.split(";").map(w=>w.trim()).filter(Boolean):[];i.setContentType([p||"multipart/form-data",...E].join("; "))}}let a=new XMLHttpRequest;if(A.auth){let p=A.auth.username||"",E=A.auth.password?unescape(encodeURIComponent(A.auth.password)):"";i.set("Authorization","Basic "+btoa(p+":"+E))}let c=aA(A.baseURL,A.url);a.open(A.method.toUpperCase(),iA(c,A.params,A.paramsSerializer),!0),a.timeout=A.timeout;function I(){if(!a)return;let p=R.from("getAllResponseHeaders"in a&&a.getAllResponseHeaders()),w={data:!n||n==="text"||n==="json"?a.responseText:a.response,status:a.status,statusText:a.statusText,headers:p,config:A,request:a};jA(function(M){t(M),u()},function(M){r(M),u()},w),a=null}if("onloadend"in a?a.onloadend=I:a.onreadystatechange=function(){!a||a.readyState!==4||a.status===0&&!(a.responseURL&&a.responseURL.indexOf("file:")===0)||setTimeout(I)},a.onabort=function(){a&&(r(new y("Request aborted",y.ECONNABORTED,A,a)),a=null)},a.onerror=function(){r(new y("Network Error",y.ERR_NETWORK,A,a)),a=null},a.ontimeout=function(){let E=A.timeout?"timeout of "+A.timeout+"ms exceeded":"timeout exceeded",w=A.transitional||hA;A.timeoutErrorMessage&&(E=A.timeoutErrorMessage),r(new y(E,w.clarifyTimeoutError?y.ETIMEDOUT:y.ECONNABORTED,A,a)),a=null},k.hasStandardBrowserEnv&&(g&&l.isFunction(g)&&(g=g(A)),g||g!==!1&&st(c))){let p=A.xsrfHeaderName&&A.xsrfCookieName&&nt.read(A.xsrfCookieName);p&&i.set(A.xsrfHeaderName,p)}o===void 0&&i.setContentType(null),"setRequestHeader"in a&&l.forEach(i.toJSON(),function(E,w){a.setRequestHeader(w,E)}),l.isUndefined(A.withCredentials)||(a.withCredentials=!!A.withCredentials),n&&n!=="json"&&(a.responseType=A.responseType),typeof A.onDownloadProgress=="function"&&a.addEventListener("progress",It(A.onDownloadProgress,!0)),typeof A.onUploadProgress=="function"&&a.upload&&a.upload.addEventListener("progress",It(A.onUploadProgress)),(A.cancelToken||A.signal)&&(f=p=>{a&&(r(!p||p.type?new L(null,A,a):p),a.abort(),a=null)},A.cancelToken&&A.cancelToken.subscribe(f),A.signal&&(A.signal.aborted?f():A.signal.addEventListener("abort",f)));let B=zA(c);if(B&&k.protocols.indexOf(B)===-1){r(new y("Unsupported protocol "+B+":",y.ERR_BAD_REQUEST,A));return}a.send(o||null)})};var VA={http:dA,xhr:gt};l.forEach(VA,(A,e)=>{if(A){try{Object.defineProperty(A,"name",{value:e})}catch{}Object.defineProperty(A,"adapterName",{value:e})}});var lt=A=>`- ${A}`,Zr=A=>l.isFunction(A)||A===null||A===!1,DA={getAdapter:A=>{A=l.isArray(A)?A:[A];let{length:e}=A,t,r,o={};for(let i=0;i<e;i++){t=A[i];let n;if(r=t,!Zr(t)&&(r=VA[(n=String(t)).toLowerCase()],r===void 0))throw new y(`Unknown adapter '${n}'`);if(r)break;o[n||"#"+i]=r}if(!r){let i=Object.entries(o).map(([g,f])=>`adapter ${g} `+(f===!1?"is not supported by the environment":"is not available in the build")),n=e?i.length>1?`since :
`+i.map(lt).join(`
`):" "+lt(i[0]):"as no adapter specified";throw new y("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r},adapters:VA};function ZA(A){if(A.cancelToken&&A.cancelToken.throwIfRequested(),A.signal&&A.signal.aborted)throw new L(null,A)}function bA(A){return ZA(A),A.headers=R.from(A.headers),A.data=nA.call(A,A.transformRequest),["post","put","patch"].indexOf(A.method)!==-1&&A.headers.setContentType("application/x-www-form-urlencoded",!1),DA.getAdapter(A.adapter||K.adapter)(A).then(function(r){return ZA(A),r.data=nA.call(A,A.transformResponse,r),r.headers=R.from(r.headers),r},function(r){return sA(r)||(ZA(A),r&&r.response&&(r.response.data=nA.call(A,A.transformResponse,r.response),r.response.headers=R.from(r.response.headers))),Promise.reject(r)})}var ut=A=>A instanceof R?A.toJSON():A;function W(A,e){e=e||{};let t={};function r(u,s,a){return l.isPlainObject(u)&&l.isPlainObject(s)?l.merge.call({caseless:a},u,s):l.isPlainObject(s)?l.merge({},s):l.isArray(s)?s.slice():s}function o(u,s,a){if(l.isUndefined(s)){if(!l.isUndefined(u))return r(void 0,u,a)}else return r(u,s,a)}function i(u,s){if(!l.isUndefined(s))return r(void 0,s)}function n(u,s){if(l.isUndefined(s)){if(!l.isUndefined(u))return r(void 0,u)}else return r(void 0,s)}function g(u,s,a){if(a in e)return r(u,s);if(a in A)return r(void 0,u)}let f={url:i,method:i,data:i,baseURL:n,transformRequest:n,transformResponse:n,paramsSerializer:n,timeout:n,timeoutMessage:n,withCredentials:n,withXSRFToken:n,adapter:n,responseType:n,xsrfCookieName:n,xsrfHeaderName:n,onUploadProgress:n,onDownloadProgress:n,decompress:n,maxContentLength:n,maxBodyLength:n,beforeRedirect:n,transport:n,httpAgent:n,httpsAgent:n,cancelToken:n,socketPath:n,responseEncoding:n,validateStatus:g,headers:(u,s)=>o(ut(u),ut(s),!0)};return l.forEach(Object.keys(Object.assign({},A,e)),function(s){let a=f[s]||o,c=a(A[s],e[s],s);l.isUndefined(c)&&a!==g||(t[s]=c)}),t}var kA="1.6.2";var XA={};["object","boolean","number","function","string","symbol"].forEach((A,e)=>{XA[A]=function(r){return typeof r===A||"a"+(e<1?"n ":" ")+A}});var Bt={};XA.transitional=function(e,t,r){function o(i,n){return"[Axios v"+kA+"] Transitional option '"+i+"'"+n+(r?". "+r:"")}return(i,n,g)=>{if(e===!1)throw new y(o(n," has been removed"+(t?" in "+t:"")),y.ERR_DEPRECATED);return t&&!Bt[n]&&(Bt[n]=!0,console.warn(o(n," has been deprecated since v"+t+" and will be removed in the near future"))),e?e(i,n,g):!0}};function Xr(A,e,t){if(typeof A!="object")throw new y("options must be an object",y.ERR_BAD_OPTION_VALUE);let r=Object.keys(A),o=r.length;for(;o-- >0;){let i=r[o],n=e[i];if(n){let g=A[i],f=g===void 0||n(g,i,A);if(f!==!0)throw new y("option "+i+" must be "+f,y.ERR_BAD_OPTION_VALUE);continue}if(t!==!0)throw new y("Unknown option "+i,y.ERR_BAD_OPTION)}}var RA={assertOptions:Xr,validators:XA};var x=RA.validators,v=class{constructor(e){this.defaults=e,this.interceptors={request:new JA,response:new JA}}request(e,t){typeof e=="string"?(t=t||{},t.url=e):t=e||{},t=W(this.defaults,t);let{transitional:r,paramsSerializer:o,headers:i}=t;r!==void 0&&RA.assertOptions(r,{silentJSONParsing:x.transitional(x.boolean),forcedJSONParsing:x.transitional(x.boolean),clarifyTimeoutError:x.transitional(x.boolean)},!1),o!=null&&(l.isFunction(o)?t.paramsSerializer={serialize:o}:RA.assertOptions(o,{encode:x.function,serialize:x.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let n=i&&l.merge(i.common,i[t.method]);i&&l.forEach(["delete","get","head","post","put","patch","common"],B=>{delete i[B]}),t.headers=R.concat(n,i);let g=[],f=!0;this.interceptors.request.forEach(function(p){typeof p.runWhen=="function"&&p.runWhen(t)===!1||(f=f&&p.synchronous,g.unshift(p.fulfilled,p.rejected))});let u=[];this.interceptors.response.forEach(function(p){u.push(p.fulfilled,p.rejected)});let s,a=0,c;if(!f){let B=[bA.bind(this),void 0];for(B.unshift.apply(B,g),B.push.apply(B,u),c=B.length,s=Promise.resolve(t);a<c;)s=s.then(B[a++],B[a++]);return s}c=g.length;let I=t;for(a=0;a<c;){let B=g[a++],p=g[a++];try{I=B(I)}catch(E){p.call(this,E);break}}try{s=bA.call(this,I)}catch(B){return Promise.reject(B)}for(a=0,c=u.length;a<c;)s=s.then(u[a++],u[a++]);return s}getUri(e){e=W(this.defaults,e);let t=aA(e.baseURL,e.url);return iA(t,e.params,e.paramsSerializer)}};l.forEach(["delete","get","head","options"],function(e){v.prototype[e]=function(t,r){return this.request(W(r||{},{method:e,url:t,data:(r||{}).data}))}});l.forEach(["post","put","patch"],function(e){function t(r){return function(i,n,g){return this.request(W(g||{},{method:e,headers:r?{"Content-Type":"multipart/form-data"}:{},url:i,data:n}))}}v.prototype[e]=t(),v.prototype[e+"Form"]=t(!0)});var IA=v;var $A=class A{constructor(e){if(typeof e!="function")throw new TypeError("executor must be a function.");let t;this.promise=new Promise(function(i){t=i});let r=this;this.promise.then(o=>{if(!r._listeners)return;let i=r._listeners.length;for(;i-- >0;)r._listeners[i](o);r._listeners=null}),this.promise.then=o=>{let i,n=new Promise(g=>{r.subscribe(g),i=g}).then(o);return n.cancel=function(){r.unsubscribe(i)},n},e(function(i,n,g){r.reason||(r.reason=new L(i,n,g),t(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){if(this.reason){e(this.reason);return}this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;let t=this._listeners.indexOf(e);t!==-1&&this._listeners.splice(t,1)}static source(){let e;return{token:new A(function(o){e=o}),cancel:e}}},Ct=$A;function Ae(A){return function(t){return A.apply(null,t)}}function ee(A){return l.isObject(A)&&A.isAxiosError===!0}var te={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(te).forEach(([A,e])=>{te[e]=A});var ft=te;function ct(A){let e=new IA(A),t=eA(IA.prototype.request,e);return l.extend(t,IA.prototype,e,{allOwnKeys:!0}),l.extend(t,e,null,{allOwnKeys:!0}),t.create=function(o){return ct(W(A,o))},t}var D=ct(K);D.Axios=IA;D.CanceledError=L;D.CancelToken=Ct;D.isCancel=sA;D.VERSION=kA;D.toFormData=G;D.AxiosError=y;D.Cancel=D.CanceledError;D.all=function(e){return Promise.all(e)};D.spread=Ae;D.isAxiosError=ee;D.mergeConfig=W;D.AxiosHeaders=R;D.formToJSON=A=>yA(l.isHTMLForm(A)?new FormData(A):A);D.getAdapter=DA.getAdapter;D.HttpStatusCode=ft;D.default=D;var _=D;var{Axios:xs,AxiosError:Ts,CanceledError:Js,isCancel:Hs,CancelToken:Ys,VERSION:qs,all:Ks,Cancel:js,isAxiosError:vs,spread:_s,toFormData:zs,AxiosHeaders:Vs,HttpStatusCode:Zs,formToJSON:Xs,getAdapter:$s,mergeConfig:Aa}=_;async function $r(A){let e=A,t=null;if(e===null)t=new Worker(new URL("./web-workers/itk-wasm-pipeline.worker.js",import.meta.url),{type:"module"});else if(e.startsWith("http")){let r=await _.get(e,{responseType:"blob"}),o=URL.createObjectURL(r.data);t=new Worker(o,{type:"module"})}else t=new Worker(e,{type:"module"});return t}var gA=$r;function pt(A){let e=OA(A),t=A;return t.terminated=!1,t.workerProxy=e,t.originalTerminate=t.terminate,t.terminate=()=>{t.terminated=!0,t.workerProxy[MA](),t.originalTerminate()},{workerProxy:e,worker:t}}async function Ai(A,e){let t;if(A!=null){let o=A;return o.workerProxy!==void 0?(t=o.workerProxy,{workerProxy:t,worker:o}):pt(A)}let r=await gA(e);return pt(r)}var Et=Ai;async function ei(A,e){let t="unknown";typeof A!="string"?t=A.href:A.startsWith("http")?t=A:t=typeof e<"u"?`${e}/${A}`:A,t.endsWith(".js")&&(t=t.substring(0,t.length-3)),t.endsWith(".wasm")&&(t=t.substring(0,t.length-5));let r=`${t}.wasm`,i=(await _.get(r,{responseType:"arraybuffer"})).data;return(await import(`${t}.js`)).default({wasmBinary:i})}var Qt=ei;var dt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var yt=typeof globalThis.SharedArrayBuffer=="function",mt=new TextEncoder,ht=new TextDecoder("utf-8");function ti(A,e){let t={flags:"r",encoding:"binary"},r=A.fs_open(e,t.flags),i=A.fs_stat(e).size,n=null;yt?n=new SharedArrayBuffer(i):n=new ArrayBuffer(i);let g=new Uint8Array(n);return A.fs_read(r,g,0,i,0),A.fs_close(r),g}function wt(A,e,t){let r=null;yt?r=new SharedArrayBuffer(t):r=new ArrayBuffer(t);let o=new Uint8Array(r),i=new Uint8Array(A.HEAPU8.buffer,e,t);return o.set(i),o}function b(A,e,t,r){let o=0;return e!==null&&(o=A.ccall("itk_wasm_input_array_alloc","number",["number","number","number","number"],[0,t,r,e.buffer.byteLength]),A.HEAPU8.set(new Uint8Array(e.buffer),o)),o}function z(A,e,t){let r=JSON.stringify(e),o=A.ccall("itk_wasm_input_json_alloc","number",["number","number","number"],[0,t,r.length]);A.writeAsciiToMemory(r,o,!1)}function F(A,e,t,r){let o=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,e,t]),i=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,e,t]),n=wt(A,o,i);return P(r,n.buffer)}function re(A,e){let t=A.ccall("itk_wasm_output_json_address","number",["number","number"],[0,e]),r=A.AsciiToString(t);return JSON.parse(r)}function ri(A,e,t,r){r!=null&&r.length>0&&r.forEach(function(u,s){switch(u.type){case C.TextStream:{let a=mt.encode(u.data.data),c=b(A,a,s,0),I={size:a.buffer.byteLength,data:`data:application/vnd.itk.address,0:${c}`};z(A,I,s);break}case C.JsonCompatible:{let a=mt.encode(JSON.stringify(u.data)),c=b(A,a,s,0),I={size:a.buffer.byteLength,data:`data:application/vnd.itk.address,0:${c}`};z(A,I,s);break}case C.BinaryStream:{let a=u.data.data,c=b(A,a,s,0),I={size:a.buffer.byteLength,data:`data:application/vnd.itk.address,0:${c}`};z(A,I,s);break}case C.TextFile:{A.fs_writeFile(u.data.path,u.data.data);break}case C.BinaryFile:{A.fs_writeFile(u.data.path,u.data.data);break}case C.Image:{let a=u.data,c=b(A,a.data,s,0),I=b(A,a.direction,s,1),B=typeof a.metadata?.entries<"u"?JSON.stringify(Array.from(a.metadata.entries())):"[]",p={imageType:a.imageType,name:a.name,origin:a.origin,spacing:a.spacing,direction:`data:application/vnd.itk.address,0:${I}`,size:a.size,data:`data:application/vnd.itk.address,0:${c}`,metadata:B};z(A,p,s);break}case C.Mesh:{let a=u.data,c=b(A,a.points,s,0),I=b(A,a.cells,s,1),B=b(A,a.pointData,s,2),p=b(A,a.cellData,s,3),E={meshType:a.meshType,name:a.name,numberOfPoints:a.numberOfPoints,points:`data:application/vnd.itk.address,0:${c}`,numberOfCells:a.numberOfCells,cells:`data:application/vnd.itk.address,0:${I}`,cellBufferSize:a.cellBufferSize,numberOfPointPixels:a.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${B}`,numberOfCellPixels:a.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${p}`};z(A,E,s);break}case C.PolyData:{let a=u.data,c=b(A,a.points,s,0),I=b(A,a.vertices,s,1),B=b(A,a.lines,s,2),p=b(A,a.polygons,s,3),E=b(A,a.triangleStrips,s,4),w=b(A,a.pointData,s,5),N=b(A,a.pointData,s,6),M={polyDataType:a.polyDataType,name:a.name,numberOfPoints:a.numberOfPoints,points:`data:application/vnd.itk.address,0:${c}`,verticesBufferSize:a.verticesBufferSize,vertices:`data:application/vnd.itk.address,0:${I}`,linesBufferSize:a.linesBufferSize,lines:`data:application/vnd.itk.address,0:${B}`,polygonsBufferSize:a.polygonsBufferSize,polygons:`data:application/vnd.itk.address,0:${p}`,triangleStripsBufferSize:a.triangleStripsBufferSize,triangleStrips:`data:application/vnd.itk.address,0:${E}`,numberOfPointPixels:a.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${w}`,numberOfCellPixels:a.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${N}`};z(A,M,s);break}default:throw Error("Unsupported input InterfaceType")}}),A.resetModuleStdout(),A.resetModuleStderr();let o=A.stackSave(),i=0;try{i=A.callMain(e.slice())}catch(u){throw typeof u=="number"&&(console.log("Exception while running pipeline:"),console.log("stdout:",A.getModuleStdout()),console.error("stderr:",A.getModuleStderr()),typeof A.getExceptionMessage<"u"?console.error("exception:",A.getExceptionMessage(u)):console.error("Build module in Debug mode for exception message information.")),u}finally{A.stackRestore(o)}let n=A.getModuleStdout(),g=A.getModuleStderr(),f=[];return t!=null&&t.length>0&&i===0&&t.forEach(function(u,s){let a=null;switch(u.type){case C.TextStream:{let I=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,s,0]),B=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,s,0]),p=new Uint8Array(A.HEAPU8.buffer,I,B);a={data:ht.decode(p)};break}case C.JsonCompatible:{let I=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,s,0]),B=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,s,0]),p=new Uint8Array(A.HEAPU8.buffer,I,B);a=JSON.parse(ht.decode(p));break}case C.BinaryStream:{let I=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,s,0]),B=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,s,0]);a={data:wt(A,I,B)};break}case C.TextFile:{a={path:u.data.path,data:A.fs_readFile(u.data.path,{encoding:"utf8"})};break}case C.BinaryFile:{a={path:u.data.path,data:ti(A,u.data.path)};break}case C.Image:{let I=re(A,s);I.data=F(A,s,0,I.imageType.componentType),I.direction=F(A,s,1,J.Float64),I.metadata=new Map(I.metadata),a=I;break}case C.Mesh:{let I=re(A,s);I.numberOfPoints>0?I.points=F(A,s,0,I.meshType.pointComponentType):I.points=P(I.meshType.pointComponentType,new ArrayBuffer(0)),I.numberOfCells>0?I.cells=F(A,s,1,I.meshType.cellComponentType):I.cells=P(I.meshType.cellComponentType,new ArrayBuffer(0)),I.numberOfPointPixels>0?I.pointData=F(A,s,2,I.meshType.pointPixelComponentType):I.pointData=P(I.meshType.pointPixelComponentType,new ArrayBuffer(0)),I.numberOfCellPixels>0?I.cellData=F(A,s,3,I.meshType.cellPixelComponentType):I.cellData=P(I.meshType.cellPixelComponentType,new ArrayBuffer(0)),a=I;break}case C.PolyData:{let I=re(A,s);I.numberOfPoints>0?I.points=F(A,s,0,J.Float32):I.points=new Float32Array,I.verticesBufferSize>0?I.vertices=F(A,s,1,S.UInt32):I.vertices=new Uint32Array,I.linesBufferSize>0?I.lines=F(A,s,2,S.UInt32):I.lines=new Uint32Array,I.polygonsBufferSize>0?I.polygons=F(A,s,3,S.UInt32):I.polygons=new Uint32Array,I.triangleStripsBufferSize>0?I.triangleStrips=F(A,s,4,S.UInt32):I.triangleStrips=new Uint32Array,I.numberOfPointPixels>0?I.pointData=F(A,s,5,I.polyDataType.pointPixelComponentType):I.pointData=P(I.polyDataType.pointPixelComponentType,new ArrayBuffer(0)),I.numberOfCellPixels>0?I.cellData=F(A,s,6,I.polyDataType.cellPixelComponentType):I.cellData=P(I.polyDataType.cellPixelComponentType,new ArrayBuffer(0)),a=I;break}default:throw Error("Unsupported output InterfaceType")}let c={type:u.type,data:a};f.push(c)}),{returnValue:i,stdout:n,stderr:g,outputs:f}}var Dt=ri;var ii=typeof globalThis.SharedArrayBuffer<"u";function oi(A,e){if(A==null)return[];let t=[];for(let r=0;r<A.length;r++){let o=ni(A[r],e);o!==null&&t.push(o)}return t}function ni(A,e){if(A==null)return null;let t=null;return A.buffer!==void 0?t=A.buffer:A.byteLength!==void 0&&(t=A),ii&&t instanceof SharedArrayBuffer?null:e?t:t.slice(0)}var bt=oi;function si(A){return[A.data,A.direction]}var kt=si;function ai(A){return[A.points,A.pointData,A.cells,A.cellData]}var Rt=ai;function Ii(A){return[A.points,A.vertices,A.lines,A.polygons,A.triangleStrips,A.pointData,A.cellData]}var St=Ii;var gi;function SA(){return gi}var li;function FA(){return li}var ie=new Map;function ui(){let A=FA();return typeof A>"u"&&(A=null),A}function Ft(){let A=SA();return typeof A>"u"&&(A=new URL("/pipelines",document.location.origin).href),A}async function Bi(A,e){let t=A,r=A;if(typeof A!="string"&&(t=new URL(A.href),r=t.href),ie.has(r))return ie.get(r);{let o=await Qt(A,e?.toString()??Ft());return ie.set(r,o),o}}async function Ci(A,e,t,r,o){if(!await dt()){let E="WebAssembly SIMD support is required -- please update your browser.";throw alert(E),new Error(E)}let i=o?.webWorker??null;if(i===!1){let E=await Bi(A.toString(),o?.pipelineBaseUrl);return Dt(E,e,t,r)}let n=i,g=o?.pipelineWorkerUrl??ui(),f=typeof g!="string"&&typeof g?.href<"u"?g.href:g,{workerProxy:u,worker:s}=await Et(n,f);n=s;let a=[];r!=null&&r.length>0&&r.forEach(function(E){if(E.type===C.BinaryStream){let w=E.data.data;a.push(w)}else if(E.type===C.BinaryFile){let w=E.data.data;a.push(w)}else if(E.type===C.Image){let w=E.data;w.data!==null&&a.push(...kt(w))}else if(E.type===C.Mesh){let w=E.data;a.push(...Rt(w))}else if(E.type===C.PolyData){let w=E.data;a.push(...St(w))}});let c=o?.pipelineBaseUrl??Ft(),I=typeof c!="string"&&typeof c?.href<"u"?c.href:c,B=r!=null?WA(r,bt(a,o?.noCopy)):null,p=await u.runPipeline(A.toString(),I,e,t,B);return{returnValue:p.returnValue,stdout:p.stdout,stderr:p.stderr,outputs:p.outputs,webWorker:n}}var d=Ci;var fi=null;function Ut(){return fi}var ci=new Map([]),V=ci;var pi=new Map([["vtk","vtk"],["byu","byu"],["fsa","free-surfer-ascii"],["fsb","free-surfer-binary"],["obj","obj"],["off","off"],["stl","stl"],["swc","swc"],["iwm","wasm"],["iwm.cbor","wasm"],["iwm.cbor.zst","wasm-zstd"]]),Z=pi;var Nt={name:"@itk-wasm/mesh-io",version:"1.0.0",packageManager:"pnpm@8.11.0",description:"Input and output for scientific and medical image file formats.",type:"module",module:"./dist/index.js",types:"./dist/index-all.d.ts",exports:{".":{types:"./dist/index-all.d.ts",browser:"./dist/index.js",node:"./dist/index-node.js",default:"./dist/index-all.js"}},scripts:{start:"pnpm copyShoelaceAssets && vite",test:"pnpm test:node && pnpm test:browser","test:node":"ava","test:browser":"pnpm test:browser:chrome && pnpm test:browser:firefox","test:browser:firefox":"start-server-and-test start http-get://localhost:5178 cypress:runFirefox","test:browser:chrome":"start-server-and-test start http-get://localhost:5178 cypress:runChrome","test:browser:debug":"start-server-and-test start http-get://localhost:5178 cypress:open","cypress:open":"pnpx cypress open","cypress:runChrome":"pnpx cypress run --browser chrome","cypress:runFirefox":"pnpx cypress run --browser firefox",build:"pnpm build:tsc && pnpm build:browser:workerEmbedded && pnpm build:browser:workerEmbeddedMin && pnpm build:demo","build:browser:workerEmbedded":"esbuild --loader:.worker.js=dataurl --bundle --format=esm --outfile=./dist/bundle/index-worker-embedded.js ./src/index-worker-embedded.ts","build:browser:workerEmbeddedMin":"esbuild --minify --loader:.worker.js=dataurl --bundle --format=esm --outfile=./dist/bundle/index-worker-embedded.min.js ./src/index-worker-embedded.min.ts","build:tsc":"tsc --pretty",copyShoelaceAssets:"shx mkdir -p test/browser/demo-app/public && shx cp -r node_modules/@shoelace-style/shoelace/dist/assets test/browser/demo-app/public/","build:demo":"pnpm copyShoelaceAssets && vite build"},keywords:["itk","wasm","webassembly","wasi"],author:"",license:"Apache-2.0",dependencies:{"itk-wasm":"workspace:^","mime-types":"^2.1.35"},devDependencies:{"@itk-wasm/image-io":"workspace:^","@itk-wasm/mesh-io-build":"workspace:*","@shoelace-style/shoelace":"^2.5.2","@types/mime-types":"^2.1.4","@types/node":"^20.2.5",ava:"^5.3.1",cypress:"^13.6.0",esbuild:"^0.19.5",shx:"^0.3.4","start-server-and-test":"^2.0.3",typescript:"^5.0.4",vite:"^4.5.0","vite-plugin-static-copy":"^0.17.0"},repository:{type:"git",url:"https://github.com/InsightSoftwareConsortium/itk-wasm"},ava:{files:["test/node/**/*","!test/node/common.js"]}};var oe,Qi=`https://cdn.jsdelivr.net/npm/@itk-wasm/mesh-io@${Nt.version}/dist/pipelines`;function qa(A){oe=A}function m(){if(typeof oe<"u")return oe;let A=SA();return typeof A<"u"?A:Qi}var ne,di=null;function Mt(A){ne=A}function Q(){if(typeof ne<"u")return ne;let A=FA();return typeof A<"u"?A:di}var X=null;async function Ot(){let A=Q(),e=typeof A!="string"&&typeof A?.href<"u"?A.href:A;X=await gA(e)}function Za(A){X=A}async function h(){if(X!==null)return X.terminated&&await Ot(),X;let A=Ut();return A!==null?A:(await Ot(),X)}async function mi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="vtk-poly-data-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var se=mi;async function hi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="vtk-poly-data-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var ae=hi;async function yi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="obj-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var Ie=yi;async function wi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="obj-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var ge=wi;async function Di(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="stl-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var le=Di;async function bi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="stl-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var ue=bi;async function ki(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="off-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var Be=ki;async function Ri(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="off-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var Ce=Ri;async function Si(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="wasm-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var fe=Si;async function Fi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="wasm-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var ce=Fi;async function Ui(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="wasm-zstd-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var pe=Ui;async function Ni(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="wasm-zstd-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var Ee=Ni;async function Mi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="swc-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var Qe=Mi;async function Oi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="swc-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var de=Oi;async function Wi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="byu-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var me=Wi;async function Pi(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="byu-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var he=Pi;async function Gi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="free-surfer-ascii-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var ye=Gi;async function Li(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="free-surfer-ascii-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var we=Li;async function xi(A,e={}){let t=[{type:C.JsonCompatible},{type:C.Mesh}],r=A;if(A instanceof File){let E=await A.arrayBuffer();r={path:A.name,data:new Uint8Array(E)}}let o=[{type:C.BinaryFile,data:r}],i=[],n=r.path;i.push(n);let g="0";i.push(g);let f="1";i.push(f),i.push("--memory-io"),typeof e.informationOnly<"u"&&e.informationOnly&&i.push("--information-only");let u="free-surfer-binary-read-mesh",s=e?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,t,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:e?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldRead:B[0]?.data,mesh:B[1]?.data}}var De=xi;async function Ti(A,e,t={}){let r=[{type:C.JsonCompatible},{type:C.BinaryFile,data:{path:e,data:new Uint8Array}}],o=[{type:C.Mesh,data:A}],i=[],n="0";i.push(n);let g="0";i.push(g);let f=e;i.push(f),i.push("--memory-io"),typeof t.informationOnly<"u"&&t.informationOnly&&i.push("--information-only"),typeof t.useCompression<"u"&&t.useCompression&&i.push("--use-compression"),typeof t.binaryFileType<"u"&&t.binaryFileType&&i.push("--binary-file-type");let u="free-surfer-binary-write-mesh",s=t?.webWorker;s===void 0&&(s=await h());let{webWorker:a,returnValue:c,stderr:I,outputs:B}=await d(u,i,r,o,{pipelineBaseUrl:m(),pipelineWorkerUrl:Q(),webWorker:s,noCopy:t?.noCopy});if(c!==0&&I!=="")throw new Error(I);return{webWorker:a,couldWrite:B[0]?.data,serializedMesh:B[1]?.data}}var be=Ti;var Ji=new Map([["vtk",[se,ae]],["obj",[Ie,ge]],["stl",[le,ue]],["off",[Be,Ce]],["wasm",[fe,ce]],["wasm-zst",[pe,Ee]],["swc",[Qe,de]],["byu",[me,he]],["free-surfer-ascii",[ye,we]],["free-surfer-binary",[De,be]]]),$=Ji;async function Hi(A,e={}){let t=A.type??"",r=A.name??A.path??"fileName",o=AA(r).toLowerCase(),i=e?.webWorker,n=A;if(A instanceof Blob){let I=await A.arrayBuffer();n={path:A.name,data:new Uint8Array(I)}}let g=null;if(t&&V.has(t))g=V.get(t);else if(Z.has(o))g=Z.get(o);else for(let I of $.values())if(I[0]!==null){let{webWorker:B,couldRead:p,mesh:E}=await I[0]({path:n.path,data:n.data.slice()},{informationOnly:e.informationOnly,webWorker:i,noCopy:e?.noCopy});if(i=B,p)return{webWorker:i,mesh:E}}if(!g)throw Error("Could not find IO for: "+r);let u=$.get(g)[0],{webWorker:s,couldRead:a,mesh:c}=await u(n,{informationOnly:e.informationOnly,webWorker:i,noCopy:e?.noCopy});if(i=s,!a)throw Error("Could not read: "+r);return{webWorker:i,mesh:c}}var Yi=Hi;async function qi(A,e,t={}){let r=A,o=t.mimeType,i=AA(e).toLowerCase(),n=t.webWorker,g=null;if(typeof o<"u"&&V.has(o))g=V.get(o);else if(Z.has(i))g=Z.get(i);else for(let B of $.values())if(B[1]!==null){let{webWorker:p,couldWrite:E,serializedMesh:w}=await B[1](r,e,t);if(n=p,E)return{webWorker:n,serializedMesh:w}}if(!g)throw Error("Could not find IO for: "+e);let u=$.get(g)[1],{webWorker:s,couldWrite:a,serializedMesh:c}=await u(r,e,t);if(n=s,!a)throw Error("Could not write: "+e);return{webWorker:n,serializedMesh:c}}var Ki=qi;var Wt='data:text/javascript;charset=utf-8,var tt=Object.defineProperty;var et=(A,I)=>{for(var t in I)tt(A,t,{get:I[t],enumerable:!0})};var vA=Symbol("Comlink.proxy"),gt=Symbol("Comlink.endpoint"),rt=Symbol("Comlink.releaseProxy"),mA=Symbol("Comlink.finalizer"),eA=Symbol("Comlink.thrown"),$A=A=>typeof A=="object"&&A!==null||typeof A=="function",it={canHandle:A=>$A(A)&&A[vA],serialize(A){let{port1:I,port2:t}=new MessageChannel;return oA(A,I),[t,[t]]},deserialize(A){return A.start(),st(A)}},ot={canHandle:A=>$A(A)&&eA in A,serialize({value:A}){let I;return A instanceof Error?I={isError:!0,value:{message:A.message,name:A.name,stack:A.stack}}:I={isError:!1,value:A},[I,[]]},deserialize(A){throw A.isError?Object.assign(new Error(A.value.message),A.value):A.value}},AI=new Map([["proxy",it],["throw",ot]]);function Bt(A,I){for(let t of A)if(I===t||t==="*"||t instanceof RegExp&&t.test(I))return!0;return!1}function oA(A,I=globalThis,t=["*"]){I.addEventListener("message",function e(g){if(!g||!g.data)return;if(!Bt(t,g.origin)){console.warn(`Invalid origin \'${g.origin}\' for comlink proxy`);return}let{id:i,type:r,path:s}=Object.assign({path:[]},g.data),a=(g.data.argumentList||[]).map(b),n;try{let C=s.slice(0,-1).reduce((f,Q)=>f[Q],A),o=s.reduce((f,Q)=>f[Q],A);switch(r){case"GET":n=o;break;case"SET":C[s.slice(-1)[0]]=b(g.data.value),n=!0;break;case"APPLY":n=o.apply(C,a);break;case"CONSTRUCT":{let f=new o(...a);n=at(f)}break;case"ENDPOINT":{let{port1:f,port2:Q}=new MessageChannel;oA(A,Q),n=SA(f,[f])}break;case"RELEASE":n=void 0;break;default:return}}catch(C){n={value:C,[eA]:0}}Promise.resolve(n).catch(C=>({value:C,[eA]:0})).then(C=>{let[o,f]=iA(C);I.postMessage(Object.assign(Object.assign({},o),{id:i}),f),r==="RELEASE"&&(I.removeEventListener("message",e),II(I),mA in A&&typeof A[mA]=="function"&&A[mA]())}).catch(C=>{let[o,f]=iA({value:new TypeError("Unserializable return value"),[eA]:0});I.postMessage(Object.assign(Object.assign({},o),{id:i}),f)})}),I.start&&I.start()}function Ct(A){return A.constructor.name==="MessagePort"}function II(A){Ct(A)&&A.close()}function st(A,I){return pA(A,[],I)}function tA(A){if(A)throw new Error("Proxy has been released and is not useable")}function tI(A){return M(A,{type:"RELEASE"}).then(()=>{II(A)})}var gA=new WeakMap,rA="FinalizationRegistry"in globalThis&&new FinalizationRegistry(A=>{let I=(gA.get(A)||0)-1;gA.set(A,I),I===0&&tI(A)});function Qt(A,I){let t=(gA.get(I)||0)+1;gA.set(I,t),rA&&rA.register(A,I,A)}function nt(A){rA&&rA.unregister(A)}function pA(A,I=[],t=function(){}){let e=!1,g=new Proxy(t,{get(i,r){if(tA(e),r===rt)return()=>{nt(g),tI(A),e=!0};if(r==="then"){if(I.length===0)return{then:()=>g};let s=M(A,{type:"GET",path:I.map(a=>a.toString())}).then(b);return s.then.bind(s)}return pA(A,[...I,r])},set(i,r,s){tA(e);let[a,n]=iA(s);return M(A,{type:"SET",path:[...I,r].map(C=>C.toString()),value:a},n).then(b)},apply(i,r,s){tA(e);let a=I[I.length-1];if(a===gt)return M(A,{type:"ENDPOINT"}).then(b);if(a==="bind")return pA(A,I.slice(0,-1));let[n,C]=_A(s);return M(A,{type:"APPLY",path:I.map(o=>o.toString()),argumentList:n},C).then(b)},construct(i,r){tA(e);let[s,a]=_A(r);return M(A,{type:"CONSTRUCT",path:I.map(n=>n.toString()),argumentList:s},a).then(b)}});return Qt(g,A),g}function Et(A){return Array.prototype.concat.apply([],A)}function _A(A){let I=A.map(iA);return[I.map(t=>t[0]),Et(I.map(t=>t[1]))]}var eI=new WeakMap;function SA(A,I){return eI.set(A,I),A}function at(A){return Object.assign(A,{[vA]:!0})}function iA(A){for(let[I,t]of AI)if(t.canHandle(A)){let[e,g]=t.serialize(A);return[{type:"HANDLER",name:I,value:e},g]}return[{type:"RAW",value:A},eI.get(A)||[]]}function b(A){switch(A.type){case"HANDLER":return AI.get(A.name).deserialize(A.value);case"RAW":return A.value}}function M(A,I,t){return new Promise(e=>{let g=ct();A.addEventListener("message",function i(r){!r.data||!r.data.id||r.data.id!==g||(A.removeEventListener("message",i),e(r.data))}),A.start&&A.start(),A.postMessage(Object.assign({id:g},I),t)})}function ct(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}function W(A,I){return function(){return A.apply(I,arguments)}}var{toString:ft}=Object.prototype,{getPrototypeOf:NA}=Object,CA=(A=>I=>{let t=ft.call(I);return A[t]||(A[t]=t.slice(8,-1).toLowerCase())})(Object.create(null)),U=A=>(A=A.toLowerCase(),I=>CA(I)===A),sA=A=>I=>typeof I===A,{isArray:q}=Array,Z=sA("undefined");function lt(A){return A!==null&&!Z(A)&&A.constructor!==null&&!Z(A.constructor)&&F(A.constructor.isBuffer)&&A.constructor.isBuffer(A)}var oI=U("ArrayBuffer");function Dt(A){let I;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?I=ArrayBuffer.isView(A):I=A&&A.buffer&&oI(A.buffer),I}var ut=sA("string"),F=sA("function"),BI=sA("number"),QA=A=>A!==null&&typeof A=="object",ht=A=>A===!0||A===!1,BA=A=>{if(CA(A)!=="object")return!1;let I=NA(A);return(I===null||I===Object.prototype||Object.getPrototypeOf(I)===null)&&!(Symbol.toStringTag in A)&&!(Symbol.iterator in A)},dt=U("Date"),yt=U("File"),wt=U("Blob"),mt=U("FileList"),pt=A=>QA(A)&&F(A.pipe),St=A=>{let I;return A&&(typeof FormData=="function"&&A instanceof FormData||F(A.append)&&((I=CA(A))==="formdata"||I==="object"&&F(A.toString)&&A.toString()==="[object FormData]"))},Ft=U("URLSearchParams"),Rt=A=>A.trim?A.trim():A.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,"");function V(A,I,{allOwnKeys:t=!1}={}){if(A===null||typeof A>"u")return;let e,g;if(typeof A!="object"&&(A=[A]),q(A))for(e=0,g=A.length;e<g;e++)I.call(null,A[e],e,A);else{let i=t?Object.getOwnPropertyNames(A):Object.keys(A),r=i.length,s;for(e=0;e<r;e++)s=i[e],I.call(null,A[s],s,A)}}function CI(A,I){I=I.toLowerCase();let t=Object.keys(A),e=t.length,g;for(;e-- >0;)if(g=t[e],I===g.toLowerCase())return g;return null}var sI=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,QI=A=>!Z(A)&&A!==sI;function RA(){let{caseless:A}=QI(this)&&this||{},I={},t=(e,g)=>{let i=A&&CI(I,g)||g;BA(I[i])&&BA(e)?I[i]=RA(I[i],e):BA(e)?I[i]=RA({},e):q(e)?I[i]=e.slice():I[i]=e};for(let e=0,g=arguments.length;e<g;e++)arguments[e]&&V(arguments[e],t);return I}var Nt=(A,I,t,{allOwnKeys:e}={})=>(V(I,(g,i)=>{t&&F(g)?A[i]=W(g,t):A[i]=g},{allOwnKeys:e}),A),Ut=A=>(A.charCodeAt(0)===65279&&(A=A.slice(1)),A),Gt=(A,I,t,e)=>{A.prototype=Object.create(I.prototype,e),A.prototype.constructor=A,Object.defineProperty(A,"super",{value:I.prototype}),t&&Object.assign(A.prototype,t)},kt=(A,I,t,e)=>{let g,i,r,s={};if(I=I||{},A==null)return I;do{for(g=Object.getOwnPropertyNames(A),i=g.length;i-- >0;)r=g[i],(!e||e(r,A,I))&&!s[r]&&(I[r]=A[r],s[r]=!0);A=t!==!1&&NA(A)}while(A&&(!t||t(A,I))&&A!==Object.prototype);return I},Lt=(A,I,t)=>{A=String(A),(t===void 0||t>A.length)&&(t=A.length),t-=I.length;let e=A.indexOf(I,t);return e!==-1&&e===t},Jt=A=>{if(!A)return null;if(q(A))return A;let I=A.length;if(!BI(I))return null;let t=new Array(I);for(;I-- >0;)t[I]=A[I];return t},Ht=(A=>I=>A&&I instanceof A)(typeof Uint8Array<"u"&&NA(Uint8Array)),Yt=(A,I)=>{let e=(A&&A[Symbol.iterator]).call(A),g;for(;(g=e.next())&&!g.done;){let i=g.value;I.call(A,i[0],i[1])}},bt=(A,I)=>{let t,e=[];for(;(t=A.exec(I))!==null;)e.push(t);return e},Mt=U("HTMLFormElement"),qt=A=>A.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,function(t,e,g){return e.toUpperCase()+g}),rI=(({hasOwnProperty:A})=>(I,t)=>A.call(I,t))(Object.prototype),Kt=U("RegExp"),nI=(A,I)=>{let t=Object.getOwnPropertyDescriptors(A),e={};V(t,(g,i)=>{let r;(r=I(g,i,A))!==!1&&(e[i]=r||g)}),Object.defineProperties(A,e)},Ot=A=>{nI(A,(I,t)=>{if(F(A)&&["arguments","caller","callee"].indexOf(t)!==-1)return!1;let e=A[t];if(F(e)){if(I.enumerable=!1,"writable"in I){I.writable=!1;return}I.set||(I.set=()=>{throw Error("Can not rewrite read-only method \'"+t+"\'")})}})},Tt=(A,I)=>{let t={},e=g=>{g.forEach(i=>{t[i]=!0})};return q(A)?e(A):e(String(A).split(I)),t},xt=()=>{},Pt=(A,I)=>(A=+A,Number.isFinite(A)?A:I),FA="abcdefghijklmnopqrstuvwxyz",iI="0123456789",EI={DIGIT:iI,ALPHA:FA,ALPHA_DIGIT:FA+FA.toUpperCase()+iI},jt=(A=16,I=EI.ALPHA_DIGIT)=>{let t="",{length:e}=I;for(;A--;)t+=I[Math.random()*e|0];return t};function Wt(A){return!!(A&&F(A.append)&&A[Symbol.toStringTag]==="FormData"&&A[Symbol.iterator])}var Zt=A=>{let I=new Array(10),t=(e,g)=>{if(QA(e)){if(I.indexOf(e)>=0)return;if(!("toJSON"in e)){I[g]=e;let i=q(e)?[]:{};return V(e,(r,s)=>{let a=t(r,g+1);!Z(a)&&(i[s]=a)}),I[g]=void 0,i}}return e};return t(A,0)},Vt=U("AsyncFunction"),Xt=A=>A&&(QA(A)||F(A))&&F(A.then)&&F(A.catch),B={isArray:q,isArrayBuffer:oI,isBuffer:lt,isFormData:St,isArrayBufferView:Dt,isString:ut,isNumber:BI,isBoolean:ht,isObject:QA,isPlainObject:BA,isUndefined:Z,isDate:dt,isFile:yt,isBlob:wt,isRegExp:Kt,isFunction:F,isStream:pt,isURLSearchParams:Ft,isTypedArray:Ht,isFileList:mt,forEach:V,merge:RA,extend:Nt,trim:Rt,stripBOM:Ut,inherits:Gt,toFlatObject:kt,kindOf:CA,kindOfTest:U,endsWith:Lt,toArray:Jt,forEachEntry:Yt,matchAll:bt,isHTMLForm:Mt,hasOwnProperty:rI,hasOwnProp:rI,reduceDescriptors:nI,freezeMethods:Ot,toObjectSet:Tt,toCamelCase:qt,noop:xt,toFiniteNumber:Pt,findKey:CI,global:sI,isContextDefined:QI,ALPHABET:EI,generateString:jt,isSpecCompliantForm:Wt,toJSONObject:Zt,isAsyncFn:Vt,isThenable:Xt};function K(A,I,t,e,g){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=A,this.name="AxiosError",I&&(this.code=I),t&&(this.config=t),e&&(this.request=e),g&&(this.response=g)}B.inherits(K,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:B.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var aI=K.prototype,cI={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(A=>{cI[A]={value:A}});Object.defineProperties(K,cI);Object.defineProperty(aI,"isAxiosError",{value:!0});K.from=(A,I,t,e,g,i)=>{let r=Object.create(aI);return B.toFlatObject(A,r,function(a){return a!==Error.prototype},s=>s!=="isAxiosError"),K.call(r,A.message,I,t,e,g),r.cause=A,r.name=A.name,i&&Object.assign(r,i),r};var l=K;var nA=null;function UA(A){return B.isPlainObject(A)||B.isArray(A)}function lI(A){return B.endsWith(A,"[]")?A.slice(0,-2):A}function fI(A,I,t){return A?A.concat(I).map(function(g,i){return g=lI(g),!t&&i?"["+g+"]":g}).join(t?".":""):I}function zt(A){return B.isArray(A)&&!A.some(UA)}var _t=B.toFlatObject(B,{},null,function(I){return/^is[A-Z]/.test(I)});function vt(A,I,t){if(!B.isObject(A))throw new TypeError("target must be an object");I=I||new(nA||FormData),t=B.toFlatObject(t,{metaTokens:!0,dots:!1,indexes:!1},!1,function(c,u){return!B.isUndefined(u[c])});let e=t.metaTokens,g=t.visitor||C,i=t.dots,r=t.indexes,a=(t.Blob||typeof Blob<"u"&&Blob)&&B.isSpecCompliantForm(I);if(!B.isFunction(g))throw new TypeError("visitor must be a function");function n(E){if(E===null)return"";if(B.isDate(E))return E.toISOString();if(!a&&B.isBlob(E))throw new l("Blob is not supported. Use a Buffer instead.");return B.isArrayBuffer(E)||B.isTypedArray(E)?a&&typeof Blob=="function"?new Blob([E]):Buffer.from(E):E}function C(E,c,u){let d=E;if(E&&!u&&typeof E=="object"){if(B.endsWith(c,"{}"))c=e?c:c.slice(0,-2),E=JSON.stringify(E);else if(B.isArray(E)&&zt(E)||(B.isFileList(E)||B.endsWith(c,"[]"))&&(d=B.toArray(E)))return c=lI(c),d.forEach(function(N,It){!(B.isUndefined(N)||N===null)&&I.append(r===!0?fI([c],It,i):r===null?c:c+"[]",n(N))}),!1}return UA(E)?!0:(I.append(fI(u,c,i),n(E)),!1)}let o=[],f=Object.assign(_t,{defaultVisitor:C,convertValue:n,isVisitable:UA});function Q(E,c){if(!B.isUndefined(E)){if(o.indexOf(E)!==-1)throw Error("Circular reference detected in "+c.join("."));o.push(E),B.forEach(E,function(d,R){(!(B.isUndefined(d)||d===null)&&g.call(I,d,B.isString(R)?R.trim():R,c,f))===!0&&Q(d,c?c.concat(R):[R])}),o.pop()}}if(!B.isObject(A))throw new TypeError("data must be an object");return Q(A),I}var L=vt;function DI(A){let I={"!":"%2521","\'":"%2527","(":"%2528",")":"%2529","~":"%257E","%2520":"+","%2500":"\\0"};return encodeURIComponent(A).replace(/[!\'()~]|%2520|%2500/g,function(e){return I[e]})}function uI(A,I){this._pairs=[],A&&L(A,this,I)}var hI=uI.prototype;hI.append=function(I,t){this._pairs.push([I,t])};hI.toString=function(I){let t=I?function(e){return I.call(this,e,DI)}:DI;return this._pairs.map(function(g){return t(g[0])+"="+t(g[1])},"").join("&")};var EA=uI;function $t(A){return encodeURIComponent(A).replace(/%253A/gi,":").replace(/%2524/g,"$").replace(/%252C/gi,",").replace(/%2520/g,"+").replace(/%255B/gi,"[").replace(/%255D/gi,"]")}function X(A,I,t){if(!I)return A;let e=t&&t.encode||$t,g=t&&t.serialize,i;if(g?i=g(I,t):i=B.isURLSearchParams(I)?I.toString():new EA(I,t).toString(e),i){let r=A.indexOf("%23");r!==-1&&(A=A.slice(0,r)),A+=(A.indexOf("?")===-1?"?":"&")+i}return A}var GA=class{constructor(){this.handlers=[]}use(I,t,e){return this.handlers.push({fulfilled:I,rejected:t,synchronous:e?e.synchronous:!1,runWhen:e?e.runWhen:null}),this.handlers.length-1}eject(I){this.handlers[I]&&(this.handlers[I]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(I){B.forEach(this.handlers,function(e){e!==null&&I(e)})}},kA=GA;var aA={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1};var dI=typeof URLSearchParams<"u"?URLSearchParams:EA;var yI=typeof FormData<"u"?FormData:null;var wI=typeof Blob<"u"?Blob:null;var mI={isBrowser:!0,classes:{URLSearchParams:dI,FormData:yI,Blob:wI},protocols:["http","https","file","blob","url","data"]};var LA={};et(LA,{hasBrowserEnv:()=>pI,hasStandardBrowserEnv:()=>Ae,hasStandardBrowserWebWorkerEnv:()=>Ie});var pI=typeof window<"u"&&typeof document<"u",Ae=(A=>pI&&["ReactNative","NativeScript","NS"].indexOf(A)<0)(typeof navigator<"u"&&navigator.product),Ie=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function";var w={...LA,...mI};function JA(A,I){return L(A,new w.classes.URLSearchParams,Object.assign({visitor:function(t,e,g,i){return w.isNode&&B.isBuffer(t)?(this.append(e,t.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},I))}function te(A){return B.matchAll(/\\w+|\\[(\\w*)]/g,A).map(I=>I[0]==="[]"?"":I[1]||I[0])}function ee(A){let I={},t=Object.keys(A),e,g=t.length,i;for(e=0;e<g;e++)i=t[e],I[i]=A[i];return I}function ge(A){function I(t,e,g,i){let r=t[i++],s=Number.isFinite(+r),a=i>=t.length;return r=!r&&B.isArray(g)?g.length:r,a?(B.hasOwnProp(g,r)?g[r]=[g[r],e]:g[r]=e,!s):((!g[r]||!B.isObject(g[r]))&&(g[r]=[]),I(t,e,g[r],i)&&B.isArray(g[r])&&(g[r]=ee(g[r])),!s)}if(B.isFormData(A)&&B.isFunction(A.entries)){let t={};return B.forEachEntry(A,(e,g)=>{I(te(e),g,t,0)}),t}return null}var cA=ge;function re(A,I,t){if(B.isString(A))try{return(I||JSON.parse)(A),B.trim(A)}catch(e){if(e.name!=="SyntaxError")throw e}return(t||JSON.stringify)(A)}var HA={transitional:aA,adapter:["xhr","http"],transformRequest:[function(I,t){let e=t.getContentType()||"",g=e.indexOf("application/json")>-1,i=B.isObject(I);if(i&&B.isHTMLForm(I)&&(I=new FormData(I)),B.isFormData(I))return g&&g?JSON.stringify(cA(I)):I;if(B.isArrayBuffer(I)||B.isBuffer(I)||B.isStream(I)||B.isFile(I)||B.isBlob(I))return I;if(B.isArrayBufferView(I))return I.buffer;if(B.isURLSearchParams(I))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),I.toString();let s;if(i){if(e.indexOf("application/x-www-form-urlencoded")>-1)return JA(I,this.formSerializer).toString();if((s=B.isFileList(I))||e.indexOf("multipart/form-data")>-1){let a=this.env&&this.env.FormData;return L(s?{"files[]":I}:I,a&&new a,this.formSerializer)}}return i||g?(t.setContentType("application/json",!1),re(I)):I}],transformResponse:[function(I){let t=this.transitional||HA.transitional,e=t&&t.forcedJSONParsing,g=this.responseType==="json";if(I&&B.isString(I)&&(e&&!this.responseType||g)){let r=!(t&&t.silentJSONParsing)&&g;try{return JSON.parse(I)}catch(s){if(r)throw s.name==="SyntaxError"?l.from(s,l.ERR_BAD_RESPONSE,this,null,this.response):s}}return I}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:w.classes.FormData,Blob:w.classes.Blob},validateStatus:function(I){return I>=200&&I<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};B.forEach(["delete","get","head","post","put","patch"],A=>{HA.headers[A]={}});var O=HA;var ie=B.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),SI=A=>{let I={},t,e,g;return A&&A.split(`%0A`).forEach(function(r){g=r.indexOf(":"),t=r.substring(0,g).trim().toLowerCase(),e=r.substring(g+1).trim(),!(!t||I[t]&&ie[t])&&(t==="set-cookie"?I[t]?I[t].push(e):I[t]=[e]:I[t]=I[t]?I[t]+", "+e:e)}),I};var FI=Symbol("internals");function z(A){return A&&String(A).trim().toLowerCase()}function fA(A){return A===!1||A==null?A:B.isArray(A)?A.map(fA):String(A)}function oe(A){let I=Object.create(null),t=/([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g,e;for(;e=t.exec(A);)I[e[1]]=e[2];return I}var Be=A=>/^[-_a-zA-Z0-9^`|~,!%23$%&\'*+.]+$/.test(A.trim());function YA(A,I,t,e,g){if(B.isFunction(e))return e.call(this,I,t);if(g&&(I=t),!!B.isString(I)){if(B.isString(e))return I.indexOf(e)!==-1;if(B.isRegExp(e))return e.test(I)}}function Ce(A){return A.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g,(I,t,e)=>t.toUpperCase()+e)}function se(A,I){let t=B.toCamelCase(" "+I);["get","set","has"].forEach(e=>{Object.defineProperty(A,e+t,{value:function(g,i,r){return this[e].call(this,I,g,i,r)},configurable:!0})})}var T=class{constructor(I){I&&this.set(I)}set(I,t,e){let g=this;function i(s,a,n){let C=z(a);if(!C)throw new Error("header name must be a non-empty string");let o=B.findKey(g,C);(!o||g[o]===void 0||n===!0||n===void 0&&g[o]!==!1)&&(g[o||a]=fA(s))}let r=(s,a)=>B.forEach(s,(n,C)=>i(n,C,a));return B.isPlainObject(I)||I instanceof this.constructor?r(I,t):B.isString(I)&&(I=I.trim())&&!Be(I)?r(SI(I),t):I!=null&&i(t,I,e),this}get(I,t){if(I=z(I),I){let e=B.findKey(this,I);if(e){let g=this[e];if(!t)return g;if(t===!0)return oe(g);if(B.isFunction(t))return t.call(this,g,e);if(B.isRegExp(t))return t.exec(g);throw new TypeError("parser must be boolean|regexp|function")}}}has(I,t){if(I=z(I),I){let e=B.findKey(this,I);return!!(e&&this[e]!==void 0&&(!t||YA(this,this[e],e,t)))}return!1}delete(I,t){let e=this,g=!1;function i(r){if(r=z(r),r){let s=B.findKey(e,r);s&&(!t||YA(e,e[s],s,t))&&(delete e[s],g=!0)}}return B.isArray(I)?I.forEach(i):i(I),g}clear(I){let t=Object.keys(this),e=t.length,g=!1;for(;e--;){let i=t[e];(!I||YA(this,this[i],i,I,!0))&&(delete this[i],g=!0)}return g}normalize(I){let t=this,e={};return B.forEach(this,(g,i)=>{let r=B.findKey(e,i);if(r){t[r]=fA(g),delete t[i];return}let s=I?Ce(i):String(i).trim();s!==i&&delete t[i],t[s]=fA(g),e[s]=!0}),this}concat(...I){return this.constructor.concat(this,...I)}toJSON(I){let t=Object.create(null);return B.forEach(this,(e,g)=>{e!=null&&e!==!1&&(t[g]=I&&B.isArray(e)?e.join(", "):e)}),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([I,t])=>I+": "+t).join(`%0A`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(I){return I instanceof this?I:new this(I)}static concat(I,...t){let e=new this(I);return t.forEach(g=>e.set(g)),e}static accessor(I){let e=(this[FI]=this[FI]={accessors:{}}).accessors,g=this.prototype;function i(r){let s=z(r);e[s]||(se(g,r),e[s]=!0)}return B.isArray(I)?I.forEach(i):i(I),this}};T.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);B.reduceDescriptors(T.prototype,({value:A},I)=>{let t=I[0].toUpperCase()+I.slice(1);return{get:()=>A,set(e){this[t]=e}}});B.freezeMethods(T);var m=T;function _(A,I){let t=this||O,e=I||t,g=m.from(e.headers),i=e.data;return B.forEach(A,function(s){i=s.call(t,i,g.normalize(),I?I.status:void 0)}),g.normalize(),i}function v(A){return!!(A&&A.__CANCEL__)}function RI(A,I,t){l.call(this,A??"canceled",l.ERR_CANCELED,I,t),this.name="CanceledError"}B.inherits(RI,l,{__CANCEL__:!0});var J=RI;function bA(A,I,t){let e=t.config.validateStatus;!t.status||!e||e(t.status)?A(t):I(new l("Request failed with status code "+t.status,[l.ERR_BAD_REQUEST,l.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t))}var NI=w.hasStandardBrowserEnv?{write(A,I,t,e,g,i){let r=[A+"="+encodeURIComponent(I)];B.isNumber(t)&&r.push("expires="+new Date(t).toGMTString()),B.isString(e)&&r.push("path="+e),B.isString(g)&&r.push("domain="+g),i===!0&&r.push("secure"),document.cookie=r.join("; ")},read(A){let I=document.cookie.match(new RegExp("(^|;\\\\s*)("+A+")=([^;]*)"));return I?decodeURIComponent(I[3]):null},remove(A){this.write(A,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function MA(A){return/^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(A)}function qA(A,I){return I?A.replace(/\\/+$/,"")+"/"+I.replace(/^\\/+/,""):A}function $(A,I){return A&&!MA(I)?qA(A,I):I}var UI=w.hasStandardBrowserEnv?function(){let I=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a"),e;function g(i){let r=i;return I&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\\?/,""):"",hash:t.hash?t.hash.replace(/^%23/,""):"",hostname:t.hostname,port:t.port,pathname:t.pathname.charAt(0)==="/"?t.pathname:"/"+t.pathname}}return e=g(window.location.href),function(r){let s=B.isString(r)?g(r):r;return s.protocol===e.protocol&&s.host===e.host}}():function(){return function(){return!0}}();function KA(A){let I=/^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(A);return I&&I[1]||""}function Qe(A,I){A=A||10;let t=new Array(A),e=new Array(A),g=0,i=0,r;return I=I!==void 0?I:1e3,function(a){let n=Date.now(),C=e[i];r||(r=n),t[g]=a,e[g]=n;let o=i,f=0;for(;o!==g;)f+=t[o++],o=o%A;if(g=(g+1)%A,g===i&&(i=(i+1)%A),n-r<I)return;let Q=C&&n-C;return Q?Math.round(f*1e3/Q):void 0}}var GI=Qe;function kI(A,I){let t=0,e=GI(50,250);return g=>{let i=g.loaded,r=g.lengthComputable?g.total:void 0,s=i-t,a=e(s),n=i<=r;t=i;let C={loaded:i,total:r,progress:r?i/r:void 0,bytes:s,rate:a||void 0,estimated:a&&r&&n?(r-i)/a:void 0,event:g};C[I?"download":"upload"]=!0,A(C)}}var ne=typeof XMLHttpRequest<"u",LI=ne&&function(A){return new Promise(function(t,e){let g=A.data,i=m.from(A.headers).normalize(),{responseType:r,withXSRFToken:s}=A,a;function n(){A.cancelToken&&A.cancelToken.unsubscribe(a),A.signal&&A.signal.removeEventListener("abort",a)}let C;if(B.isFormData(g)){if(w.hasStandardBrowserEnv||w.hasStandardBrowserWebWorkerEnv)i.setContentType(!1);else if((C=i.getContentType())!==!1){let[c,...u]=C?C.split(";").map(d=>d.trim()).filter(Boolean):[];i.setContentType([c||"multipart/form-data",...u].join("; "))}}let o=new XMLHttpRequest;if(A.auth){let c=A.auth.username||"",u=A.auth.password?unescape(encodeURIComponent(A.auth.password)):"";i.set("Authorization","Basic "+btoa(c+":"+u))}let f=$(A.baseURL,A.url);o.open(A.method.toUpperCase(),X(f,A.params,A.paramsSerializer),!0),o.timeout=A.timeout;function Q(){if(!o)return;let c=m.from("getAllResponseHeaders"in o&&o.getAllResponseHeaders()),d={data:!r||r==="text"||r==="json"?o.responseText:o.response,status:o.status,statusText:o.statusText,headers:c,config:A,request:o};bA(function(N){t(N),n()},function(N){e(N),n()},d),o=null}if("onloadend"in o?o.onloadend=Q:o.onreadystatechange=function(){!o||o.readyState!==4||o.status===0&&!(o.responseURL&&o.responseURL.indexOf("file:")===0)||setTimeout(Q)},o.onabort=function(){o&&(e(new l("Request aborted",l.ECONNABORTED,A,o)),o=null)},o.onerror=function(){e(new l("Network Error",l.ERR_NETWORK,A,o)),o=null},o.ontimeout=function(){let u=A.timeout?"timeout of "+A.timeout+"ms exceeded":"timeout exceeded",d=A.transitional||aA;A.timeoutErrorMessage&&(u=A.timeoutErrorMessage),e(new l(u,d.clarifyTimeoutError?l.ETIMEDOUT:l.ECONNABORTED,A,o)),o=null},w.hasStandardBrowserEnv&&(s&&B.isFunction(s)&&(s=s(A)),s||s!==!1&&UI(f))){let c=A.xsrfHeaderName&&A.xsrfCookieName&&NI.read(A.xsrfCookieName);c&&i.set(A.xsrfHeaderName,c)}g===void 0&&i.setContentType(null),"setRequestHeader"in o&&B.forEach(i.toJSON(),function(u,d){o.setRequestHeader(d,u)}),B.isUndefined(A.withCredentials)||(o.withCredentials=!!A.withCredentials),r&&r!=="json"&&(o.responseType=A.responseType),typeof A.onDownloadProgress=="function"&&o.addEventListener("progress",kI(A.onDownloadProgress,!0)),typeof A.onUploadProgress=="function"&&o.upload&&o.upload.addEventListener("progress",kI(A.onUploadProgress)),(A.cancelToken||A.signal)&&(a=c=>{o&&(e(!c||c.type?new J(null,A,o):c),o.abort(),o=null)},A.cancelToken&&A.cancelToken.subscribe(a),A.signal&&(A.signal.aborted?a():A.signal.addEventListener("abort",a)));let E=KA(f);if(E&&w.protocols.indexOf(E)===-1){e(new l("Unsupported protocol "+E+":",l.ERR_BAD_REQUEST,A));return}o.send(g||null)})};var OA={http:nA,xhr:LI};B.forEach(OA,(A,I)=>{if(A){try{Object.defineProperty(A,"name",{value:I})}catch{}Object.defineProperty(A,"adapterName",{value:I})}});var JI=A=>`- ${A}`,Ee=A=>B.isFunction(A)||A===null||A===!1,lA={getAdapter:A=>{A=B.isArray(A)?A:[A];let{length:I}=A,t,e,g={};for(let i=0;i<I;i++){t=A[i];let r;if(e=t,!Ee(t)&&(e=OA[(r=String(t)).toLowerCase()],e===void 0))throw new l(`Unknown adapter \'${r}\'`);if(e)break;g[r||"%23"+i]=e}if(!e){let i=Object.entries(g).map(([s,a])=>`adapter ${s} `+(a===!1?"is not supported by the environment":"is not available in the build")),r=I?i.length>1?`since :%0A`+i.map(JI).join(`%0A`):" "+JI(i[0]):"as no adapter specified";throw new l("There is no suitable adapter to dispatch the request "+r,"ERR_NOT_SUPPORT")}return e},adapters:OA};function TA(A){if(A.cancelToken&&A.cancelToken.throwIfRequested(),A.signal&&A.signal.aborted)throw new J(null,A)}function DA(A){return TA(A),A.headers=m.from(A.headers),A.data=_.call(A,A.transformRequest),["post","put","patch"].indexOf(A.method)!==-1&&A.headers.setContentType("application/x-www-form-urlencoded",!1),lA.getAdapter(A.adapter||O.adapter)(A).then(function(e){return TA(A),e.data=_.call(A,A.transformResponse,e),e.headers=m.from(e.headers),e},function(e){return v(e)||(TA(A),e&&e.response&&(e.response.data=_.call(A,A.transformResponse,e.response),e.response.headers=m.from(e.response.headers))),Promise.reject(e)})}var HI=A=>A instanceof m?A.toJSON():A;function G(A,I){I=I||{};let t={};function e(n,C,o){return B.isPlainObject(n)&&B.isPlainObject(C)?B.merge.call({caseless:o},n,C):B.isPlainObject(C)?B.merge({},C):B.isArray(C)?C.slice():C}function g(n,C,o){if(B.isUndefined(C)){if(!B.isUndefined(n))return e(void 0,n,o)}else return e(n,C,o)}function i(n,C){if(!B.isUndefined(C))return e(void 0,C)}function r(n,C){if(B.isUndefined(C)){if(!B.isUndefined(n))return e(void 0,n)}else return e(void 0,C)}function s(n,C,o){if(o in I)return e(n,C);if(o in A)return e(void 0,n)}let a={url:i,method:i,data:i,baseURL:r,transformRequest:r,transformResponse:r,paramsSerializer:r,timeout:r,timeoutMessage:r,withCredentials:r,withXSRFToken:r,adapter:r,responseType:r,xsrfCookieName:r,xsrfHeaderName:r,onUploadProgress:r,onDownloadProgress:r,decompress:r,maxContentLength:r,maxBodyLength:r,beforeRedirect:r,transport:r,httpAgent:r,httpsAgent:r,cancelToken:r,socketPath:r,responseEncoding:r,validateStatus:s,headers:(n,C)=>g(HI(n),HI(C),!0)};return B.forEach(Object.keys(Object.assign({},A,I)),function(C){let o=a[C]||g,f=o(A[C],I[C],C);B.isUndefined(f)&&o!==s||(t[C]=f)}),t}var uA="1.6.2";var xA={};["object","boolean","number","function","string","symbol"].forEach((A,I)=>{xA[A]=function(e){return typeof e===A||"a"+(I<1?"n ":" ")+A}});var YI={};xA.transitional=function(I,t,e){function g(i,r){return"[Axios v"+uA+"] Transitional option \'"+i+"\'"+r+(e?". "+e:"")}return(i,r,s)=>{if(I===!1)throw new l(g(r," has been removed"+(t?" in "+t:"")),l.ERR_DEPRECATED);return t&&!YI[r]&&(YI[r]=!0,console.warn(g(r," has been deprecated since v"+t+" and will be removed in the near future"))),I?I(i,r,s):!0}};function ae(A,I,t){if(typeof A!="object")throw new l("options must be an object",l.ERR_BAD_OPTION_VALUE);let e=Object.keys(A),g=e.length;for(;g-- >0;){let i=e[g],r=I[i];if(r){let s=A[i],a=s===void 0||r(s,i,A);if(a!==!0)throw new l("option "+i+" must be "+a,l.ERR_BAD_OPTION_VALUE);continue}if(t!==!0)throw new l("Unknown option "+i,l.ERR_BAD_OPTION)}}var hA={assertOptions:ae,validators:xA};var H=hA.validators,x=class{constructor(I){this.defaults=I,this.interceptors={request:new kA,response:new kA}}request(I,t){typeof I=="string"?(t=t||{},t.url=I):t=I||{},t=G(this.defaults,t);let{transitional:e,paramsSerializer:g,headers:i}=t;e!==void 0&&hA.assertOptions(e,{silentJSONParsing:H.transitional(H.boolean),forcedJSONParsing:H.transitional(H.boolean),clarifyTimeoutError:H.transitional(H.boolean)},!1),g!=null&&(B.isFunction(g)?t.paramsSerializer={serialize:g}:hA.assertOptions(g,{encode:H.function,serialize:H.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let r=i&&B.merge(i.common,i[t.method]);i&&B.forEach(["delete","get","head","post","put","patch","common"],E=>{delete i[E]}),t.headers=m.concat(r,i);let s=[],a=!0;this.interceptors.request.forEach(function(c){typeof c.runWhen=="function"&&c.runWhen(t)===!1||(a=a&&c.synchronous,s.unshift(c.fulfilled,c.rejected))});let n=[];this.interceptors.response.forEach(function(c){n.push(c.fulfilled,c.rejected)});let C,o=0,f;if(!a){let E=[DA.bind(this),void 0];for(E.unshift.apply(E,s),E.push.apply(E,n),f=E.length,C=Promise.resolve(t);o<f;)C=C.then(E[o++],E[o++]);return C}f=s.length;let Q=t;for(o=0;o<f;){let E=s[o++],c=s[o++];try{Q=E(Q)}catch(u){c.call(this,u);break}}try{C=DA.call(this,Q)}catch(E){return Promise.reject(E)}for(o=0,f=n.length;o<f;)C=C.then(n[o++],n[o++]);return C}getUri(I){I=G(this.defaults,I);let t=$(I.baseURL,I.url);return X(t,I.params,I.paramsSerializer)}};B.forEach(["delete","get","head","options"],function(I){x.prototype[I]=function(t,e){return this.request(G(e||{},{method:I,url:t,data:(e||{}).data}))}});B.forEach(["post","put","patch"],function(I){function t(e){return function(i,r,s){return this.request(G(s||{},{method:I,headers:e?{"Content-Type":"multipart/form-data"}:{},url:i,data:r}))}}x.prototype[I]=t(),x.prototype[I+"Form"]=t(!0)});var AA=x;var PA=class A{constructor(I){if(typeof I!="function")throw new TypeError("executor must be a function.");let t;this.promise=new Promise(function(i){t=i});let e=this;this.promise.then(g=>{if(!e._listeners)return;let i=e._listeners.length;for(;i-- >0;)e._listeners[i](g);e._listeners=null}),this.promise.then=g=>{let i,r=new Promise(s=>{e.subscribe(s),i=s}).then(g);return r.cancel=function(){e.unsubscribe(i)},r},I(function(i,r,s){e.reason||(e.reason=new J(i,r,s),t(e.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(I){if(this.reason){I(this.reason);return}this._listeners?this._listeners.push(I):this._listeners=[I]}unsubscribe(I){if(!this._listeners)return;let t=this._listeners.indexOf(I);t!==-1&&this._listeners.splice(t,1)}static source(){let I;return{token:new A(function(g){I=g}),cancel:I}}},bI=PA;function jA(A){return function(t){return A.apply(null,t)}}function WA(A){return B.isObject(A)&&A.isAxiosError===!0}var ZA={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ZA).forEach(([A,I])=>{ZA[I]=A});var MI=ZA;function qI(A){let I=new AA(A),t=W(AA.prototype.request,I);return B.extend(t,AA.prototype,I,{allOwnKeys:!0}),B.extend(t,I,null,{allOwnKeys:!0}),t.create=function(g){return qI(G(A,g))},t}var h=qI(O);h.Axios=AA;h.CanceledError=J;h.CancelToken=bI;h.isCancel=v;h.VERSION=uA;h.toFormData=L;h.AxiosError=l;h.Cancel=h.CanceledError;h.all=function(I){return Promise.all(I)};h.spread=jA;h.isAxiosError=WA;h.mergeConfig=G;h.AxiosHeaders=m;h.formToJSON=A=>cA(B.isHTMLForm(A)?new FormData(A):A);h.getAdapter=lA.getAdapter;h.HttpStatusCode=MI;h.default=h;var dA=h;var{Axios:oi,AxiosError:Bi,CanceledError:Ci,isCancel:si,CancelToken:Qi,VERSION:ni,all:Ei,Cancel:ai,isAxiosError:ci,spread:fi,toFormData:li,AxiosHeaders:Di,HttpStatusCode:ui,formToJSON:hi,getAdapter:di,mergeConfig:yi}=dA;var IA,k,XA,VA={env:{emscripten_notify_memory_growth:function(A){XA=new Uint8Array(k.exports.memory.buffer)}}},yA=class{init(){return IA||(typeof fetch<"u"?IA=fetch("data:application/wasm;base64,"+KI).then(I=>I.arrayBuffer()).then(I=>WebAssembly.instantiate(I,VA)).then(this._init):IA=WebAssembly.instantiate(Buffer.from(KI,"base64"),VA).then(this._init),IA)}_init(I){k=I.instance,VA.env.emscripten_notify_memory_growth(0)}decode(I,t=0){if(!k)throw new Error("ZSTDDecoder: Await .init() before decoding.");let e=I.byteLength,g=k.exports.malloc(e);XA.set(I,g),t=t||Number(k.exports.ZSTD_findDecompressedSize(g,e));let i=k.exports.malloc(t),r=k.exports.ZSTD_decompress(i,t,g,e),s=XA.slice(i,i+r);return k.exports.free(g),k.exports.free(i),s}},KI="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IARrdnE2AgAgARAPGiAAIAJBCGo2AgQLzgEBBn9Bun8hCgJAIAIoAgQiCCACKAIAIglqIg0gASAAa0sNAEFsIQogCSAEIAMoAgAiC2tLDQAgACAJaiIEIAIoAggiDGshAiAAIAFBIGsiACALIAlBABAgIAMgCSALajYCAAJAAkAgBCAFayAMTwRAIAIhBQwBCyAMIAQgBmtLDQIgByAHIAIgBWsiAmoiASAIak8EQCAEIAEgCBAKGgwCCyACIAhqIQggBCABQQAgAmsQCiACayEECyAEIAAgBSAIQQEQIAsgDSEKCyAKC8cEAQJ/IAAgA2ohBgJAIANBB0wEQANAIAAgBk8NAiAAIAItAAA6AAAgAEEBaiEAIAJBAWohAgwACwALIARBAUYEQAJAIAAgAmsiBUEHTQRAIAAgAi0AADoAACAAIAItAAE6AAEgACACLQACOgACIAAgAi0AAzoAAyAAIAIgBUECdCIFQcAeaigCAGoiAigAADYABCACIAVB4B5qKAIAayECDAELIAAgAikAADcAAAsgAkEIaiECIABBCGohAAsgASAGTwRAIAAgA2ohASAEQQFHIAAgAmtBD0pyRQRAA0AgACACKQAANwAAIAJBCGohAiAAQQhqIgAgAUkNAAwDCwALIAAgAikAADcAACAAIAIpAAg3AAggA0ERSQ0BIABBEGohAANAIAAgAikAEDcAACAAIAIpABg3AAggACACKQAgNwAQIAAgAikAKDcAGCACQSBqIQIgAEEgaiIAIAFJDQALDAELAkAgACABSwRAIAAhAQwBCyABIABrIQUCQCAEQQFHIAAgAmtBD0pyRQRAIAIhAwNAIAAgAykAADcAACADQQhqIQMgAEEIaiIAIAFJDQALDAELIAAgAikAADcAACAAIAIpAAg3AAggBUERSA0AIABBEGohACACIQMDQCAAIAMpABA3AAAgACADKQAYNwAIIAAgAykAIDcAECAAIAMpACg3ABggA0EgaiEDIABBIGoiACABSQ0ACwsgAiAFaiECCwNAIAEgBk8NASABIAItAAA6AAAgAUEBaiEBIAJBAWohAgwACwALC64HAgV/AX4jAEGAAWsiESQAIBEgAzYCfEF/IQ8CQAJAAkACQAJAIAIOBAEAAwIECyAGRQRAQbh/IQ8MBAtBbCEPIAUtAAAiAiADSw0DIAggAkEC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IAggH2shBgNAAkAgBiAPTgRAQQAhAwNAIANBA0YNAiAFIANBAnQiAmpBrNABaiACIARqKAJkNgIAIANBAWohAwwACwALAkACQAJAIAQoAtwBIgMgBEHwAGogBkEHcUEMbGoiCCgCACIMaiIQIBdLDQAgByAIKAIEIgsgDGoiCmogIUsNACAKQSBqIBYgB2tNDQELIAQgCCgCCDYCKCAEIAgpAgA3AyAgByAWIARBIGogBEHcAWogFyASIBggGhAfIQoMAQsgByAMaiECIAgoAgghCCAHIAMpAAA3AAAgByADKQAINwAIAkAgDEERSQ0AIAcgAykAEDcAECAHIAMpABg3ABggDEEQa0ERSA0AIANBEGohAyAHQSBqIQwDQCAMIAMpABA3AAAgDCADKQAYNwAIIAwgAykAIDcAECAMIAMpACg3ABggA0EgaiEDIAxBIGoiDCACSQ0ACwsgAiAIayEDIAQgEDYC3AEgAiASayAISQRAIAggAiAYa0sNByAaIBogAyASayIDaiIMIAtqTwRAIAIgDCALEAoaDAILIAMgC2ohCyACIAxBACADaxAKIANrIQIgEiEDCyAIQRBPBEAgAiADKQAANwAAIAIgAykACDcACCALQRFIDQEgAiALaiEIIAJBEGohAgNAIAIgAykAEDcAACACIAMpABg3AAggAiADKQAgNwAQIAIgAykAKDcAGCADQSBqIQMgAkEgaiICIAhJDQALDAELAkAgCEEHTQRAIAIgAy0AADoAACACIAMtAAE6AAEgAiADLQACOgACIAIgAy0AAzoAAyACIAMgCEECdCIIQcAeaigCAGoiAygAADYABCADIAhB4B5qKAIAayEDDAELIAIgAykAADcAAAsgC0EJSQ0AIAIgC2ohDCACQQhqIgggA0EIaiIDa0EPTARAA0AgCCADKQAANwAAIANBCGohAyAIQQhqIgggDEkNAAwCCwALIAggAykAADcAACAIIAMpAAg3AAggC0EZSA0AIAJBGGohAgNAIAIgAykAEDcAACACIAMpABg3AAggAiADKQAgNwAQIAIgAykAKDcAGCADQSBqIQMgAkEgaiICIAxJDQALCyAKQYh/SwRAIAohCQwGBSAGQQFqIQYgByAKaiEHDAILAAsLIAQoAtwBIQMLQbp/IQkgFyADayICIBYgB2tLDQIgBwR/IAcgAyACEAIgAmoFQQALIA5rIQkMAgsgBUEANgKc6wELIAQgBSgC8OoBIgM2AtwBIAkgDmohDCADIAUoAoDrAWohEAJAIA9FBEAgDiEGDAELIAUoArjpASENIAUoArTpASETIAUoArDpASESIAVBATYChOoBQQAhAwNAIANBA0cEQCAEIANBAnQiAmogAiAFakGs0AFqKAIANgKcASADQQFqIQMMAQsLQWwhCSAEQfAAaiICIAcgBhANQYh/Sw0BIDEgAiAFKAIAEB4gMCACIAUoAggQHiAvIAIgBSgCBBAeIAxBIGshGCAOIQYDQCAEKAKIASAEKAKEAUEDdGopAgAiQKciCkEQdiIZQf8BcSELIAQoApgBIAQoApQBQQN0aikCACJBpyIWQRB2Ih9B/wFxIRogBCgCkAEgBCgCjAFBA3RqKQIAIkJCIIinIQcgQUIgiCBAQiCIpyEDAkAgQkIQiKciCEH/AXEiAkECTwRAAkAgAkEZSSA/QoGAgBBUckUEQCAEQSAgBCgCdCIIayIRIAIgAiARSxsiFyAIajYCdCAHIAQoAnAgCHRBACAXa3YgAiAXayIXdGohCCAEQfAAahAPGiACIBFNDQEgBCAEKAJ0IgIgF2o2AnQgBCgCcCACdEEAIBdrdiAIaiEIDAELIAQgAiAEKAJ0IhFqNgJ0IAQoAnAgEXRBACAIa3YgB2ohCCAEQfAAahAPGgsgBCkCnAEhRCAEIAg2ApwBIAQgRDcCoAEMAQsCQCACRQRAIAMEQCAEKAKcASEIDAMLIAQoAqABIQgMAQsgBCAEKAJ0IgJBAWo2AnQCfyAHIANFaiAEKAJwIAJ0QR92aiICQQNGBEAgBCgCnAFBAWsMAQsgAkECdCAEaigCnAELIgdFIAdqIQggAkEBRwRAIAQgBCgCoAE2AqQBCwsgBCAEKAKcATYCoAEgBCAINgKcAQunIQIgQUKAgPwHg1BFBEAgBCAEKAJ0IgcgGmo2AnQgBCgCcCAHdEEAIB9rdiACaiECCyALIBpqQRRPBEAgBEHwAGoQDxoLIEBCgID8B4NQRQRAIAQgBCgCdCIHIAtqNgJ0IAQoAnAgB3RBACAZa3YgA2ohAwsgBEHwAGoQDxogBCAEKAJwIgdBACAKQRh2IgsgBCgCdGoiGmt2IAtBAnRBoB1qKAIAcSAKQf//A3FqNgKEASAEIBogFkEYdiIKaiILNgJ0IAQgCkECdEGgHWooAgAgB0EAIAtrdnEgFkH//wNxajYClAEgBEHwAGoQDxogBCBCpyIHQRh2IgogBCgCdGoiCzYCdCAEIApBAnRBoB1qKAIAIAQoAnBBACALa3ZxIAdB//8DcWo2AowBIAQgAzYCOCAEIAI2AjwgBCAINgJAAkACQAJAIAQoAtwBIgsgA2oiFiAQSw0AIAYgAiADaiIKaiAYSw0AIApBIGogDCAGa00NAQsgBCAEQUBrKAIANgIIIAQgBCkDODcDACAGIAwgBCAEQdwBaiAQIBIgEyANEB8hCgwBCyADIAZqIQcgBiALKQAANwAAIAYgCykACDcACAJAIANBEUkNACAGIAspABA3ABAgBiALKQAYNwAYIANBEGtBEUgNACALQRBqIQMgBkEgaiELA0AgCyADKQAQNwAAIAsgAykAGDcACCALIAMpACA3ABAgCyADKQAoNwAYIANBIGohAyALQSBqIgsgB0kNAAsLIAcgCGshAyAEIBY2AtwBIAcgEmsgCEkEQCAIIAcgE2tLDQQgDSANIAMgEmsiA2oiCyACak8EQCAHIAsgAhAKGgwCCyAHIAtBACADaxAKIAQgAiADaiICNgI8IANrIQcgEiEDCyAIQRBPBEAgByADKQAANwAAIAcgAykACDcACCACQRFIDQEgAiAHaiEIIAdBEGohAgNAIAIgAykAEDcAACACIAMpABg3AAggAiADKQAgNwAQIAIgAykAKDcAGCADQSBqIQMgAkEgaiICIAhJDQALDAELAkAgCEEHTQRAIAcgAy0AADoAACAHIAMtAAE6AAEgByADLQACOgACIAcgAy0AAzoAAyAHIAMgCEECdCIIQcAeaigCAGoiAygAADYABCADIAhB4B5qKAIAayEDDAELIAcgAykAADcAAAsgAkEJSQ0AIAIgB2ohCyAHQQhqIgggA0EIaiIDa0EPTARAA0AgCCADKQAANwAAIANBCGohAyAIQQhqIgggC0kNAAwCCwALIAggAykAADcAACAIIAMpAAg3AAggAkEZSA0AIAdBGGohAgNAIAIgAykAEDcAACACIAMpABg3AAggAiADKQAgNwAQIAIgAykAKDcAGCADQSBqIQMgAkEgaiICIAtJDQALCyAKQYh/SwRAIAohCQwDCyAGIApqIQYgBEHwAGoQDyEDIA9B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";var OI=new yA,TI=!1;async function ce(A,I){let t=null;typeof A!="string"?t=A.href:A.startsWith("http")?t=A:t=`${I}/${A}`,t.endsWith(".js")&&(t=t.substring(0,t.length-3)),t.endsWith(".wasm")&&(t=t.substring(0,t.length-5));let e=`${t}.wasm`,g=await dA.get(`${e}.zst`,{responseType:"arraybuffer"});TI||(await OI.init(),TI=!0);let r=OI.decode(new Uint8Array(g.data)).buffer;return(await import(`${t}.js`)).default({wasmBinary:r})}var xI=ce;var wA=new Map;async function fe(A,I){let t=A,e=A,g=null;return typeof A!="string"&&(t=new URL(A.href),e=t.href),wA.has(e)?g=await wA.get(e):(wA.set(e,xI(t,I)),g=await wA.get(e)),g}var PI=fe;var le={TextFile:"TextFile",BinaryFile:"BinaryFile",TextStream:"TextStream",BinaryStream:"BinaryStream",Image:"Image",Mesh:"Mesh",PolyData:"PolyData",JsonCompatible:"JsonCompatible"},D=le;var De={Int8:"int8",UInt8:"uint8",Int16:"int16",UInt16:"uint16",Int32:"int32",UInt32:"uint32",Int64:"int64",UInt64:"uint64",SizeValueType:"uint64",IdentifierType:"uint64",IndexValueType:"int64",OffsetValueType:"int64"},p=De;var ue={Float32:"float32",Float64:"float64",SpacePrecisionType:"float64"},P=ue;function he(A,I){let t=null;switch(A){case p.UInt8:{t=new Uint8Array(I);break}case p.Int8:{t=new Int8Array(I);break}case p.UInt16:{t=new Uint16Array(I);break}case p.Int16:{t=new Int16Array(I);break}case p.UInt32:{t=new Uint32Array(I);break}case p.Int32:{t=new Int32Array(I);break}case p.UInt64:{typeof globalThis.BigUint64Array=="function"?t=new BigUint64Array(I):t=new Uint8Array(I);break}case p.Int64:{typeof globalThis.BigInt64Array=="function"?t=new BigInt64Array(I):t=new Uint8Array(I);break}case P.Float32:{t=new Float32Array(I);break}case P.Float64:{t=new Float64Array(I);break}case"null":{t=null;break}case null:{t=null;break}default:throw new Error("Type is not supported as a TypedArray")}return t}var Y=he;var ZI=typeof globalThis.SharedArrayBuffer=="function",jI=new TextEncoder,WI=new TextDecoder("utf-8");function de(A,I){let t={flags:"r",encoding:"binary"},e=A.fs_open(I,t.flags),i=A.fs_stat(I).size,r=null;ZI?r=new SharedArrayBuffer(i):r=new ArrayBuffer(i);let s=new Uint8Array(r);return A.fs_read(e,s,0,i,0),A.fs_close(e),s}function VI(A,I,t){let e=null;ZI?e=new SharedArrayBuffer(t):e=new ArrayBuffer(t);let g=new Uint8Array(e),i=new Uint8Array(A.HEAPU8.buffer,I,t);return g.set(i),g}function y(A,I,t,e){let g=0;return I!==null&&(g=A.ccall("itk_wasm_input_array_alloc","number",["number","number","number","number"],[0,t,e,I.buffer.byteLength]),A.HEAPU8.set(new Uint8Array(I.buffer),g)),g}function j(A,I,t){let e=JSON.stringify(I),g=A.ccall("itk_wasm_input_json_alloc","number",["number","number","number"],[0,t,e.length]);A.writeAsciiToMemory(e,g,!1)}function S(A,I,t,e){let g=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,I,t]),i=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,I,t]),r=VI(A,g,i);return Y(e,r.buffer)}function zA(A,I){let t=A.ccall("itk_wasm_output_json_address","number",["number","number"],[0,I]),e=A.AsciiToString(t);return JSON.parse(e)}function ye(A,I,t,e){e!=null&&e.length>0&&e.forEach(function(n,C){switch(n.type){case D.TextStream:{let o=jI.encode(n.data.data),f=y(A,o,C,0),Q={size:o.buffer.byteLength,data:`data:application/vnd.itk.address,0:${f}`};j(A,Q,C);break}case D.JsonCompatible:{let o=jI.encode(JSON.stringify(n.data)),f=y(A,o,C,0),Q={size:o.buffer.byteLength,data:`data:application/vnd.itk.address,0:${f}`};j(A,Q,C);break}case D.BinaryStream:{let o=n.data.data,f=y(A,o,C,0),Q={size:o.buffer.byteLength,data:`data:application/vnd.itk.address,0:${f}`};j(A,Q,C);break}case D.TextFile:{A.fs_writeFile(n.data.path,n.data.data);break}case D.BinaryFile:{A.fs_writeFile(n.data.path,n.data.data);break}case D.Image:{let o=n.data,f=y(A,o.data,C,0),Q=y(A,o.direction,C,1),E=typeof o.metadata?.entries<"u"?JSON.stringify(Array.from(o.metadata.entries())):"[]",c={imageType:o.imageType,name:o.name,origin:o.origin,spacing:o.spacing,direction:`data:application/vnd.itk.address,0:${Q}`,size:o.size,data:`data:application/vnd.itk.address,0:${f}`,metadata:E};j(A,c,C);break}case D.Mesh:{let o=n.data,f=y(A,o.points,C,0),Q=y(A,o.cells,C,1),E=y(A,o.pointData,C,2),c=y(A,o.cellData,C,3),u={meshType:o.meshType,name:o.name,numberOfPoints:o.numberOfPoints,points:`data:application/vnd.itk.address,0:${f}`,numberOfCells:o.numberOfCells,cells:`data:application/vnd.itk.address,0:${Q}`,cellBufferSize:o.cellBufferSize,numberOfPointPixels:o.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${E}`,numberOfCellPixels:o.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${c}`};j(A,u,C);break}case D.PolyData:{let o=n.data,f=y(A,o.points,C,0),Q=y(A,o.vertices,C,1),E=y(A,o.lines,C,2),c=y(A,o.polygons,C,3),u=y(A,o.triangleStrips,C,4),d=y(A,o.pointData,C,5),R=y(A,o.pointData,C,6),N={polyDataType:o.polyDataType,name:o.name,numberOfPoints:o.numberOfPoints,points:`data:application/vnd.itk.address,0:${f}`,verticesBufferSize:o.verticesBufferSize,vertices:`data:application/vnd.itk.address,0:${Q}`,linesBufferSize:o.linesBufferSize,lines:`data:application/vnd.itk.address,0:${E}`,polygonsBufferSize:o.polygonsBufferSize,polygons:`data:application/vnd.itk.address,0:${c}`,triangleStripsBufferSize:o.triangleStripsBufferSize,triangleStrips:`data:application/vnd.itk.address,0:${u}`,numberOfPointPixels:o.numberOfPointPixels,pointData:`data:application/vnd.itk.address,0:${d}`,numberOfCellPixels:o.numberOfCellPixels,cellData:`data:application/vnd.itk.address,0:${R}`};j(A,N,C);break}default:throw Error("Unsupported input InterfaceType")}}),A.resetModuleStdout(),A.resetModuleStderr();let g=A.stackSave(),i=0;try{i=A.callMain(I.slice())}catch(n){throw typeof n=="number"&&(console.log("Exception while running pipeline:"),console.log("stdout:",A.getModuleStdout()),console.error("stderr:",A.getModuleStderr()),typeof A.getExceptionMessage<"u"?console.error("exception:",A.getExceptionMessage(n)):console.error("Build module in Debug mode for exception message information.")),n}finally{A.stackRestore(g)}let r=A.getModuleStdout(),s=A.getModuleStderr(),a=[];return t!=null&&t.length>0&&i===0&&t.forEach(function(n,C){let o=null;switch(n.type){case D.TextStream:{let Q=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,C,0]),E=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,C,0]),c=new Uint8Array(A.HEAPU8.buffer,Q,E);o={data:WI.decode(c)};break}case D.JsonCompatible:{let Q=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,C,0]),E=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,C,0]),c=new Uint8Array(A.HEAPU8.buffer,Q,E);o=JSON.parse(WI.decode(c));break}case D.BinaryStream:{let Q=A.ccall("itk_wasm_output_array_address","number",["number","number","number"],[0,C,0]),E=A.ccall("itk_wasm_output_array_size","number",["number","number","number"],[0,C,0]);o={data:VI(A,Q,E)};break}case D.TextFile:{o={path:n.data.path,data:A.fs_readFile(n.data.path,{encoding:"utf8"})};break}case D.BinaryFile:{o={path:n.data.path,data:de(A,n.data.path)};break}case D.Image:{let Q=zA(A,C);Q.data=S(A,C,0,Q.imageType.componentType),Q.direction=S(A,C,1,P.Float64),Q.metadata=new Map(Q.metadata),o=Q;break}case D.Mesh:{let Q=zA(A,C);Q.numberOfPoints>0?Q.points=S(A,C,0,Q.meshType.pointComponentType):Q.points=Y(Q.meshType.pointComponentType,new ArrayBuffer(0)),Q.numberOfCells>0?Q.cells=S(A,C,1,Q.meshType.cellComponentType):Q.cells=Y(Q.meshType.cellComponentType,new ArrayBuffer(0)),Q.numberOfPointPixels>0?Q.pointData=S(A,C,2,Q.meshType.pointPixelComponentType):Q.pointData=Y(Q.meshType.pointPixelComponentType,new ArrayBuffer(0)),Q.numberOfCellPixels>0?Q.cellData=S(A,C,3,Q.meshType.cellPixelComponentType):Q.cellData=Y(Q.meshType.cellPixelComponentType,new ArrayBuffer(0)),o=Q;break}case D.PolyData:{let Q=zA(A,C);Q.numberOfPoints>0?Q.points=S(A,C,0,P.Float32):Q.points=new Float32Array,Q.verticesBufferSize>0?Q.vertices=S(A,C,1,p.UInt32):Q.vertices=new Uint32Array,Q.linesBufferSize>0?Q.lines=S(A,C,2,p.UInt32):Q.lines=new Uint32Array,Q.polygonsBufferSize>0?Q.polygons=S(A,C,3,p.UInt32):Q.polygons=new Uint32Array,Q.triangleStripsBufferSize>0?Q.triangleStrips=S(A,C,4,p.UInt32):Q.triangleStrips=new Uint32Array,Q.numberOfPointPixels>0?Q.pointData=S(A,C,5,Q.polyDataType.pointPixelComponentType):Q.pointData=Y(Q.polyDataType.pointPixelComponentType,new ArrayBuffer(0)),Q.numberOfCellPixels>0?Q.cellData=S(A,C,6,Q.polyDataType.cellPixelComponentType):Q.cellData=Y(Q.polyDataType.cellPixelComponentType,new ArrayBuffer(0)),o=Q;break}default:throw Error("Unsupported output InterfaceType")}let f={type:n.type,data:o};a.push(f)}),{returnValue:i,stdout:r,stderr:s,outputs:a}}var XI=ye;var we=typeof globalThis.SharedArrayBuffer<"u";function me(A,I){if(A==null)return[];let t=[];for(let e=0;e<A.length;e++){let g=pe(A[e],I);g!==null&&t.push(g)}return t}function pe(A,I){if(A==null)return null;let t=null;return A.buffer!==void 0?t=A.buffer:A.byteLength!==void 0&&(t=A),we&&t instanceof SharedArrayBuffer?null:I?t:t.slice(0)}var zI=me;function Se(A){return[A.data,A.direction]}var _I=Se;function Fe(A){return[A.points,A.pointData,A.cells,A.cellData]}var vI=Fe;function Re(A){return[A.points,A.vertices,A.lines,A.polygons,A.triangleStrips,A.pointData,A.cellData]}var $I=Re;async function Ne(A,I,t,e){let g=XI(A,I,t,e),i=[];return g.outputs.forEach(function(r){if(r.type===D.BinaryStream||r.type===D.BinaryFile){let s=r.data;i.push(s)}else if(r.type===D.Image){let s=r.data;i.push(..._I(s))}else if(r.type===D.Mesh){let s=r.data;i.push(...vI(s))}else if(r.type===D.PolyData){let s=r.data;i.push(...$I(s))}}),SA(g,zI(i,!0))}var At=Ne;var Ue={runPipeline:async function(A,I,t,e,g){let i=await PI(A,I);return await At(i,t,e,g)}};oA(Ue);%0A/*! Bundled license information:%0A%0Acomlink/dist/esm/comlink.mjs:%0A  (**%0A   * @license%0A   * Copyright 2019 Google LLC%0A   * SPDX-License-Identifier: Apache-2.0%0A   *)%0A*/%0A';Mt(Wt);export{me as byuReadMesh,he as byuWriteMesh,ye as freeSurferAsciiReadMesh,we as freeSurferAsciiWriteMesh,De as freeSurferBinaryReadMesh,be as freeSurferBinaryWriteMesh,h as getDefaultWebWorker,Q as getPipelineWorkerUrl,m as getPipelinesBaseUrl,Ie as objReadMesh,ge as objWriteMesh,Be as offReadMesh,Ce as offWriteMesh,Yi as readMesh,Za as setDefaultWebWorker,Mt as setPipelineWorkerUrl,qa as setPipelinesBaseUrl,le as stlReadMesh,ue as stlWriteMesh,Qe as swcReadMesh,de as swcWriteMesh,se as vtkPolyDataReadMesh,ae as vtkPolyDataWriteMesh,fe as wasmReadMesh,ce as wasmWriteMesh,pe as wasmZstdReadMesh,Ee as wasmZstdWriteMesh,Ki as writeMesh};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
"""
default_config = JsPackageConfig(default_js_module)
js_package = JsPackage(default_config)
