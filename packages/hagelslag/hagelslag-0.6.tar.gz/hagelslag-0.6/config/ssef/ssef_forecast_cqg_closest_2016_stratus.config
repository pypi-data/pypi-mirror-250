#!/usr/bin/env python
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import MultiTaskElasticNetCV
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import make_scorer, mean_squared_error
from datetime import datetime
import os

num_procs = 20
model_names = ["Random Forest"]
condition_model_names = ["Random Forest", "Gradient Boosting"]
condition_model_objs = [GridSearchCV(RandomForestClassifier(n_estimators=500, class_weight="auto", n_jobs=num_procs),
                                     param_grid=[dict(max_features=["sqrt", 30, 50],
                                                      min_samples_split=[10, 20])],
                                     scoring="roc_auc",
                                     n_jobs=1),
                       GradientBoostingClassifier(n_estimators=500, learning_rate=0.05, max_depth=5)]
model_objs = [RandomForestClassifier(n_estimators=500, max_features=30, max_depth=6, n_jobs=num_procs)]
dist_model_names = ["Random Forest", "Random Forest CV"]
#dist_model_names = ["Random Forest CV"]
mse_scorer = make_scorer(mean_squared_error, greater_is_better=False)
dist_model_objs = [RandomForestRegressor(n_estimators=500,
                                         min_samples_split=10,
                                         max_features="sqrt",
                                         n_jobs=num_procs),
                   #MultiTaskElasticNetCV(l1_ratio=[0.1, 0.9, 0.99], cv=3,
                   #                      normalize=True,
                   #                      max_iter=1000,
                   #                      tol=0.001,
                   #                      n_jobs=num_procs),
                   GridSearchCV(RandomForestRegressor(n_estimators=500, n_jobs=num_procs),
                                param_grid=[dict(max_features=["sqrt", 30, 50, 100],
                                                 min_samples_split=[5, 10])],
                                scoring=mse_scorer,
                                n_jobs=1
                                ),
                   ]
storm_variables=["uh_max", "r10cmx", "wupmax", "cqgmax", "wdnmax", "pwat",
                 "bku", "bkv", "hgtsfc"]
potential_variables=["mlcape", "mlcins", "mucape", "mucins", "sblcl", "srh03", "shr06"]
tendency_variables=[]
shape_variables=["area", "eccentricity", "major_axis_length", "minor_axis_length", "orientation",
                "extent"]
variable_statistics=["mean", "max", "min", "std"]
input_columns = []
for var in storm_variables:
    for stat in variable_statistics:
        input_columns.append(var + "_" + stat)
for var in potential_variables:
    for stat in variable_statistics:
        input_columns.append(var + "-potential_" + stat)
input_columns += shape_variables
ensemble_members = ["wrf-core01_arw"] + ["wrf-core{0:02d}_arw".format(m) for m in range(3, 11)]
ensemble_members += ["wrf-s_phys_rad{0:02d}_arw".format(m) for m in range(2, 11)]
scratch_path = "/hail/djgagne/"
config = dict(ensemble_name="SSEF",
              ensemble_members=ensemble_members,
              num_procs=num_procs,
              start_dates={"train": datetime(2016, 4, 20), "forecast": datetime(2017,5,3)},
              end_dates={"train": datetime(2016, 6, 3), "forecast": datetime(2017,5,3)},
              start_hour=13,
              end_hour=36,
              map_filename="/home/djgagne/hagelslag/mapfiles/ssef2015.map",
              train_data_path=scratch_path + "track_data_spring2016_cqg_patch_csv/",
              forecast_data_path=scratch_path + "track_data_spring2016_cqg_patch_csv/",
              member_files={"train": scratch_path + "member_info_ssef_spring2016.csv",
                            "forecast": scratch_path + "member_info_ssef_spring2017.csv"},
              data_format="csv",
              group_col="Microphysics",
              condition_model_names=condition_model_names,
              condition_model_objs=condition_model_objs,
              condition_input_columns=input_columns,
              condition_output_column="Matched",
              condition_threshold=0.5,
              output_threshold=5,
              size_model_names=model_names,
              size_model_objs=model_objs,
              size_input_columns=input_columns,
              size_output_column="Hail_Size",
              size_range_params=(5, 100, 5),
              size_distribution_model_names=dist_model_names,
              size_distribution_model_objs=dist_model_objs,
              size_distribution_input_columns=input_columns,
              size_distribution_output_columns=["Shape", "Scale"],
              track_model_names=model_names,
              track_model_objs=model_objs,
              track_input_columns=input_columns,
              track_output_columns={"translation-x": "Translation_Error_X",
                                    "translation-y": "Translation_Error_Y",
                                    "start-time": "Start_Time_Error"},
              track_output_ranges={"translation-x": (-180000, 180000, 30000),
                                   "translation-y": (-180000, 180000, 30000),
                                   "start-time": (-6, 6, 1),
                                   },
              load_models=True,
              model_path=scratch_path + "track_models_cqg_patch_spring2016/",
              metadata_columns=["Track_ID", "Step_ID"],
              data_json_path=scratch_path + "track_data_spring2016_cqg_closest_json/",
              forecast_json_path=scratch_path + "track_forecasts_spring2016_cqg_closest_json/",
              copula_file=scratch_path + "track_copulas_cqg_closest.pkl",
              num_track_samples=100,
              sampler_thresholds=[25, 50],
              sampler_out_path=scratch_path + "track_samples_spring2015_hs/",
              ensemble_variables=["uh_max", "hailsz", "cqgmax"],
              ensemble_variable_thresholds={"uh_max": [75, 150],
                                            "hailsz": [25, 50],
                                            "cqgmax": [20, 40]},
              ml_grid_method="gamma",
              neighbor_condition_model="Random Forest",
              neighbor_radius=[14, 28],
              neighbor_sigma=[5, 20],
              grid_shape=(1155, 1683),
              ensemble_consensus_path=scratch_path + "hail_consensus_ssef_cqg_closest_2016/",
              ensemble_data_path="/sharp/djgagne/spring2015_nc/",
              model_map_file="/home/djgagne/hagelslag/mapfiles/ssef2015.map",
              ml_grid_percentiles=["mean", 90],
              grib_path=scratch_path + "hail_forecasts_grib2_ssef_cqg_patch_2016/",
              single_step=False,
              )
