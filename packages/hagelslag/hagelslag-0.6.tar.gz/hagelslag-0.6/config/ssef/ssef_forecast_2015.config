#!/usr/bin/env python
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegressionCV
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, f_classif
from datetime import datetime

num_procs = 20
model_names = ["Random Forest", "Gradient Boosting", "Logistic Regression"]
model_objs = [RandomForestClassifier(n_estimators=100,
                                     min_samples_split=15,
                                     max_features="sqrt",
                                     class_weight="auto",
                                     n_jobs=num_procs),
              GradientBoostingClassifier(n_estimators=100,
                                         learning_rate=0.05,
                                         max_features="sqrt",
                                         min_samples_split=15),
              Pipeline([("features", SelectKBest(f_classif, 10)),
                       ("lr", LogisticRegressionCV(Cs=5, cv=5,
                                                   n_jobs=num_procs,
                                                   class_weight="auto",
                                                   multi_class='multinomial'))])]

storm_variables=["uh_max", "r10cmx", "wupmax", "cqgmax", "wdnmax"]
potential_variables=["mlcape", "mlcins", "sblcl", "srh03", "shr06",
                                   "dewp2m", "temp2m", "sph850", "sph500", "lllr", "lr75"]
variable_statistics=["mean", "max", "min", "std", "mean_dt", "max_dt"]
input_columns = ["Forecast_Hour", "Valid_Hour_UTC", "Duration_Step", "Duration_Total", "Centroid_Lon", "Centroid_Lat"]
for var in storm_variables + potential_variables:
    for stat in variable_statistics:
        input_columns.append(var + "_" + stat)
ensemble_members = ["wrf-s3cn_arw"] + ["wrf-s3m{0:d}_arw".format(m) for m in range(3, 14)]
scratch_path = "/sharp/djgagne/"
experiment_name = "closest"
config = dict(ensemble_name="SSEF",
              ensemble_members=ensemble_members,
              num_procs=num_procs,
              start_dates={"train": datetime(2014, 5, 6), "forecast": datetime(2015, 5, 12)},
              end_dates={"train": datetime(2014, 6, 6), "forecast": datetime(2015, 6, 5)},
              start_hour=13,
              end_hour=36,
              map_filename="mapfiles/ssef2015.map",
              train_data_path=scratch_path + "track_data_spring2014_{0}_csv/".format(experiment_name),
              forecast_data_path=scratch_path + "track_data_spring2015_{0}_csv/".format(experiment_name),
              member_files={"train":scratch_path  + "member_info_ssef_spring2014.csv",
                            "forecast":scratch_path + "member_info_ssef_spring2015.csv"},
              data_format="csv",
              group_col="Microphysics",
              condition_model_names=model_names,
              condition_model_objs=model_objs,
              condition_input_columns=input_columns,
              condition_output_column="Hail_Size",
              output_threshold=5,
              size_model_names=model_names,
              size_model_objs=model_objs,
              size_input_columns=input_columns,
              size_output_column="Hail_Size",
              size_range_params=(5, 100, 5),
              track_model_names=model_names,
              track_model_objs=model_objs,
              track_input_columns=input_columns,
              track_output_columns={"translation-x":"Translation_Error_X",
                                    "translation-y":"Translation_Error_Y",
                                    "start-time":"Start_Time_Error"},
              track_output_ranges={"translation-x":(-240000,240000,24000),
                                   "translation-y":(-240000,240000,24000),
                                   "start-time":(-6,6,1),
                                   },
              load_models=True,
              model_path=scratch_path + "track_models_{0}_spring2015/".format(experiment_name),
              metadata_columns=["Track_ID", "Step_ID"],
              data_json_path=scratch_path + "track_data_spring2015_{0}_json/".format(experiment_name),
              forecast_json_path=scratch_path + "track_forecasts_spring2015_{0}_json/".format(experiment_name),
              copula_file=scratch_path + "track_copulas_{0}.pkl".format(experiment_name),
              num_track_samples=1000,
              sampler_thresholds=[25, 50],
              sampler_out_path=scratch_path + "track_samples_spring2015_{0}/".format(experiment_name),
              ensemble_variables=["uh_max", "hailsz", "cqgmax"],
              ensemble_variable_thresholds={"uh_max": [75],
                                            "hailsz": [25, 50],
                                            "cqgmax": [25]},
              ml_grid_method="mean",
              neighbor_radius=[14],
              neighbor_sigma=[5, 40],
              grid_shape=(1155, 1683),
              ensemble_consensus_path=scratch_path + "ensemble_consensus_ssef_2015_{0}/".format(experiment_name),
              ensemble_data_path="/sharp/djgagne/spring2015_nc/",
              single_step=False,
              )

