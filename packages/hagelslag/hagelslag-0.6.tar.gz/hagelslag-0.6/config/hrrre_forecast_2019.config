
#!/usr/bin/env python

import numpy as np
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.linear_model import Lasso, LogisticRegression
try: 
    from sklearn.model_selection import GridSearchCV
except ImportError:
    from sklearn.grid_search import GridSearchCV

from sklearn.metrics import make_scorer, mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from datetime import datetime
import os

num_procs = 15
model_names = ["Random Forest"]
condition_model_names = ["Random Forest"] 
condition_model_objs = [RandomForestClassifier(n_estimators=500, max_features="sqrt", n_jobs=num_procs, min_samples_leaf=1)]

model_objs = [RandomForestClassifier(n_estimators=500, max_features="sqrt", max_depth=6, n_jobs=num_procs)]
dist_model_names = ["Random Forest"] 
mse_scorer = make_scorer(mean_squared_error, greater_is_better=False)

dist_model_objs = [RandomForestRegressor(n_estimators=500, max_features="sqrt", n_jobs=num_procs, min_samples_leaf=1)]

storm_variables=['MAXUVV','MAXDVV','MAXREF_1000','Vertically-integrated liquid',
                'MXUPHL_5000','Storm relative helicity_3000','Storm relative helicity_1000',
                'MNUPHL_5000', 'MXUPHL_3000','MNUPHL_3000',
                'Hail_atmosphere','Hail_sigma'] 
            
potential_variables=['10 metre U wind component', '10 metre V wind component',
                    'Surface pressure','2 metre dewpoint temperature','2 metre temperature',
                    'MAXUW', 'MAXVW', 'Surface lifted index', 'Convective available potential energy_surface',
                    'Convective inhibition_surface','Precipitable water',
                    'Geopotential Height_cloudTop','Geopotential Height_isothermZero'] 
            
tendency_variables=[]
shape_variables=["area", "eccentricity", "major_axis_length", "minor_axis_length", "orientation"]
variable_statistics=["mean", "max", "min", "std",
                    "percentile_10", "percentile_50", "percentile_90"]
input_columns = []
for var in storm_variables:
    for stat in variable_statistics:
        input_columns.append(var + "_" + stat)
for var in potential_variables:
    for stat in variable_statistics:
        input_columns.append(var + "-potential_" + stat)
input_columns += shape_variables

ensemble_members=['hrrre01','hrrre02','hrrre03','hrrre04','hrrre05','hrrre06','hrrre07','hrrre08','hrrre09']
scratch_path = "/ai-hail/aburke/HRRRE/"
fore_date = datetime.strptime(datetime.utcnow().strftime("%Y%m%d"), "%Y%m%d")

config=dict(ensemble_name="HRRRE",
            ensemble_members=ensemble_members,
            num_procs=num_procs,
            start_dates={"train": datetime(2018, 4, 2), "forecast": fore_date},
            end_dates={"train": datetime(2018, 7, 29), "forecast": fore_date},
            start_hour=12,
            end_hour=36,
            watershed_variable='MAXUVV',
            train_data_path=scratch_path+'hwt_2018/hagelslag_files/track_data_2018_MAXUVV_closest_csv/',
            forecast_data_path=scratch_path+'hwt_2019/hagelslag_files/track_data_2019_MAXUVV_closest_csv/',
            member_files={"train": scratch_path+"member_info_hrrre_spring2019.csv",
                        "forecast": scratch_path+"member_info_hrrre_spring2019.csv"},
            data_format="csv",
            group_col="Unique_Member", 
            condition_model_names=condition_model_names,
            condition_model_objs=condition_model_objs,
            condition_input_columns=input_columns,
            condition_output_column="Matched",
            condition_threshold=0.5,
            size_distribution_model_names=dist_model_names,
            size_distribution_model_objs=dist_model_objs,
            size_distribution_input_columns=input_columns,
            size_distribution_output_columns=["Shape", "Scale"],
            size_distribution_loc=19,
            load_models=True,
            size_dis_training_path=scratch_path+'HRRRE_2018_Size_Distribution/',
            model_path=scratch_path+"hagelslag_files/2018/track_models_MAXUVV_closest_spring2018/",
            metadata_columns=["Track_ID", "Step_ID", "Ensemble_Member", "Forecast_Hour"],
            data_json_path=scratch_path + "hwt_2018/hagelslag_files/track_data_2018_MAXUVV_closest_json",
            forecast_json_path=scratch_path + "hwt_2019/hagelslag_files/track_forecasts_2019_MAXUVV_closest_json/",
            forecast_csv_path=scratch_path + "hwt_2019/hagelslag_files/track_forecasts_2019_MAXUVV_closest_csv/",
            netcdf_path=scratch_path+"hwt_2019/hagelslag_files/track_data_2019_MAXUVV_patch_nc/",
            ensemble_variables=[],  
            ensemble_variable_thresholds={},
            ml_grid_method="gamma",
            neighbor_condition_model="Random Forest",
            neighbor_radius=[14],
            neighbor_sigma=[1],
            ensemble_consensus_path=scratch_path + "hwt_2019/hagelslag_files/hail_consensus_hrefv2_MAXUVV_closest_2018/",
            ensemble_data_path=scratch_path,
            model_map_file="/hail/aburke/hagelslag/mapfiles/hrrre_2019_map.txt",
            ml_grid_percentiles=["mean", 90],
            grib_path=scratch_path + "hwt_2019/hagelslag_files/hail_forecasts_grib2_hrrre_closest_2019/",
            single_step=True,
            run_date_format="%Y%m%d-%H%M")


