Metadata-Version: 2.1
Name: substratecore
Version: 20240101.1.0
Summary: Autogenerated models and serialization for the Substrate API and SDKs
Author-email: vprtwn <ben@substrate.run>
Requires-Python: >=3.7
Requires-Dist: pydantic<2.0.0
Description-Content-Type: text/markdown

# Useful links:

- [Datadog logs](https://us5.datadoghq.com/logs)
- [Modal logs](https://modal.com/substratelabs/logs)
- [Vercel deployments](https://vercel.com/substrate-labs/substrate/deployments)
- [Cloudflare KV](https://dash.cloudflare.com/3a57cbd5684eb756bbde7ce44a3e3ed5/workers/kv/namespaces)
- [Postman workspace](https://substratelabs.postman.co/workspace/Substrate~f43d8f7b-4c99-449f-8138-7029280b4fdb/overview)
- [Orb – Substack billing](https://app.withorb.com/customers/DTPEE5kDpSBXn9ZQ)
- [AWS SSO](https://d-9067f04617.awsapps.com/start#/)
- [substratecore](https://github.com/SubstrateLabs/substrate-python/tree/main/substrate/src/substrate/substratecore)
- [substrate-python](https://github.com/SubstrateLabs/substrate-python)
- [substrate-typescript](https://github.com/SubstrateLabs/substrate-typescript)

# NextJS app

## Running locally

- `vc env pull .env.development.local`
- `yarn`
- `yarn dev`

## Style guide

- Name components with class casing after what they export, e.g. `ManagePaymentMethod.tsx`
- Special nextjs files should be lowercase, e.g. `layout.tsx`
- Use plain directories (no parens) from `/app` only when they are a real path
- Don't add to `/components/ui` or edit those files – those are installed from our component library: https://ui.shadcn.com/
- Use `export default function <FunctionComponent>`, rather than anonymous functions
- Don't make internal API routes, use [server actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions#convention)

## Model types

- Server DB model types are automatic from `knex` and `objection`
- Client types: add them to `@types/index.d.ts`

## Migrations

Make sure you've done this:

- `vc env pull .env.development.local`

Create a new migration:

- `yarn db:make`

Run the migration

- `yarn db:latest`

# Webhooks (WIP)

(We haven't fully built webhooks support, but have some notes here)

To get webhooks working in a local environment, you'll need to expose your development server to the internet.
This is because the external services (e.g. modal) are running live and need to report back to IPs that are accessible
on the internet.
You can tunnel using [ngrok](https://ngrok.com/).

Once you have a domain that is tunneled, you can use that domain in place of any webhook URLs in the app by setting the ENV variable locally (usually via your own `.env` or `.env.development.local`)

For testing API endpoints with Postman, you can optionally have your model run report back to an alternate domain if you are using an API key tied to a `user.is_super_admin` and you make your request with a `x-substrate-domain` header (e.g. `rob.substrate.run`.

# `sb-proxy`

- `/sb-proxy` is a cloudflare worker that routes requests to the external API, internal API, and assets
- See [sb-proxy/README](/sb-proxy/README.md) for more info

# Modal API endpoints + inference

## Local development

The preferred way to set up an environment is via `mamba` (or `conda` / `mini-conda` if you'd like).
Install `mamba`/`conda` via [`miniforge`](https://github.com/conda-forge/miniforge), then create an environment from the `environment.yml`.

```bash
# or optionally `conda`

mamba env create -f environment.yml
mamba activate substrate
```

- You can develop an individual file locally using `modal run` with a `local_entrypoint` defined in a file.

```
modal run sb_models/sdxl/sdxl.py --prompt "cinematic ..."
```

## Staging

Use the `deploy-modal` script to deploy to staging:

```
./scripts/deploy-modal.py --apps=usage --env=staging
```

And then use `https://api-staging.substrate.run`

(Note that this also uses the staging deploy of `sb-proxy`)

Commits to main are automatically deployed to `--env=main` via Github action.

## Creating your own modal environment

1. [`modal environment create`](https://modal.com/docs/guide/environments#environments-beta)
2. update the deploy script with your environment
3. run the deploy script with `--apps=all`
4. update `sb-proxy` with your environment

# substratecore + OpenAPI spec

- See [`/openapi.json`](/public/openapi.json) for our Open API spec
- Our API ref is generated automatically from the Open API spec
- API request handlers use autogenerated pydantic models in `sb_models/substratecore`
- We use [rye](https://github.com/mitsuhiko/rye) to manage the virtualenv, dependencies, and publishing for `substratecore`
- To set up rye, run `rye sync` in the root directory – this will create a `.venv`
- You shouldn't use the rye `.venv` for development – see the above note on using `mamba`
- To regenerate models after updating the OpenAPI spec:
  - `rye run generate`
- To publish `substratecore` to pypi for `substrate-python`:
  - `rye run publish`

# Billing

- We use Orb for billing. Managing new prices requires juggling a bunch of scripts.
- See [`billing.md`](/internal-docs/billing.md)
- [`usage.py`](/sb_models/usage.py) is where we report usage to Orb.

# Observability

- `sb-proxy` logs the start and end of requests, and reports overall timing metrics
- [`usage.py`](/sb_models/usage.py) logs more extensive, redacted request info from inference runs
