Metadata-Version: 2.1
Name: DashBoardUtils-DataScience
Version: 1.23
Summary: AutoMated visualization Features Extraction For Data Scientists and data format calculater for application developers
Home-page: UNKNOWN
Author: Rajat Mishra
Author-email: rajatsmishra@aol.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown

b'### dashboard builder util generate all posibble stats from Dataframe for DataScience and visualisation purposes\n\n```python\nfrom package.dashboardutil import DashboardElementsBuilder\nfrom package.dataclassifier import DataClassifier\nimport pandas as pd\ndf=pd.read_csv("cars.csv")\ndat=DataClassifier()\nvisual=DashboardElementsBuilder(df,dat)\nploats=visual.build_ploats("hist",df.columns.to_list()[1:])\nploat_data=[]\nfor x in list(ploats):\n    for z in list(x):\n        ploat_data+=list(z)\n\n```\n\n### above data canbe visualised like below\n\n```python\ndata={\'slow\': {\'lables\': [66.2, 66.4, 66.3, 71.4, 67.9], \'counts\': [1, 1, 1, 3, 1]}}\nfrom bokeh.plotting import figure, show\n\nfruits = [str(x) for x in data[\'slow\'][\'lables\']]\ncounts = data[\'slow\'][\'counts\']\n\np = figure(x_range=fruits, height=350, title="Range",\n           toolbar_location=None, tools="")\n\np.vbar(x=fruits, top=counts, width=0.9)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)\n\n```\n\n### export bulk graphs for all possible conditions\n\n```python\nfrom package.DashBoardsTemplates import export_graphs_hist\nfrom bokeh.plotting import show \n# use any graph for data clustrig or analysis purposes above function using bokeh for bulk visualisation\nvisual=export_graphs_hist(ploat_data)\n# iter visual variable or visualise one by one\nshow(visual[0])\n```\n\n### calucate data formets for visualisation data for formets visulisation purposes\n\n```python\nfrom package.keyborddata import *\nfrom package.formatcalculator import FormatCalculator \n# get hashes chuncks\nunique_hashes=FormatCalculator.get_unique_hashes_from_data(ploat_data)\n# get combines hashes \nunique_=[]\nfor x in unique_hashes:\n    unique_+=x\n```\n\n### calucate data formets for dataframe data for formets data optimisation and validation purposes\n\n```python\nfrom package.keyborddata import *\nimport pandas as pd\nfrom package.formatcalculator import FormatCalculator\n# get df vocabs\nvocabdf=FormatCalculator.split_all_labels_to_words_with_new_cols(pd.read_csv("test.csv"))\n# get vocabdf formats\nformets=FormatCalculator.hash_df_formats(vocabdf)\n# get vocabdf formets column wise \nunique_formatas=FormatCalculator.get_unique_hashes_from_df_columnwise(formets)\n```\n\n### optimising_regex string\n\n```python\nfrom package.keyborddata import *\nimport pandas as pd\nfrom package.formatcalculator import FormatCalculator\n# get df vocabs\nvocabdf=FormatCalculator.split_all_labels_to_words_with_new_cols(pd.read_csv("test.csv"))\n# get vocabdf formats\nformets=FormatCalculator.hash_df_formats(vocabdf)\n# optimise formetts in df\ndf_list_formetted=[]\nfor x,y in formets.iterrows():\n    for cd in formets.columns.to_list():\n        y[cd]=regex_formattor(y[cd])\n    df_list_formetted.append(y.to_dict())\n# reasamble df with same variable\nformets=pd.DataFrame.from_records(df_list_formetted)\n# get vocabdf formets column wise \nunique_formatas=FormatCalculator.get_unique_hashes_from_df_columnwise(formets)\n\n```\n\n### Project Contribution GuideLines\n\n##### git page link <https://github.com/rajat45mishra/DashBoardUtils_Datascience>\n\n##### send us update suggestions on <rajatsmishra@aol.com>\n\n#### todo tasks\n\n###### - add more algorithum in data classifier\n\n###### - add more graph templates in DashBoaredtemplates class\n\n###### - use cases docs and api docs for users\n\n###### - totorials for extracting\n'

