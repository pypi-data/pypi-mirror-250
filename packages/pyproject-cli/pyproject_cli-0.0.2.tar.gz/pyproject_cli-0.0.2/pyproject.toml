[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyproject-cli"
version = "0.0.2"
description = ''
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [
  { name = "Artem Lykhvar", email = "me@a10r.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "click>=8.0.6",
]

[project.urls]
Documentation = "https://github.com/lykhvar/pyproject-cli#readme"
Issues = "https://github.com/lykhvar/pyproject-cli/issues"
Source = "https://github.com/lykhvar/pyproject-cli"

[project.scripts]
cli = "pyproject_cli.cli:app"

[tool.hatch.version]
path = "src/pyproject_cli/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/scripts",
  "/tests"
]

[tool.hatch.build.targets.wheel]
packages = ["src/pyproject_cli"]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-cov",
  "pytest-rerunfailures",
  "pytest-xdist",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov --cov-report={env:COVERAGE_REPORT:term-missing} --cov-config=pyproject.toml"
full = "test-cov -n auto --reruns 5 --reruns-delay 3 -r aR {args:tests}"

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pyproject_cli tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.envs.coverage]
detached = true
dependencies = [
  "coverage[toml]>=6.2",
  "lxml",
]

[tool.hatch.envs.coverage.scripts]
combine = "coverage combine {args}"
report-xml = "coverage xml"
report-uncovered-html = "coverage html --skip-covered --skip-empty"
generate-summary = "python scripts/generate_coverage_summary.py"
write-summary-report = "python scripts/write_coverage_summary_report.py"

[tool.black]
target-version = ["py37"]
line-length = 79
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["pyproject_cli"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["pyproject_cli", "tests"]
branch = true
parallel = true

[tool.coverage.paths]
pyproject_cli = ["src/pyproject_cli", "*/pyproject_cli/src/pyproject_cli"]
tests = ["tests", "*/pyproject_cli/tests"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
# https://guicommits.com/semantic-release-to-automate-versioning-and-publishing-to-pypi-with-github-actions/
# https://habr.com/ru/articles/662738/
[tool.semantic_release]
logging_use_named_masks = true
tag_format = "{version}"
commit_parser = "angular"
commit_author = "Artem Likhvar <me@a10r.com>"
commit_message = "{version}\n\nAutomatically generated by release pipeline"
build_command = """
    python -m pip install hatch
    python -m hatch build
"""
major_on_zero = true
assets = []
version_variables = ["src/pyproject_cli/__about__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
