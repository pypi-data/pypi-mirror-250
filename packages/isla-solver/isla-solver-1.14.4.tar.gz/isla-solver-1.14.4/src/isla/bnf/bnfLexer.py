# Generated from bnf.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,8,64,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,4,3,28,8,3,
        11,3,12,3,29,1,3,1,3,1,4,1,4,1,4,5,4,37,8,4,10,4,12,4,40,9,4,1,4,
        1,4,1,5,1,5,1,5,1,6,4,6,48,8,6,11,6,12,6,49,1,6,1,6,1,7,1,7,5,7,
        56,8,7,10,7,12,7,59,9,7,1,7,1,7,1,7,1,7,2,38,57,0,8,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,1,0,3,2,0,60,60,62,62,6,0,34,34,92,92,98,
        98,110,110,114,114,116,116,3,0,9,10,13,13,32,32,68,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,1,17,1,0,0,0,3,21,1,0,0,0,5,23,1,0,0,0,7,25,
        1,0,0,0,9,33,1,0,0,0,11,43,1,0,0,0,13,47,1,0,0,0,15,53,1,0,0,0,17,
        18,5,58,0,0,18,19,5,58,0,0,19,20,5,61,0,0,20,2,1,0,0,0,21,22,5,124,
        0,0,22,4,1,0,0,0,23,24,5,59,0,0,24,6,1,0,0,0,25,27,5,60,0,0,26,28,
        8,0,0,0,27,26,1,0,0,0,28,29,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,
        30,31,1,0,0,0,31,32,5,62,0,0,32,8,1,0,0,0,33,38,5,34,0,0,34,37,3,
        11,5,0,35,37,9,0,0,0,36,34,1,0,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,
        39,1,0,0,0,38,36,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,42,5,34,
        0,0,42,10,1,0,0,0,43,44,5,92,0,0,44,45,7,1,0,0,45,12,1,0,0,0,46,
        48,7,2,0,0,47,46,1,0,0,0,48,49,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,
        0,50,51,1,0,0,0,51,52,6,6,0,0,52,14,1,0,0,0,53,57,5,35,0,0,54,56,
        9,0,0,0,55,54,1,0,0,0,56,59,1,0,0,0,57,58,1,0,0,0,57,55,1,0,0,0,
        58,60,1,0,0,0,59,57,1,0,0,0,60,61,5,10,0,0,61,62,1,0,0,0,62,63,6,
        7,0,0,63,16,1,0,0,0,6,0,29,36,38,49,57,1,6,0,0
    ]

class bnfLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NONTERMINAL = 4
    STRING = 5
    ESC = 6
    WS = 7
    LINE_COMMENT = 8

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'::='", "'|'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "NONTERMINAL", "STRING", "ESC", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NONTERMINAL", "STRING", "ESC", 
                  "WS", "LINE_COMMENT" ]

    grammarFileName = "bnf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


