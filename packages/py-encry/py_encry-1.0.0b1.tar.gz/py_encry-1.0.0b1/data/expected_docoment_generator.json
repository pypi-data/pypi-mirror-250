[{"type": "ClassDef", "name": "ImageHandler", "inside_class": null, "type_method": null, "info": [{"info": "text", "data": {"text": "A class to handle images for cryptography\n\nAttributes\n----------\nimage : Image - The parsed image\n\nMethods\n-------\nwrite(file_path): Writes the image data to a file\nfile_info(): Gets the file information of the image\nencode(method, **kwargs): Encodes data into the image\ndecode(method, **kwargs): Decodes data from the image\n"}}]}, {"type": "FunctionDef", "name": "from_base64", "inside_class": "ImageHandler", "type_method": "constructor", "info": [{"info": "text", "data": {"text": "Initialise the ImageHandler class from a string\n"}}, {"info": "arguments", "data": [{"name": "base64_string", "type": "string", "info": "The string to parse"}]}, {"info": "text", "data": {"text": ""}}, {"info": "returns", "data": [{"type": "ImageHandler", "info": "The ImageHandler object"}]}, {"info": "text", "data": {"text": "\nexample:"}}, {"info": "example", "data": {"lang": "python", "code": "with open(\"./img/TechSmith-Blog-JPGvsPNG-DE.png\", \"rb\") as file:\n    image_handler = ImageHandler.from_base64(file.read())"}}, {"info": "text", "data": {"text": ""}}]}, {"type": "FunctionDef", "name": "write", "inside_class": "ImageHandler", "type_method": "method", "info": [{"info": "text", "data": {"text": "Write to the image data to a file\n"}}, {"info": "arguments", "data": [{"name": "file_path", "type": "string", "info": "The path to the file to write to"}]}, {"info": "text", "data": {"text": ""}}, {"info": "returns", "data": []}, {"info": "text", "data": {"text": "\nexample:"}}, {"info": "example", "data": {"lang": "python", "code": "image_handler = ImageHandler(\"./img/TechSmith-Blog-JPGvsPNG-DE.png\")\n\nimage_handler.write(\"./img/test.png\")"}}, {"info": "text", "data": {"text": ""}}]}, {"type": "FunctionDef", "name": "to_string", "inside_class": "ImageHandler", "type_method": "method", "info": [{"info": "text", "data": {"text": "Write to the image data to a string\n"}}, {"info": "returns", "data": [{"type": "string", "info": "The image data"}]}, {"info": "text", "data": {"text": "\nexample:"}}, {"info": "example", "data": {"lang": "python", "code": "image_handler = ImageHandler(\"./img/TechSmith-Blog-JPGvsPNG-DE.png\")\n\nimage_handler.to_string()"}}, {"info": "text", "data": {"text": ""}}]}, {"type": "FunctionDef", "name": "file_info", "inside_class": "ImageHandler", "type_method": "method", "info": [{"info": "text", "data": {"text": "Get the file information of the image\n\nThe information returned is:\n- mode: The mode of the image\n- size: The size of the image\n- format: The format of the image\n- filename: The filename of the image\n"}}, {"info": "returns", "data": [{"type": "dict", "info": "The file information"}]}, {"info": "text", "data": {"text": "\nexample:"}}, {"info": "example", "data": {"lang": "python", "code": "image_handler = ImageHandler(\"./img/TechSmith-Blog-JPGvsPNG-DE.png\")\n\nimage_handler.file_info()"}}, {"info": "text", "data": {"text": ""}}]}, {"type": "FunctionDef", "name": "encode", "inside_class": "ImageHandler", "type_method": "method", "info": [{"info": "text", "data": {"text": "Encode data into the image\n\nThe method allows selecting the method to use to encode the data, and\nit accepts keyword arguments to pass to the method. The keywords are:\n- data: The data to encode\n- key: The key to use to encode the data\n\nThe method raises a NotImplementedError if the method is not implemented.\n"}}, {"info": "arguments", "data": [{"name": "method", "type": "string", "info": "The method to use to encode the data"}, {"name": "kwargs", "type": "dict", "info": "The arguments to pass to the method"}]}, {"info": "text", "data": {"text": ""}}, {"info": "returns", "data": []}, {"info": "text", "data": {"text": "\nexample:"}}, {"info": "example", "data": {"lang": "python", "code": "image_handler = ImageHandler(\"./img/TechSmith-Blog-JPGvsPNG-DE.png\")\n\nimage_handler.encode(\"rail_fence_cipher\", data=\"This is a secret message\", key=4)"}}, {"info": "text", "data": {"text": ""}}]}, {"type": "FunctionDef", "name": "decode", "inside_class": "ImageHandler", "type_method": "method", "info": [{"info": "text", "data": {"text": "Decode data from the image\n\nThe method allows selecting the method to use to decode the data, and\nit accepts keyword arguments to pass to the method. The keywords are:\n- key: The key to use to decode the data\n\nThe method raises a NotImplementedError if the method is not implemented.\n"}}, {"info": "arguments", "data": [{"name": "method", "type": "string", "info": "The method to use to decode the data"}, {"name": "kwargs", "type": "dict", "info": "The arguments to pass to the method"}]}, {"info": "text", "data": {"text": ""}}, {"info": "returns", "data": [{"type": "string", "info": "The decoded data"}]}, {"info": "text", "data": {"text": ""}}]}]