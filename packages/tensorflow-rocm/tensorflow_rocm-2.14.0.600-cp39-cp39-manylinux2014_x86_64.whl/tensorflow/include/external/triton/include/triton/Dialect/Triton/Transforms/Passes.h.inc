/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TRITONCOMBINEOPS
#define GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TritonCombineOps
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONCOMBINEOPS
#undef GEN_PASS_DECL_TRITONCOMBINEOPS
#endif // GEN_PASS_DECL_TRITONCOMBINEOPS
#ifdef GEN_PASS_DEF_TRITONCOMBINEOPS
namespace impl {

template <typename DerivedT>
class TritonCombineOpsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonCombineOpsBase;

  TritonCombineOpsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonCombineOpsBase(const TritonCombineOpsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-combine");
  }
  ::llvm::StringRef getArgument() const override { return "triton-combine"; }

  ::llvm::StringRef getDescription() const override { return "combine ops"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonCombineOps");
  }
  ::llvm::StringRef getName() const override { return "TritonCombineOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<mlir::arith::ArithDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonCombineOpsBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONCOMBINEOPS
#endif // GEN_PASS_DEF_TRITONCOMBINEOPS

//===----------------------------------------------------------------------===//
// TritonRewriteTensorPointer
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
struct TritonRewriteTensorPointerOptions {
  int32_t computeCapability = 80;
};
#undef GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#endif // GEN_PASS_DECL_TRITONREWRITETENSORPOINTER
#ifdef GEN_PASS_DEF_TRITONREWRITETENSORPOINTER
namespace impl {

template <typename DerivedT>
class TritonRewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorPointerBase;

  TritonRewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorPointerBase(const TritonRewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return "Rewrite load/stores with tensor pointers into legacy load/stores"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<mlir::triton::TritonDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorPointerBase<DerivedT>)

  TritonRewriteTensorPointerBase(const TritonRewriteTensorPointerOptions &options) : TritonRewriteTensorPointerBase() {
    computeCapability = options.computeCapability;
  }
protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TRITONREWRITETENSORPOINTER
#endif // GEN_PASS_DEF_TRITONREWRITETENSORPOINTER
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TritonCombineOps Registration
//===----------------------------------------------------------------------===//

inline void registerTritonCombineOps() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createCombineOpsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonCombineOpsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createCombineOpsPass();
  });
}

//===----------------------------------------------------------------------===//
// TritonRewriteTensorPointer Registration
//===----------------------------------------------------------------------===//

inline void registerTritonRewriteTensorPointer() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createRewriteTensorPointerPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTritonRewriteTensorPointerPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::triton::createRewriteTensorPointerPass();
  });
}

//===----------------------------------------------------------------------===//
// Triton Registration
//===----------------------------------------------------------------------===//

inline void registerTritonPasses() {
  registerTritonCombineOps();
  registerTritonRewriteTensorPointer();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TritonCombineOpsBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonCombineOpsBase;

  TritonCombineOpsBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonCombineOpsBase(const TritonCombineOpsBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-combine");
  }
  ::llvm::StringRef getArgument() const override { return "triton-combine"; }

  ::llvm::StringRef getDescription() const override { return "combine ops"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonCombineOps");
  }
  ::llvm::StringRef getName() const override { return "TritonCombineOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<mlir::arith::ArithDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonCombineOpsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TritonRewriteTensorPointerBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TritonRewriteTensorPointerBase;

  TritonRewriteTensorPointerBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TritonRewriteTensorPointerBase(const TritonRewriteTensorPointerBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("triton-rewrite-tensor-pointer");
  }
  ::llvm::StringRef getArgument() const override { return "triton-rewrite-tensor-pointer"; }

  ::llvm::StringRef getDescription() const override { return "Rewrite load/stores with tensor pointers into legacy load/stores"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TritonRewriteTensorPointer");
  }
  ::llvm::StringRef getName() const override { return "TritonRewriteTensorPointer"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<mlir::triton::TritonDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TritonRewriteTensorPointerBase<DerivedT>)

protected:
  ::mlir::Pass::Option<int32_t> computeCapability{*this, "compute-capability", ::llvm::cl::desc("device compute capability"), ::llvm::cl::init(80)};
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
