# coding: utf-8

"""
    EmployeeEFCrud

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Employee(BaseModel):
    """
    Employee
    """ # noqa: E501
    employee_id: Optional[StrictInt] = Field(default=None, alias="employeeId")
    name: Optional[StrictStr] = None
    age: Optional[StrictInt] = None
    department: Optional[StrictStr] = None
    experience: Optional[StrictInt] = None
    blood_group: Optional[StrictStr] = Field(default=None, alias="bloodGroup")
    father_name: Optional[StrictStr] = Field(default=None, alias="fatherName")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    is_active: Optional[StrictBool] = Field(default=None, alias="isActive")
    date_of_created: Optional[datetime] = Field(default=None, alias="dateOfCreated")
    date_of_updated: Optional[datetime] = Field(default=None, alias="dateOfUpdated")
    roles: Optional[StrictStr] = None
    is_supervisor: Optional[StrictBool] = Field(default=None, alias="isSupervisor")
    is_manager: Optional[StrictBool] = Field(default=None, alias="isManager")
    __properties: ClassVar[List[str]] = ["employeeId", "name", "age", "department", "experience", "bloodGroup", "fatherName", "isDeleted", "isActive", "dateOfCreated", "dateOfUpdated", "roles", "isSupervisor", "isManager"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Employee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if department (nullable) is None
        # and model_fields_set contains the field
        if self.department is None and "department" in self.model_fields_set:
            _dict['department'] = None

        # set to None if blood_group (nullable) is None
        # and model_fields_set contains the field
        if self.blood_group is None and "blood_group" in self.model_fields_set:
            _dict['bloodGroup'] = None

        # set to None if father_name (nullable) is None
        # and model_fields_set contains the field
        if self.father_name is None and "father_name" in self.model_fields_set:
            _dict['fatherName'] = None

        # set to None if roles (nullable) is None
        # and model_fields_set contains the field
        if self.roles is None and "roles" in self.model_fields_set:
            _dict['roles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Employee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "employeeId": obj.get("employeeId"),
            "name": obj.get("name"),
            "age": obj.get("age"),
            "department": obj.get("department"),
            "experience": obj.get("experience"),
            "bloodGroup": obj.get("bloodGroup"),
            "fatherName": obj.get("fatherName"),
            "isDeleted": obj.get("isDeleted"),
            "isActive": obj.get("isActive"),
            "dateOfCreated": obj.get("dateOfCreated"),
            "dateOfUpdated": obj.get("dateOfUpdated"),
            "roles": obj.get("roles"),
            "isSupervisor": obj.get("isSupervisor"),
            "isManager": obj.get("isManager")
        })
        return _obj


