# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['sequana_pipetools',
 'sequana_pipetools.resources',
 'sequana_pipetools.scripts',
 'sequana_pipetools.snaketools']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.8.4',
 'charset-normalizer>=2,<3',
 'deprecated>=1.2.13',
 'easydev>=0.12.1',
 'importlib_resources>=5.4.0',
 'packaging>=23.1',
 'parse>=1.19.0',
 'pykwalify>=1.8',
 'pyyaml>=1.3',
 'rich-click>=1.7.1,<2.0.0',
 'ruamel.yaml>=0.18.5',
 'tqdm>=4.65',
 'versionix>=0.2.0']

entry_points = \
{'console_scripts': ['sequana_pipetools = sequana_pipetools.scripts.main:main']}

setup_kwargs = {
    'name': 'sequana-pipetools',
    'version': '0.16.9',
    'description': 'A set of tools to help building or using Sequana pipelines',
    'long_description': '\n\n.. image:: https://badge.fury.io/py/sequana-pipetools.svg\n    :target: https://pypi.python.org/pypi/sequana_pipetools\n\n.. image:: https://github.com/sequana/sequana_pipetools/actions/workflows/main.yml/badge.svg?branch=main\n    :target: https://github.com/sequana/sequana_pipetools/actions/workflows/main.yml\n\n.. image:: https://coveralls.io/repos/github/sequana/sequana_pipetools/badge.svg?branch=main\n    :target: https://coveralls.io/github/sequana/sequana_pipetools?branch=main\n\n.. image:: https://readthedocs.org/projects/sequana-pipetools/badge/?version=latest\n    :target: https://sequana-pipetools.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://app.codacy.com/project/badge/Grade/9031e4e4213e4e57a876fd5b792b5003\n   :target: https://app.codacy.com/gh/sequana/sequana_pipetools/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade\n\n.. image:: http://joss.theoj.org/papers/10.21105/joss.00352/status.svg\n   :target: http://joss.theoj.org/papers/10.21105/joss.00352\n   :alt: JOSS (journal of open source software) DOI\n\n:Overview: A set of tools to help building or using Sequana pipelines\n:Status: Production\n:Issues: Please fill a report on `github <https://github.com/sequana/sequana/issues>`__\n:Python version: Python 3.8, 3.9, 3.10, 3.11\n:Citation: Cokelaer et al, (2017), ‘Sequana’: a Set of Snakemake NGS pipelines, Journal of Open Source Software, 2(16), 352,  `JOSS DOI doi:10.21105/joss.00352 <http://www.doi2bib.org/bib/10.21105%2Fjoss.00352>`_\n\nInstallation\n============\n\nfrom pypi website::\n\n    pip install sequana_pipetools\n\nNo dependencies for this package except Python itself. In practice, this package\nhas no interest if not used within a Sequana pipeline. It is installed automatically when you install\na Sequana pipelines. For example::\n\n    pip install sequana_rnaseq\n    pip install sequana_fastqc\n\nSee `Sequana <https://sequana.readthedocs.io>`_ for a list of pipelines ready for production.\n\n\nTargetted audience\n==================\n\nThis package is intended for `Sequana <https://sequana.readthedocs.io>`_ developers seeking to integrate Snakemake pipelines into the Sequana project. Please refer below for more information. Additionally, note that as a developer, you can generate the reference documentation using Sphinx::\n\n    make html\n    browse build/html/index.html\n\n\nWhat is sequana_pipetools ?\n============================\n\n**sequana_pipetools** is a collection of tools designed to facilitate the management of `Sequana <https://sequana.readthedocs.io>`_ pipelines, which includes next-generation sequencing (NGS) pipelines like RNA-seq, variant calling, ChIP-seq, and others.\n\nThe aim of this package is to streamline the deployment of `Sequana pipelines <https://sequana.readthedocs.io>`_ by\ncreating a pure Python library that includes commonly used tools for various pipelines.\n\nPreviously, the Sequana framework incorporated all bioinformatics, Snakemake rules,\npipelines, and pipeline management tools into a single library (Sequana) as illustrated\nin **Fig 1** below.\n\n.. figure:: https://raw.githubusercontent.com/sequana/sequana_pipetools/main/doc/veryold.png\n    :scale: 40%\n\n    **Figure 1** Old Sequana framework will all pipelines and Sequana library in the same\n    place including pipetools (this library).\n\nDespite maintaining an 80% test coverage, whenever changes were introduced to the Sequana library, a comprehensive examination of the entire library was imperative. The complexity escalated further when incorporating new pipelines or dependencies. To address this challenge, we initially designed all pipelines to operate independently, as depicted in **Fig. 2**. This approach allowed modifications to pipelines without necessitating updates to Sequana and vice versa, resulting in a significant improvement.\n\n\n.. figure:: https://raw.githubusercontent.com/sequana/sequana_pipetools/main/doc/old.png\n    :scale: 40%\n\n    **Figure 2** v0.8 of Sequana moved the Snakemake pipelines in independent\n    repositories. A `cookie cutter <https://github.com/sequana/sequana_pipeline_template>`_\n    ease the creation of such pipelines\n\n\nNevertheless, certain tools, including those utilized for user interface and input data sanity checks, were essential for all pipelines, as illustrated by the pipetools box in the figure. With the continuous addition of new pipelines each month, our goal was to enhance the modularity of both the pipelines and Sequana. As a result, we developed a pure Python library named sequana_pipetools, depicted in **Fig. 3**, to further empower the autonomy of the pipelines.\n\n\n\n.. figure:: https://raw.githubusercontent.com/sequana/sequana_pipetools/main/doc/new.png\n    :scale: 40%\n\n    **Figure 3** New Sequana framework. The new Sequana framework comprises the core library\n    and bioinformatics tools, which are now separate from the pipelines. Moreover, the\n    sequana_pipetools library provides essential tools for the creation and management\n    of all pipelines, including a shared parser for options\n\nAs a final step, we separated the rules originally available in Sequana to create an independent package featuring a collection of Snakemake wrappers. These wrappers can be accessed at https://github.com/sequana/sequana-wrappers and offer the added benefit of being rigorously tested through continuous integration.\n\n.. figure:: https://raw.githubusercontent.com/sequana/sequana_pipetools/main/doc/wrappers.png\n    :scale: 40%\n\n    **Figure 3** New Sequana framework 2021. The library itself with the core, the\n    bioinformatics tools is now fully independent of the pipelines.\n\n\n\nQuick tour of the standalone\n============================\n\nThe **sequana_pipetools** package provide a standalone called **sequana_pipetools**. Here is a snapshot of the user interface:\n\n.. figure:: https://raw.githubusercontent.com/sequana/sequana_pipetools/main/doc/UI.png\n\nThere are currently 3-4 main application. The first one is for Linux users under\nbash to obtain completion of a sequana pipeline command line arguments::\n\n    sequana_pipetools --completion fastqc\n\nThe second is used to introspect slurm files to get a summary of the SLURM log\nfiles::\n\n    sequana_pipetools --slurm-diag\n\nIt searches for files with pattern **slurm** in the current directory and slurm files in the ./logs directory.\nThis is used within th pipeline but can be used manually as well and is useful to get a quick summary of common errors found in slurm files.\n\nThe following command provides statistics about Sequana pipelines installed on your system (number of rules, wrappers\nused)::\n\n    sequana_pipetools -- stats\n\nAnd for developpers, a quick creation of schema file given a config file (experimental, developers would still need to edit the schema but it does 90% of the job)::\n\n    sequana_pipetools --config-to-schema config.yaml > schema.yaml\n\nFor Sequana developers\n======================\n\nThe library is intended to help Sequana developers to design their pipelines.\nSee the `Sequana organization repository for examples <https://github.com/sequana>`_.\nIn addition to the standalone shown above, **sequana_pipetools** main goal is to provide utilities to help Sequana developers.\n\nFirst, let us create a pipeline\n\nInitiate a project (Sequana pipeline) with cookiecutter\n-------------------------------------------------------\n\nYou can start a Sequana pipeline skeleton as follows::\n\n    pip install cookiecuter\n    cookiecutter https://github.com/sequana/sequana_pipeline_template -o . --overwrite-if-exists\n\nand then follow the instructions. You will be asked some questions such as the name of your pipeline (eg. variant), a description, keywords and the *project_slug* (just press enter).\n\nUpdate the main script\n-----------------------\n\nGo to sequana_pipelines/NAME and look at the main.py script.\n\nWe currently provide a set of Options classes that should be used to\ndesign the API of your pipelines. For example, the\nsequana_pipetools.options.SlurmOptions can be used as follows inside a standard\nPython module (the last two lines is where the magic happens)::\n\n\n    import rich_click as click\n    from sequana_pipetools.options import *\n    from sequana_pipetools import SequanaManager\n\n    NAME = "fastqc"\n    help = init_click(NAME, groups={\n        "Pipeline Specific": [\n            "--method", "--skip-multiqc"],\n            }\n    )\n\n    @click.command(context_settings=help)\n    @include_options_from(ClickSnakemakeOptions, working_directory=NAME)\n    @include_options_from(ClickSlurmOptions)\n    @include_options_from(ClickInputOptions, add_input_readtag=False)\n    @include_options_from(ClickGeneralOptions)\n    @click.option("--method", default="fastqc", type=click.Choice(["fastqc", "falco"]), help="your msg")\n    def main(**options):\n\n        # the real stuff is here\n        manager = SequanaManager(options, NAME)\n        manager.setup()\n\n        # just two aliases\n        options = manager.options\n        cfg = manager.config.config\n\n\n        # fills input_data, input_directory, input_readtag\n        manager.fill_data_options()\n\n        # fill specific options.\n        # create a function for a given option (here --method)\n        def fill_method():\n            # any extra sanity checks\n            cfg[\'method\'] = options[\'method\']\n\n        if options[\'from-project\']:\n            # in --from-project, we fill the method is --method is provided only (since already pre-filled)\n            if "--method" in sys.argv\n                fill_method()\n        else:\n            # in normal, we always want to fill the user-provided option\n            fill_method()\n\n        # finalise the command and save it; copy the snakemake. update the config\n        # file and save it.\n        manager.teardown()\n\n    if __name__ == "__main__":\n        main()\n\n\n\nDevelopers should look at e.g. module sequana_pipetools.options\nfor the API reference and one of the official sequana pipeline (e.g.,\nhttps://github.com/sequana/sequana_variant_calling) to get help from examples.\n\nThe Options classes provided can be used and combined to design pipelines.\n\n\nHow to use sequana pipetools within your Pipeline\n--------------------------------------------------\n\nFor FastQ files (paired ot not), The config file should look like::\n\n    sequana_wrappers: "v0.15.1"\n\n    input_directory: \'.\'\n    input_readtag: "_R[12]_"\n    input_pattern: \'*fastq.gz\'\n\n\n    apptainers:\n        fastqc: "https://zenodo.org/record/7923780/files/fastqc_0.12.1.img"\n\n    section1:\n        key1: value1\n        key2: value2\n\nAnd your pipeline could make use of this as follows::\n\n    configfile: "config.yaml"\n\n    from sequana_pipetools import PipelineManager\n    manager = PipelineManager("fastqc", config)\n\n    # you can then figure out wheter it is paired or not:\n    manager.paired\n\n    # get the wrapper version to be used within a rule:\n    manager.wrappers\n\n    # the raw data (with a wild card) for the first rule\n    manager.getrawdata()\n\n    # add a Makefile to clean things at the end\n    manager.teardown()\n\n\nSetting up and Running Sequana pipelines\n-----------------------------------------\n\n\nWhen you execute a sequana pipeline, e.g.::\n\n    sequana_fastqc --input-directory data\n\na working directory is created (with the name of the pipeline; here fastqc). Moreover, the working directory\ncontains a shell script that will hide the snakemake command. This snakemake command with make use\nof the sequana wrappers and will use the official sequana github repository by default\n(https://github.com/sequana/sequana-wrappers). This may be overwritten. For instance, you may use a local clone. To do\nso, you will need to create an environment variable::\n\n    export SEQUANA_WRAPPERS="git+file:///home/user/github/sequana-wrappers\n\nIf you decide to use singularity/apptainer, one common error on a cluster is that non-standard paths are not found. You can bind them using the -B option but a more general set up is to create thos environment variable::\n\n    export SINGULARITY_BINDPATH="  /path_to_bind"\n\nfor Singularity setup, or ::\n\n    export APPTAINER_BINDPATH=" /path_to_bind"\n\nfor Apptainer setup.\n\n\nWhat is Sequana ?\n=================\n\n**Sequana** is a versatile tool that provides\n\n#. A Python library dedicated to NGS analysis (e.g., tools to visualise standard NGS formats).\n#. A set of Pipelines dedicated to NGS in the form of Snakefiles\n   (Makefile-like with Python syntax based on snakemake framework) with more\n   common wrappers.\n#. Standalone applications such as sequana_coverage and sequana_taxonomy.\n\nSee the `sequana home page <https://sequana.readthedocs.io>`_ for details.\n\n\nTo join the project, please let us know on `github <https://github.com/sequana/sequana/issues/306>`_.\n\n\n\nChangelog\n=========\n\n========= ======================================================================\nVersion   Description\n========= ======================================================================\n0.16.9    * Fix slurm sys exit (replaced by print)\n          * upadte doc\n          * more tests\n0.16.8    * stats command add the number of rules per pipeline\n          * better slurm parsing using profile tree directory (slurm in logs/)\n0.16.7    * add missing --trimming-quality option in list of TrimmingOption\n          * set default to cutadatp if no fastp available\n          * better UI for the completion script.\n0.16.6    * Set default value for the option trimming to 20\n          * Fix issue https://github.com/sequana/sequana_pipetools/issues/85\n0.16.5    * merge completion standalone into main sequana_pipetools application\n          * add application to create schema given a config file\n          * add application to get basic stats about the pipelines\n          * add precommit and applied black/isort on all files\n          * remove some useless code\n          * update completion to use click instead of argparse\n          * Rename Module into Pipeline (remove rules so Module are only made\n            of pipelines hence the renaming)\n0.16.4    * fix Trimming options (click) for the quality option\n0.16.3    * add class to handle multiplex entry for click.option (useful for\n            multitax multiple databases)\n0.16.2    * remove useless function get_pipeline_location, get_package_location\n            guess_scheduler from sequana_manager (not used)\n          * store sequana version correctly in info.txt Fixing #89\n          * sort click options alphabetically\n          * --from-project not funtcional (example in multitax pipeline)\n          * Click checks that input-directoyr is a directory indeed\n0.16.1    * Fix/rename error_report into onerror to be included in the Snakemake\n            onerror section. added \'slurm\' in slurm output log file in the\n            profile\n0.16.0    * scripts now use click instead of argparse\n          * All Options classes have now an equivalent using click.\n            For example GeneralOptions has a class ClickGeneralOptions.\n            The GeneralOptions is kept for now for back compatibility\n          * --run-mode removed and replaced by --profile options. Profiles are\n            used and stored withub .sequana/profiles\n          * Remove --slurm-cores-per-job redundant with resources from snakemake\n          * Way a main.py is coded fully refactored and simplified as described\n            in the README\n          * cluster_config are now deprecated in favor of profile\n          * sequana_slurm_status removed. Use manager.error_report in pipelines\n            instead\n0.15.0    * remove useless code (readme, description) related to old rules\n          * requirements.txt renamed in tools.txt to store the required tools to\n            run a pipeline.\n          * remove copy_requirements, not used in any pipelines (replaced by code\n            in main.py of the pipelines)\n          * a utility function called getmetadata that returns dictionary\n            with name, version, wrappers version)\n0.14.1    * remove a print statement\n0.14.0    * Module now returns the list of requirements. SequanaManager\n            creates a txt file with all standalones from the requirements.\n0.13.0    * switch to pyproject and fixes #64\n0.12.5    * automatically populater \'wrappers\' in PipelineManager\' based on the\n            config entry \'sequana_wrappers\'.\n0.12.4    * handles sequana pipeline with underscores (e.g. pacbio_qc)\n0.12.3    * fixes singularity-args in profile\n0.12.2    * Fix the singularity arguments by (i) adding -e and (ii) bind the\n            /home. Indeed, snakemake sets --home to the current directory.\n            Somehow the /home is lost. Removed deprecated function\n0.12.1    * fix regression bug\n0.12.0    * factorise hash function to have url2hash easily accessible\n          * Use pth file to retrieve data dir in editable mode\n          * remove harcoded bind path for apptainer. Uses env variable instead\n          * Fixes singularity-prefix path in shell script if not absolute\n0.11.1    * fix regression, add codacy badge, applied black, remove\n            init_pipeline deprecated function.\n0.11.0    * More robust code to check pip executable.\n0.10.2    * Fixes https://github.com/sequana/sequana_pipetools/issues/49\n            that properly sets the apptainer prefix in defualt mode\n0.10.1    * any python module can implement a Sequana pipeline.\n0.10.0    * incorporate the sequana_start_template from sequana and refactorise\n            the scripts into scripts/\n0.9.6     * hotfix on apptainer to be back compatible if no apptainers section\n            is found in the config file.\n0.9.5     * replaced singularity word by apptainer (--use-aptainer instead of\n            --use-singularity)\n0.9.4     * If timeout occurs while singularity is downloaded, catch the error\n            remove truncated file.\n0.9.3     * hotfix missing import when checking sequana version\n          * add config2schema utility function for developers\n0.9.2     * Udate asynchronous downloads to use aiohttp\n0.9.1     * Ability to download automatically singularity images (as URLs) if\n            set in the  pipelines (container field). add the --use-singularity\n            option in all pipelines (and --singualrity-prefix)\n0.9.0     * **MAJOR update/Aug 2022**\n          * new mechanism to handle  profile for Snakemake that will replace the\n            cluster_config.yaml files\n          * Major cleanup of PipelineManager (PipelineManagerGeneric was\n            removed). The way input files are handled was also cleanup.\n            Fixes https://github.com/sequana/sequana_pipetools/issues/37\n            and also files starting with common prefixes\n0.8.1     * Better schema validation\n0.8.0     * removed \'required_binaries\' attribute in module.py (not used)\n          * removed \'copy_requirements\' in sequana_config and fixed the one\n            in the sequana_manager\n          * switch from distutils to packaging\n          * More tests reaching >90%\n0.7.6     * simplify the setup() method in pipeline manager\n0.7.5     * can set a SEQUANA_WRAPPERS env variable to use local wrappers\n0.7.4     * switch biomics to biomicspole for the slurm queue (internal change)\n0.7.3     * add schema pipeline manager directory & fix attrdict error with yaml\n0.7.2     * allows pipeline and rules to have the same name\n0.7.1     * Fix the --from-project option\n0.7.0     * Set the --wrapper-prefix to point to the  sequana-wrappers github\n0.6.3     * Fix SequanaConfig file\n0.6.2     * Fix script creation to include wrapper and take new snakemake\n            syntax into account\n0.6.1     * update schema handling\n0.6.0     * Move all modules related to pipelines rom sequana into\n            sequana_pipetools; This release should now be the entry point for\n            all Sequana pipelines (no need to import sequana itself).\n0.5.3     * feature removed in sequana to deal with adapter removal and\n            changes updated in the package (removed the \'design\' option\n            from the cutadapt rules and needed)\n          * Improve TrimmingOptions to provide specific list of tools\n            and a default trimming tool\n0.5.2     * add TrimmingOptions class intended at replacing CutadaptOptions\n          * to avoid extra spaces, add \'-o nospace\' in all completion files\n0.5.1     * fix typo\n0.5.0     * add new module called error to be added in onerror sections of all\n            pipelines. Usual test update. Pin to stable version\n0.4.3     * add MANIFEST to include missing requirements.txt\n0.4.2     * add FeatureCounts options\n0.4.1     * add slurm status utility (sequana_slurm_status)\n0.4.0     * stable version\n0.3.1     * comment the prin_newest_version, which is too slow\n0.3.0     * stable release\n0.2.6     * previous new feature led to overhead of a few seconds with --help\n            in this version, we include it only when using --version\n0.2.5     * include newest_version feature\n0.2.4     * completion can now handle multiple directories/files properly\n          * better doc and more tests\n0.2.3     * fix completion to avoir 2 scripts to overwrite each other\n0.2.2     * add a deprecated warning + before_pipeline function\n0.2.1     * add --from-project option to import existing config file\n          * remove --paired-data option\n0.2.0     add content from sequana.pipeline_common to handle all kind of\n          options in the argparse of all pipelines. This is independent of\n          sequana to speed up the --version and --help calls\n0.1.2     add version of the pipeline in the output completion file\n0.1.1     release bug fix\n0.1.0     creation of the package\n========= ======================================================================\n',
    'author': 'Sequana Team',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/sequana/sequana_pipetools',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
